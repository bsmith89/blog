<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Deep Ecology - Byron J. Smith</title><link href="//bsmith89.github.com/blog/" rel="alternate"></link><link href="//bsmith89.github.com/blog/feeds/byron-j-smith.atom.xml" rel="self"></link><id>//bsmith89.github.com/blog/</id><updated>2018-05-18T11:00:00-04:00</updated><entry><title>Changes to the gut microbiome resulting from acarbose treatment are associated with increased longevity in mice</title><link href="//bsmith89.github.com/blog/acarbose-longevity-preprint.html" rel="alternate"></link><published>2018-05-01T12:00:00-04:00</published><updated>2018-05-18T11:00:00-04:00</updated><author><name>Byron J. Smith</name></author><id>tag:bsmith89.github.com,2018-05-01:/blog/acarbose-longevity-preprint.html</id><summary type="html">&lt;!--
## Introduction
--&gt;

&lt;p&gt;&lt;em&gt;I'm excited to announce that we've posted a
&lt;a href="https://doi.org/10.1101/311456"&gt;preprint of our latest manuscript to the bioRxiv&lt;/a&gt;,
as well as submitted it for peer review to the open access journal Microbiome.
I'll update this note if and when it gets accepted.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;These days it seems like the only research more over-hyped than
"microbiome" is &lt;em&gt;longevity-enhancement&lt;/em&gt;.
It is therefore with some trepidation that I have released into this world of
buzz the first chapter of my dissertation, titled:
"Changes in the gut microbiota and fermentation products associated with
enhanced longevity in acarbose-treated mice."&lt;/p&gt;
&lt;p&gt;Previous work (done by my co-authors on this paper as well as others) has
conclusively demonstrated that treatment with the anti-diabetic drug acarbose
&lt;a href="https://doi.org/10.1111/acel.12170"&gt;substantially increases lifespan in mice&lt;/a&gt; (&lt;a href="https://doi.org/10.1111/acel.12496"&gt;also&lt;/a&gt;).
The magnitude of the effect in males&amp;mdash;where it's the most
pronounced&amp;mdash;puts it on par with rapamycin and 17-&amp;alpha;-estradiol, two
drugs that have gotten heavy interest from the …&lt;/p&gt;</summary><content type="html">&lt;!--
## Introduction
--&gt;

&lt;p&gt;&lt;em&gt;I'm excited to announce that we've posted a
&lt;a href="https://doi.org/10.1101/311456"&gt;preprint of our latest manuscript to the bioRxiv&lt;/a&gt;,
as well as submitted it for peer review to the open access journal Microbiome.
I'll update this note if and when it gets accepted.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;These days it seems like the only research more over-hyped than
"microbiome" is &lt;em&gt;longevity-enhancement&lt;/em&gt;.
It is therefore with some trepidation that I have released into this world of
buzz the first chapter of my dissertation, titled:
"Changes in the gut microbiota and fermentation products associated with
enhanced longevity in acarbose-treated mice."&lt;/p&gt;
&lt;p&gt;Previous work (done by my co-authors on this paper as well as others) has
conclusively demonstrated that treatment with the anti-diabetic drug acarbose
&lt;a href="https://doi.org/10.1111/acel.12170"&gt;substantially increases lifespan in mice&lt;/a&gt; (&lt;a href="https://doi.org/10.1111/acel.12496"&gt;also&lt;/a&gt;).
The magnitude of the effect in males&amp;mdash;where it's the most
pronounced&amp;mdash;puts it on par with rapamycin and 17-&amp;alpha;-estradiol, two
drugs that have gotten heavy interest from the longevity-enhancement crowd.
&lt;!--
TODO: Link to this buzz.
--&gt;
While the approximately 20% increase in median lifespan in males is not as big
as dietary restriction (a whopping ~40% in several studies), and the effect
is much less in females (only 5% give-or-take) this still represents an
exciting potential therapy if it can be reproduced in humans.&lt;/p&gt;
&lt;p&gt;More importantly, it represents another tiny toehold in the still inscrutable
field of longevity science.
(Disclaimer: &lt;em&gt;I am not a longevity expert.&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;To drive home how little we understand about longevity, not only do we have
just a rudimentary understanding of
&lt;a href="https://doi.org/10.1016/j.cell.2015.02.020"&gt;how dietary restriction increases lifespan&lt;/a&gt;&lt;sup id="fnref-dr-mechanism-note"&gt;&lt;a class="footnote-ref" href="#fn-dr-mechanism-note"&gt;1&lt;/a&gt;&lt;/sup&gt;,
but we can't even say if acarbose (or any other therapy) has a similar
mechanism of action.
It seems reasonable to expect that it might;
acarbose inhibits the enzymes that break down starch, reducing the uptake of
glucose after a meal.
However, the physiological response to long-term treatment with the drug is
quite distinct from dietary restriction.&lt;/p&gt;
&lt;p&gt;This discrepancy has inspired an alternative hypothesis: looking instead to the
starch left undigested and that therefore enters the &lt;em&gt;lower&lt;/em&gt; digestive system
in much larger amounts.
If this increased supply of substrate for microbial fermentation causes an
increased production of "good" bacterial products&amp;mdash;for instance short-chain
fatty acids (SCFAs)&amp;mdash;then this could result in improved health and,
ultimately, longevity.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Concept diagram: our alternative model for acarbose's effect on longevity.
" src="static/images/longev_concept.png"&gt;&lt;/p&gt;
&lt;h2&gt;Features and limitations of our study&lt;/h2&gt;
&lt;p&gt;To explore this hypothesis, we have been very fortunate to collaborate
with the National Institute on Aging's
&lt;a href="https://www.nia.nih.gov/research/dab/interventions-testing-program-itp"&gt;Interventions Testing Program (ITP)&lt;/a&gt;, an
ongoing multi-institutional study that trials promising anti-aging therapies
in large mouse cohorts.
The life-extending properties of acarbose were first observed in this study,
and subsequent mouse cohorts have both confirmed the original finding and built
on it.&lt;/p&gt;
&lt;p&gt;My manuscript is based on the analysis of fecal samples from these mice,
measuring the concentrations of three key SCFAs and other metabolites as
well as the composition of the bacterial community.
Longevity studies like these are challenging simply because you're waiting
for your mice to die naturally.
This is both time consuming and expensive;
you need quite a few mice for statistical reasons, and they can live for years.
To my knowledge, ours is the first study to combine characterization of the
fecal microbiome with longevity measurement in normal, healthy mice.
Another valuable feature of our study is the pairing of chemical analysis with
community characterization in the same samples, presumably improving
our ability to detect associations between bacterial taxa and their
fermentation products.&lt;/p&gt;
&lt;p&gt;Nonetheless, as with any research this study has crucial limitations
and is only the first step in process of validating an exciting
hypothesis.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First, we did not set out to test the central, causal claim of our model:
    that SCFAs in the gut increase lifespan.
    To do so would require experimental control of one or more of the three key
    SCFAs in the lower digestive system&amp;mdash;acetate, butyrate and
    propionate&amp;mdash;&lt;em&gt;without&lt;/em&gt; independently affecting mouse physiology.
    While a useful manipulation, acarbose supplementation has other major
    effects (on blood glucose, for instance) and therefore does not qualify.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Second, by definition, the mice for which we obtained fecal pellets had
    survived up to the time of collection.
    Since samples were collected from mice nearing to the median lifespan of
    the control mice,
    our interpretation are therefore limited to &lt;em&gt;old&lt;/em&gt; mice.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Third, this was a purely cross-sectional study with a single sample
    collected from each mouse.
    We can answer the most pressing questions without longitudinal sampling,
    but variation within each mouse, on the time-scale of hours, days, or
    weeks, surely introduced noise and decreased our statistical power.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally, we only measure chemical and community composition in &lt;em&gt;feces&lt;/em&gt;.
    While this is an effective proxy for the gut microbiome, and a huge
    fraction of studies accept this shortcoming, it is important to remember
    that fecal SCFA concentrations may not reflect bacterial production, nor
    exposure of the gut and other host tissues to these compounds.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Interesting findings&lt;/h2&gt;
&lt;p&gt;Our study explores predictions of the hypothesis that acarbose
increases longevity via the bacterial production of short-chain fatty acids,
finding that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;acarbose treatment modifies the composition of the gut microbiota,&lt;/li&gt;
&lt;li&gt;variation in the abundance of particular bacterial community members
is associated with variation in the concentration of fermentation products,&lt;/li&gt;
&lt;li&gt;one or more of the major SCFAs are increased in the feces of acarbose
treated mice, and&lt;/li&gt;
&lt;li&gt;SCFA concentrations are associated with mouse lifespan.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;While our model does not supersede the more mainstream hypothesis that
acarbose acts to increase longevity through its effects on glucose homeostasis
pathways, our work is important support for an alternative model in which the
microbiota plays a central role.&lt;/p&gt;
&lt;p&gt;If you want to know all the juicy details, &lt;a href="https://doi.org/10.1101/311456"&gt;read the paper&lt;/a&gt;.
Here, however, I want to expand a little bit on some
of the less obvious bits that I think are worth your attention.&lt;/p&gt;
&lt;h3&gt;Quantification of bacterial density&lt;/h3&gt;
&lt;p&gt;An interesting methodological feature of our 16S rRNA gene survey is the
inclusion of an internal DNA standard for the purpose of comparing the absolute
abundance of the bacterial population between samples.
This approach has been published in the past (&lt;a href="https://doi.org/10.1186/s40168-016-0175-0"&gt;here&lt;/a&gt; and
&lt;a href="https://doi.org/10.1016/j.soilbio.2016.02.003"&gt;here&lt;/a&gt;), but is not widely implemented.
Normally, sequence based surveys of bacterial communities are limited to
comparing the relative abundance of particular amplicons.
By spiking in a known amount of defined DNA&amp;mdash;in this case
10 &amp;mu;L of a stationary phase culture of &lt;em&gt;Sphingopyxis alaskensis&lt;/em&gt;&amp;mdash;we
can compare population density of bacteria per gram of feces
based on the recovery rate of the exogenous 16S gene.
Since we can uniquely identify and remove the foreign sequence,
this approach is fully complementary to a relative-abundance based analyses.&lt;/p&gt;
&lt;p&gt;We use this tool to confirm that observed increases in the relative abundance
of several taxa reflect increases in their population size, rather than
the decreased abundance of other bacteria, a distinction that is impossible
to make with standard survey methods.&lt;/p&gt;
&lt;p&gt;In this study we did not attempt to quantify the density of bacteria in the
spike itself, which means that our abundance estimates are in units of
spike-equivalents rather than gene copies.
This does not affect our interpretations, although it can create challenges for
communication.
We skipped this step because it is probably not possible to accurately estimate
cell counts in the endemic community based on 16S rRNA gene density.
Extraction and amplification efficiency, as well as
&lt;a href="https://rrndb.umms.med.umich.edu/"&gt;16S rRNA gene copies per cell&lt;/a&gt;, vary among species.
Instead we depend on an assumption of per cell copy number invariance in the
community on average, as well as in the specific taxa being assessed.
For this reason, we've opted to use "spike-adjusted abundance" as a euphemism
for the estimate.&lt;/p&gt;
&lt;p&gt;I plan to write more about this approach in the future.
For now I'll just say it was a small, but valuable feature of our study.&lt;/p&gt;
&lt;h3&gt;Identification of bacterial function&lt;/h3&gt;
&lt;p&gt;Another interesting method that I'm proud to have included was a
&lt;a href="https://en.wikipedia.org/wiki/Lasso_(statistics)"&gt;LASSO regression&lt;/a&gt; of metabolite concentrations on taxon abundances.
Our reason for doing this was the belief that the bacteria
most strongly correlated with particular fermentation products were the most
likely to be producing them.
This na&amp;iuml;ve approach appears to have paid off;
the method identified contenders for these functional roles that, in many
cases, match &lt;em&gt;a priori&lt;/em&gt; expectations.
For instance, the most abundant &lt;em&gt;Lactobacillus&lt;/em&gt; was closely associated with
lactate concentrations.
(Surprised?)
Likewise, the dominant members of the &lt;em&gt;Muribaculaceae&lt;/em&gt; appear
to be predictive of propionate concentrations, matching functional annotations
of genomes from this family.&lt;/p&gt;
&lt;p&gt;There are almost certainly better methods for discovering the taxa that
produce particular metabolites,
but LASSO regression is a surprisingly simple approach and sufficient to
demonstrate a relationship between bacterial abundances and SCFAs,
while being (theoretically) more robust to other sources of co-linearity.&lt;/p&gt;
&lt;h2&gt;A reproducible paper&lt;/h2&gt;
&lt;p&gt;Besides the joy of having contributed to SCIENCE,
I am also proud to declare that the results&lt;sup id="fnref-but-one"&gt;&lt;a class="footnote-ref" href="#fn-but-one"&gt;2&lt;/a&gt;&lt;/sup&gt; in our manuscript
are recreate-able by sufficiently interested readers.
Raw sequence data are available from the &lt;a href="https://www.ncbi.nlm.nih.gov/bioproject/PRJNA448009"&gt;SRA&lt;/a&gt;, and everything
else&amp;mdash;HPLC peak area tables, mouse survival data, and all of the relevant
metadata&amp;mdash;can be found in a &lt;a href="https://github.com/bsmith89/smith2018paper"&gt;public GitHub repository&lt;/a&gt;.
That repo also comes with all of the pipeline
code, implemented as scripts and a Makefile, for raw data
processing.&lt;/p&gt;
&lt;p&gt;For anyone who doesn't want to install a bunch of software and
reserve about a hundred hours of CPU time
to reprocess our sequences, intermediate results are available in a preloaded
SQLite database.
Finally, Jupyter notebooks with code to reproduce published figures and
statistics have also been included.
I'm not providing a prepared container, unfortunately, and some of the
required software can be challenging to install.
Once that's done, though, the Makefile is designed to generate the finished
paper with a single invocation of &lt;code&gt;make paper&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;While there's an "official", current release of that repository,
&lt;a href="https://doi.org/10.5281/zenodo.1229203"&gt;checkpointed by Zenodo&lt;/a&gt;,
I may implement patches if they make results easier for readers to recreate.
If anyone out there wants to get really crazy, I'll even take pull-requests!&lt;/p&gt;
&lt;p&gt;This manuscript is a key chapter of my PhD thesis, and I'll be building off of
the findings in subsequent work.
So stay tuned!&lt;/p&gt;
&lt;p&gt;Read the paper.&lt;/p&gt;
&lt;p&gt;Run the code.&lt;/p&gt;
&lt;p&gt;Let me know what you think.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-dr-mechanism-note"&gt;
&lt;p&gt;Quote: "The mechanisms mediating the health benefits of
  DR are not fully understood in any organism."&amp;#160;&lt;a class="footnote-backref" href="#fnref-dr-mechanism-note" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-but-one"&gt;
&lt;p&gt;Except for one: Our supplemental materials do not included the code
        needed to recreate the first figure, survival curves demonstrating
        that the population of mice from which we sampled recapitulate the
        sex-specific longevity effects of acarbose.
        This result was computed by a collaborator and uses longevity data
        that will be released with a different paper, currently in
        preparation.
        I believe that this particular result is a relatively minor part
        of our story, confirming a previously observed, and well
        established, pattern.&amp;#160;&lt;a class="footnote-backref" href="#fnref-but-one" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="microbiome"></category><category term="acarbose"></category><category term="preprint"></category><category term="SCFAs"></category><category term="longevity"></category><category term="open science"></category></entry><entry><title>Tutorial: Reproducible data analysis pipelines using Snakemake</title><link href="//bsmith89.github.com/blog/snakemake-analysis.html" rel="alternate"></link><published>2017-11-19T17:00:00-05:00</published><updated>2017-11-19T17:00:00-05:00</updated><author><name>Byron J. Smith</name></author><id>tag:bsmith89.github.com,2017-11-19:/blog/snakemake-analysis.html</id><summary type="html">&lt;p&gt;In many areas of natural and social science, as well as engineering, data
analysis involves a series of transformations: filtering, aggregating,
comparing to theoretical models, culminating in the visualization and
communication of results.
This process is rarely static, however, and
components of the analysis pipeline are frequently subject to replacement
and refinement, resulting in challenges for reproducing computational
results.
Describing data analysis as a directed network of transformations
has proven useful for translating between human intuition and computer
automation.
In the past I've &lt;a href="//bsmith89.github.com/blog/makefile-shortcuts.html"&gt;evangelized extensively for GNU Make&lt;/a&gt;,
which takes advantage of this graph representation to enable incremental builds
and parallelization.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Snakemake&lt;/em&gt; is a next-generation tool based on this concept and designed
specifically for bioinformatics and other complex, computationally
challenging analyses.
I've started using &lt;em&gt;Snakemake&lt;/em&gt; for my own data analysis projects, and I've
found it to be a consistent improvement, enabling more complex pipelines with
fewer of the "hacks" that …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In many areas of natural and social science, as well as engineering, data
analysis involves a series of transformations: filtering, aggregating,
comparing to theoretical models, culminating in the visualization and
communication of results.
This process is rarely static, however, and
components of the analysis pipeline are frequently subject to replacement
and refinement, resulting in challenges for reproducing computational
results.
Describing data analysis as a directed network of transformations
has proven useful for translating between human intuition and computer
automation.
In the past I've &lt;a href="//bsmith89.github.com/blog/makefile-shortcuts.html"&gt;evangelized extensively for GNU Make&lt;/a&gt;,
which takes advantage of this graph representation to enable incremental builds
and parallelization.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Snakemake&lt;/em&gt; is a next-generation tool based on this concept and designed
specifically for bioinformatics and other complex, computationally
challenging analyses.
I've started using &lt;em&gt;Snakemake&lt;/em&gt; for my own data analysis projects, and I've
found it to be a consistent improvement, enabling more complex pipelines with
fewer of the "hacks" that are often necessary when using &lt;em&gt;Make&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I've taught &lt;a href="//bsmith89.github.com/blog/make-analysis.html"&gt;&lt;em&gt;Make&lt;/em&gt; workshops in the past&lt;/a&gt;,
so, when I was invited to present to the Boise State University Joint
User Groups, I was excited to convert that tutorial to &lt;em&gt;Snakemake&lt;/em&gt;.
Here, I've converted that tutorial into a blog post.
The original (and therefore this lesson as well) is inspired by the
&lt;a href="https://swcarpentry.github.io/make-novice/"&gt;Software Carpentry &lt;em&gt;Make&lt;/em&gt; lesson&lt;/a&gt;,
to which I am also a contributor.&lt;/p&gt;
&lt;p&gt;Some prior experience with the command line is assumed, and learners are
encouraged to follow along on their own computers.
The entire tutorial, including questions for the learner are designed to
take 2 hours as a live-coded, Software Carpentry style lesson.
A standalone lesson repository can be found &lt;a href="https://github.com/bsmith89/snakemake-boise"&gt;here&lt;/a&gt; and is
licensed CC-BY.&lt;/p&gt;
&lt;h1&gt;Setup&lt;/h1&gt;
&lt;p&gt;If not already on your computer, install the following prerequistes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;em&gt;Bash&lt;/em&gt; terminal&lt;/li&gt;
&lt;li&gt;Python 3.6 and the following packages&lt;ul&gt;
&lt;li&gt;&lt;code&gt;snakemake&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;matplotlib&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;numpy&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The lesson assumes the following programs are also installed, but
    they're not absolutely necessary for the flow of the lesson,
    and/or alternatives are widely available:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;head&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nano&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dot&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tree&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://github.com/bsmith89/zipf-example"&gt;This example directory&lt;/a&gt; should be downloaded to the user's
desktop and navigated into at the command line.
(e.g. &lt;code&gt;git clone https://github.com/bsmith89/zipf-example; cd zipf-example&lt;/code&gt;)&lt;/p&gt;
&lt;h1&gt;Motivation&lt;/h1&gt;
&lt;h2&gt;Zipf's Law [10 minutes]&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The most frequently-occurring word occurs approximately twice as
often as the second most frequent word. This is
&lt;a href="http://en.wikipedia.org/wiki/Zipf%27s_law"&gt;Zipf's Law&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let's imagine that we're interested in testing Zipf's law in some of our
favorite books.
We've compiled our raw data: the books we want to analyze,
and have prepared several Python scripts that together make up our
analysis pipeline.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;tree&lt;/code&gt; command produces a handy tree-diagram of the directory.
(You may not have this program installed on your computer.)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.
├── analysis.sh
├── books
│   ├── LICENSE_TEXTS.md
│   ├── abyss.txt
│   ├── isles.txt
│   ├── last.txt
│   └── sierra.txt
├── matplotlibrc
├── requirements.pip
└── scripts
    ├── plotcount.py
    └── wordcount.py

2 directories, 10 files
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here you see that we're starting with a well designed project directory.
The raw data (books) are stored in their own directory, and scripts have
informative names.&lt;/p&gt;
&lt;p&gt;Let's take a look at our raw data&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;head books/isles.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Our first step is to count the frequency of each word in a book.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;scripts/wordcount.py books/isles.txt isles.tsv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's take a quick peek at the result.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;head -5 isles.tsv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;shows us the top 5 lines in the output file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;the 3822    6.7371760973
of  2460    4.33632998414
and 1723    3.03719372466
to  1479    2.60708619778
a   1308    2.30565838181
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Each row shows the word itself, the number of occurrences of that
word, and the number of occurrences as a percentage of the total
number of words in the text file.&lt;/p&gt;
&lt;p&gt;We can do the same thing for a different book:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;scripts/wordcount.py books/abyss.txt abyss.tsv
head -5 abyss.tsv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, let's visualize the results.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;scripts/plotcount.py isles.tsv ascii
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;ascii&lt;/code&gt; argument has been added so that we get a text-based
bar-plot printed to the screen.&lt;/p&gt;
&lt;p&gt;The script is also able to render a graphical bar-plot using matplotlib
and save the figure to a named file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;scripts/plotcount.py isles.tsv isles.png
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Together these scripts implement a common workflow:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Read a data file.&lt;/li&gt;
&lt;li&gt;Perform an analysis on this data file.&lt;/li&gt;
&lt;li&gt;Write the analysis results to a new file.&lt;/li&gt;
&lt;li&gt;Plot a graph of the analysis results.&lt;/li&gt;
&lt;li&gt;Save the graph as an image, so we can publish it.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Writing a script to do our analysis [5 minutes]&lt;/h2&gt;
&lt;p&gt;Running this pipeline for one book is relatively simple using the command-line.
But once the number of files and the number of steps in the pipeline
expands, this can turn into a lot of work.
Plus, no one wants to sit and wait for a command to finish, even just for 30
seconds.&lt;/p&gt;
&lt;p&gt;The most common solution to the tedium of data processing is to write
a master script that runs the whole pipeline from start to finish.&lt;/p&gt;
&lt;p&gt;We can see such a script in &lt;code&gt;analysis.sh&lt;/code&gt;, which contains:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;span class="c1"&gt;# USAGE: bash analysis.sh&lt;/span&gt;
&lt;span class="c1"&gt;# to produce plots for isles and abyss.&lt;/span&gt;

scripts/wordcount.py books/isles.txt isles.tsv
scripts/wordcount.py books/abyss.txt abyss.tsv

scripts/plotcount.py isles.tsv isles.png
scripts/plotcount.py abyss.tsv abyss.png

&lt;span class="c1"&gt;# Archive the results.&lt;/span&gt;
rm -rf zipf_results
mkdir zipf_results
cp isles.tsv abyss.tsv isles.png abyss.png zipf_results/
tar -czf zipf_results.tgz zipf_results
rm -r zipf_results
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This master script solved several problems in computational reproducibility:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It explicitly documents our pipeline,
    making communication with colleagues (and our future selves) more efficient.&lt;/li&gt;
&lt;li&gt;It allows us to type a single command, &lt;code&gt;bash analysis.sh&lt;/code&gt;, to
    reproduce the full analysis.&lt;/li&gt;
&lt;li&gt;It prevents us from &lt;em&gt;repeating&lt;/em&gt; typos or mistakes.
    You might not get it right the first time, but once you fix something
    it'll (probably) stay that way.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;What are the problems with this approach? [10 minutes]&lt;/h2&gt;
&lt;p&gt;A master script is a good start, but it has a few shortcomings.&lt;/p&gt;
&lt;p&gt;Let's imagine that we adjusted the width of the bars in our plot
by editing &lt;code&gt;scripts/plotcount.py&lt;/code&gt;;
in the function definition for
&lt;code&gt;plot_word_counts&lt;/code&gt;, &lt;code&gt;width = 1.0&lt;/code&gt; is now &lt;code&gt;width = 0.8&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now we want to recreate our figures.
We &lt;em&gt;could&lt;/em&gt; &lt;code&gt;bash analysis.sh&lt;/code&gt; again.
That would work, but it could also be a big pain if counting words takes
more than a few seconds.
The word counting routine hasn't changed; we shouldn't need to recreate
those files.&lt;/p&gt;
&lt;p&gt;Alternatively, we could manually rerun the plotting for each word-count file
and recreate the archive.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; file in *.tsv&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    scripts/plotcount.py &lt;span class="nv"&gt;$file&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="p"&gt;/.tsv/.png&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;

rm -rf zipf_results
mkdir zipf_results
cp isles.tsv abyss.tsv isles.png abyss.png zipf_results/
tar -czf zipf_results.tgz zipf_results
rm -r zipf_results
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But by then we've nullified many of the benefits of having a master script in
the first place.&lt;/p&gt;
&lt;p&gt;Another popular option is to comment out a subset of the lines in
&lt;code&gt;analysis.sh&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;span class="c1"&gt;# USAGE: bash analysis.sh&lt;/span&gt;
&lt;span class="c1"&gt;# to produce plots for isles and abyss.&lt;/span&gt;

&lt;span class="c1"&gt;# These lines are commented out because they don&amp;#39;t need to be rerun.&lt;/span&gt;
&lt;span class="c1"&gt;#scripts/wordcount.py isles.txt isles.tsv&lt;/span&gt;
&lt;span class="c1"&gt;#scripts/wordcount.py abyss.txt abyss.tsv&lt;/span&gt;

scripts/plotcount.py isles.tsv isles.png
scripts/plotcount.py abyss.tsv abyss.png

&lt;span class="c1"&gt;# Archive the results.&lt;/span&gt;
rm -rf zipf_results
mkdir zipf_results
cp isles.tsv abyss.tsv isles.png abyss.png zipf_results/
tar -czf zipf_results.tgz zipf_results
rm -r zipf_results
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Followed by &lt;code&gt;bash analysis.sh&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But this process, and subsequently undoing it,
can be a hassle and source of errors in complicated pipelines.&lt;/p&gt;
&lt;p&gt;What we really want is an executable &lt;em&gt;description&lt;/em&gt; of our pipeline that
allows software to do the tricky part for us:
figuring out what steps need to be rerun.
It would also be nice if this tool encourage a &lt;em&gt;modular&lt;/em&gt; analysis
and reusing instead of rewriting parts of our pipeline.
As an added benefit, we'd like it all to play nice with the other
mainstays of reproducible research: version control, Unix-style tools,
and a variety of scripting languages.&lt;/p&gt;
&lt;h1&gt;Snakemake background [5 minutes]&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Snakemake&lt;/em&gt; comes from a lineage of computer programs&amp;mdash;most notably
 &lt;em&gt;Make&lt;/em&gt;&amp;mdash;originally designed to
automate the compilation and installation of software.
Programs like &lt;em&gt;Make&lt;/em&gt; automate the building of target files through a series of
discrete steps.
Despite the original purpose, this design makes it a great fit for
bioinformatics pipelines, which usually work by transforming data from one form
to another
(e.g. &lt;em&gt;raw data&lt;/em&gt; &amp;#8594; &lt;em&gt;word counts&lt;/em&gt; &amp;#8594; &lt;em&gt;???&lt;/em&gt; &amp;#8594; &lt;em&gt;profit&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Snakemake&lt;/em&gt; is inspired by this approach, but designed specifically for
computationally intensive and/or complex data analysis pipelines.
The name is a reference to the programming language &lt;em&gt;Python&lt;/em&gt;, which forms
the basis for the &lt;em&gt;Snakemake&lt;/em&gt; syntax.
You don't need to be an expert at &lt;em&gt;Python&lt;/em&gt; to use &lt;em&gt;Snakemake&lt;/em&gt;, but it can
sometimes be very useful.
There are pros and cons to using &lt;em&gt;Snakemake&lt;/em&gt; versus any other analysis pipeline
tools, and it is worth considering other options, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;GNU Make&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;doit&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Galaxy&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Tutorial&lt;/h1&gt;
&lt;h2&gt;Writing and Running Snakefiles [10 minutes]&lt;/h2&gt;
&lt;p&gt;Let's get started writing a description of our analysis for &lt;em&gt;Snakemake&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Open up a file called &lt;code&gt;Snakefile&lt;/code&gt; in your editor and add the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rule wordcount_isles:
    input: &amp;quot;books/isles.txt&amp;quot;
    output: &amp;quot;isles.tsv&amp;quot;
    shell: &amp;quot;scripts/wordcount.py books/isles.txt isles.tsv&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We have now written the simplest, non-trivial snakefile.
The &lt;code&gt;shell:&lt;/code&gt; line is pretty reminiscent of one of the lines from our master
script.
I bet you can already see what this snakefile means.&lt;/p&gt;
&lt;p&gt;Let's walk through what we've written.
The first line uses the keyword &lt;code&gt;rule&lt;/code&gt; followed by the name of our rule:
&lt;code&gt;wordcount_isles&lt;/code&gt;.
We end that line with a colon.
All of the following lines in our rule are indented with four spaces.
The second line says that it takes an input file, using the &lt;code&gt;input&lt;/code&gt;
keyword which is again followed by a colon.
We then give it the path to this prerequisite (&lt;code&gt;books/isles.txt&lt;/code&gt;), wrapped in
quotes.
The third line does the same thing with the output file (&lt;code&gt;isles.tsv&lt;/code&gt;).
And the last line is the exact shell command that we used in our shell script
earlier to create the target output file.
Like scripting, &lt;em&gt;Snakemake&lt;/em&gt; allows us to wrap a series of shell commands, but
is more expressive and flexible than a script.&lt;/p&gt;
&lt;p&gt;Our snakefile describes a (very short) pipeline:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We are generating a file called &lt;code&gt;isles.tsv&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Creating this file requires &lt;code&gt;books/isles.txt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The command to create this file runs the script runs &lt;code&gt;wordcount.py&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We'll think about our pipeline as a network of files that are dependent
on one another.
Right now our Snakefile describes a pretty simple &lt;strong&gt;dependency graph&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;books/isles.txt&lt;/code&gt; &amp;#8594; &lt;code&gt;isles.tsv&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;where the "&amp;#8594;" is pointing from requirements to targets.&lt;/p&gt;
&lt;h3&gt;Running Snakemake&lt;/h3&gt;
&lt;p&gt;Now that we have a (currently incomplete) description of our pipeline,
let's use &lt;em&gt;Snakemake&lt;/em&gt; to execute it.&lt;/p&gt;
&lt;p&gt;First, remove the previously generated files.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rm *.tsv *.png zipf_results.tgz
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;snakemake isles.tsv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should see the following print to the terminal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Provided cores: 1
Rules claiming more threads will be scaled down.
Job counts:
        count   jobs
        1       wordcount_isles
        1

rule wordcount_isles:
    input: books/isles.txt
    output: isles.tsv
    jobid: 0

Finished job 0.
1 of 1 steps (100%) done
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;By default, &lt;em&gt;Snakemake&lt;/em&gt; prints a summary of the recipes that it
executes.&lt;/p&gt;
&lt;p&gt;Let's see if we got what we expected.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;head -5 isles.tsv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first 5 lines of that file should look exactly like before.&lt;/p&gt;
&lt;h3&gt;Re-running Snakemake&lt;/h3&gt;
&lt;p&gt;Let's try running &lt;em&gt;Snakemake&lt;/em&gt; the same way again.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;snakemake isles.tsv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This time, instead of executing the same recipe,
&lt;em&gt;Snakemake&lt;/em&gt; prints &lt;code&gt;Nothing to be done.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;What's happening here?&lt;/p&gt;
&lt;p&gt;When you ask &lt;em&gt;Snakemake&lt;/em&gt; to make &lt;code&gt;isles.tsv&lt;/code&gt; it first looks at
the modification time of that target.
Next it looks at the modification time for the target's prerequisites.
If the target is newer than the prerequisites &lt;em&gt;Snakemake&lt;/em&gt; decides that
the target is up-to-date and does not need to be remade.&lt;/p&gt;
&lt;p&gt;Much has been said about using modification times as the cue for remaking
files.
This can be another &lt;em&gt;Snakemake&lt;/em&gt; gotcha, so keep it in mind.&lt;/p&gt;
&lt;p&gt;If you want to induce the original behavior, you only have to
change the modification time of &lt;code&gt;books/isles.txt&lt;/code&gt; so that it is newer
than &lt;code&gt;isles.tsv&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;touch books/isles.txt
snakemake isles.tsv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The original behavior is restored.&lt;/p&gt;
&lt;p&gt;Sometimes you only want &lt;em&gt;Snakemake&lt;/em&gt; to tell you what it thinks about the
current state of your files.
&lt;code&gt;snakemake --dryrun isles.tsv&lt;/code&gt; will print &lt;em&gt;Snakemake&lt;/em&gt;'s execution plan,
without actually carrying it out.
The flag can also be abbreviated as &lt;code&gt;-n&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you don't pass a target as an argument to snakemake (i.e. run
&lt;code&gt;snakemake&lt;/code&gt;) it will assume that you want to build the first target in the
snakefile.&lt;/p&gt;
&lt;h2&gt;Expanding our Snakefile with more recipes (and challenge) [20 minutes]&lt;/h2&gt;
&lt;p&gt;Now that &lt;em&gt;Make&lt;/em&gt; knows how to build &lt;code&gt;isles.tsv&lt;/code&gt;,
we can add a rule for plotting those results.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rule plotcount_isles:
    input: &amp;quot;isles.tsv&amp;quot;
    output: &amp;quot;isles.png&amp;quot;
    shell: &amp;quot;scripts/plotcount.py isles.tsv isles.png&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The dependency graph now looks like:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;books/isles.txt&lt;/code&gt; &amp;#8594; &lt;code&gt;isles.tsv&lt;/code&gt; &amp;#8594; &lt;code&gt;isles.png&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let's add a few more recipes to our Snakefile.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rule wordcount_abyss:
    input: &amp;quot;books/abyss.txt&amp;quot;
    output: &amp;quot;abyss.tsv&amp;quot;
    shell: &amp;quot;scripts/wordcount.py books/abyss.txt abyss.tsv&amp;quot;

rule archive_results:
    input: &amp;quot;isles.tsv&amp;quot;, &amp;quot;abyss.tsv&amp;quot;, &amp;quot;isles.png&amp;quot;, &amp;quot;abyss.png&amp;quot;
    output: &amp;quot;zipf_results.tgz&amp;quot;
    shell:
        &amp;quot;&amp;quot;&amp;quot;
        rm -rf zipf_results/
        mkdir zipf_results/
        cp isles.tsv abyss.tsv isles.png abyss.png zipf_results/
        tar -czf zipf_results.tgz zipf_results/
        rm -r zipf_results/
        &amp;quot;&amp;quot;&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here the recipe for &lt;code&gt;zipf_results.tgz&lt;/code&gt; takes multiple input files,
each of which must be quoted and separated by commas, and involves
involves running a series of shell commands.
When building the archive, &lt;em&gt;Snakemake&lt;/em&gt; will run each line successively unless
any return an error.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4&gt;Question&lt;/h4&gt;
&lt;p&gt;Without doing it, what happens if you run &lt;code&gt;snakemake isles.png&lt;/code&gt;?&lt;/p&gt;
&lt;h4&gt;Challenge&lt;/h4&gt;
&lt;p&gt;What does the dependency graph look like for your Snakefile?&lt;/p&gt;
&lt;h4&gt;Try it&lt;/h4&gt;
&lt;p&gt;What happens if you run &lt;code&gt;snakemake zipf_results.tgz&lt;/code&gt; right now?&lt;/p&gt;
&lt;h4&gt;Practice&lt;/h4&gt;
&lt;p&gt;Write a recipe for &lt;code&gt;abyss.png&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Once you've written a recipe for &lt;code&gt;abyss.png&lt;/code&gt; you should be able to
run &lt;code&gt;snakemake zipf_results.tgz&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let's delete all of our files and try it out.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rm abyss.* isles.*
snakemake zipf_results.tgz
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should get the something like the following output
(the order may be different)
to your terminal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Provided cores: 1
Rules claiming more threads will be scaled down.
Job counts:
        count   jobs
        1       archive_results
        1       plotcount_abyss
        1       plotcount_isles
        1       wordcount_abyss
        1       wordcount_isles
        5

rule wordcount_abyss:
    input: books/abyss.txt
    output: abyss.tsv
    jobid: 1

Finished job 1.
1 of 5 steps (20%) done

rule wordcount_isles:
    input: books/abyss.txt
    output: abyss.tsv
    jobid: 2

Finished job 2.
2 of 5 steps (40%) done

rule plotcount_abyss:
    input: abyss.tsv
    output: abyss.png
    jobid: 4

Finished job 4.
3 of 5 steps (60%) done

rule plotcount_isles:
    input: isles.tsv
    output: isles.png
    jobid: 3

Finished job 3.
4 of 5 steps (80%) done

rule archive_results:
    input: isles.tsv, abyss.tsv, isles.png, abyss.png
    output: zipf_results.tgz
    jobid: 0

Finished job 0.
5 of 5 steps (100%) done
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since you asked for &lt;code&gt;zipf_results.tgz&lt;/code&gt; &lt;em&gt;Snakemake&lt;/em&gt; looked first for that file.
Not finding it, &lt;em&gt;Snakemake&lt;/em&gt; looked for its prerequisites.
Since none of those existed it remade the ones it could,
&lt;code&gt;abyss.tsv&lt;/code&gt; and &lt;code&gt;isles.tsv&lt;/code&gt;.
Once those were finished it was able to make &lt;code&gt;abyss.png&lt;/code&gt; and
&lt;code&gt;isles.png&lt;/code&gt;, before finally building &lt;code&gt;zipf_results.tgz&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4&gt;Try it&lt;/h4&gt;
&lt;p&gt;What happens if you &lt;code&gt;touch abyss.tsv&lt;/code&gt; and
then &lt;code&gt;snakemake zipf_results.tgz&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Running Snakemake in parallel&lt;/h2&gt;
&lt;p&gt;And check this out!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;snakemake clean
snakemake --threads &lt;span class="m"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Did you see it?
The &lt;code&gt;--threads 2&lt;/code&gt; flag (just "&lt;code&gt;-j2&lt;/code&gt;" works too) tells &lt;em&gt;Make&lt;/em&gt; to run recipes in
two &lt;em&gt;parallel&lt;/em&gt; threads.
Our dependency graph clearly shows that
&lt;code&gt;abyss.tsv&lt;/code&gt; and &lt;code&gt;isles.tsv&lt;/code&gt; are mutually independent and can
both be built at the same time.
Likewise for &lt;code&gt;abyss.png&lt;/code&gt; and &lt;code&gt;isles.png&lt;/code&gt;.
If you've got a bunch of independent branches in your analysis, this can
greatly speed up your build process.&lt;/p&gt;
&lt;h3&gt;Phony targets&lt;/h3&gt;
&lt;p&gt;Sometimes we want to build a bunch of different files simultaneously.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rule all:
    input: &amp;quot;isles.png&amp;quot;, &amp;quot;abyss.png&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Even though this rule doesn't have a recipe, it does have prerequisites.
Now, when you run &lt;code&gt;snakemake all&lt;/code&gt; &lt;em&gt;Snakemake&lt;/em&gt; will do what it needs to to bring
both of those targets up to date.&lt;/p&gt;
&lt;p&gt;It is traditional for "&lt;code&gt;all&lt;/code&gt;" to be the first recipe in a snakefile,
since the first recipe is what is built by default
when no other target is passed as an argument.&lt;/p&gt;
&lt;p&gt;Another traditional target is "&lt;code&gt;clean&lt;/code&gt;".
Add the following to your snakefile.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rule clean:
    shell: &amp;quot;rm --force *.tsv *.png zipf_results.tgz&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running &lt;code&gt;snakemake clean&lt;/code&gt; will now remove all of the cruft.&lt;/p&gt;
&lt;h2&gt;Diagramming the DAG [5 minutes]&lt;/h2&gt;
&lt;p&gt;(If you'd prefer not to bake this Snakefile from scratch, you can
get one we've been hiding in the oven the whole time:
&lt;code&gt;cp .extra/Snakefile.1 Snakefile&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;Right now, our snakefile looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Dummy targets
rule all:
    input: &amp;quot;isles.png&amp;quot;, &amp;quot;abyss.png&amp;quot;

rule clean:
    shell: &amp;quot;rm --force *.tsv *.png zipf_results.tgz&amp;quot;

# Analysis
rule wordcount_isles:
    input: &amp;quot;books/isles.txt&amp;quot;
    output: &amp;quot;isles.tsv&amp;quot;
    shell: &amp;quot;scripts/wordcount.py books/isles.txt isles.tsv&amp;quot;

rule wordcount_abyss:
    input: &amp;quot;books/abyss.txt&amp;quot;
    output: &amp;quot;abyss.tsv&amp;quot;
    shell: &amp;quot;scripts/wordcount.py books/abyss.txt abyss.tsv&amp;quot;

# Plotting
rule plotcount_isles:
    input: &amp;quot;isles.tsv&amp;quot;
    output: &amp;quot;isles.png&amp;quot;
    shell: &amp;quot;scripts/plotcount.py isles.tsv isles.png&amp;quot;

rule plotcount_abyss:
    input: &amp;quot;abyss.tsv&amp;quot;
    output: &amp;quot;abyss.png&amp;quot;
    shell: &amp;quot;scripts/plotcount.py abyss.tsv abyss.png&amp;quot;

# Deliverables
rule archive_results:
    input: &amp;quot;isles.tsv&amp;quot;, &amp;quot;abyss.tsv&amp;quot;, &amp;quot;isles.png&amp;quot;, &amp;quot;abyss.png&amp;quot;
    output: &amp;quot;zipf_results.tgz&amp;quot;
    shell:
        &amp;quot;&amp;quot;&amp;quot;
        rm -rf zipf_results/
        mkdir zipf_results/
        cp isles.tsv abyss.tsv isles.png abyss.png zipf_results/
        tar -czf zipf_results.tgz zipf_results/
        rm -r zipf_results/
        &amp;quot;&amp;quot;&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Looks good, don't you think?
Notice the added comments, starting with the "&lt;code&gt;#&lt;/code&gt;" character just like in
Python, R, shell, etc.&lt;/p&gt;
&lt;p&gt;Using these recipes, a simple call to &lt;code&gt;snakemake&lt;/code&gt; builds all the same files
that we were originally making either manually or using the master script, but
with a few bonus features.&lt;/p&gt;
&lt;p&gt;Now, if we change one of the inputs, we don't have to rebuild everything.
Instead, &lt;em&gt;Snakemake&lt;/em&gt; knows to only rebuild the files that, either directly or
indirectly, depend on the file that changed.
This is called an &lt;strong&gt;incremental build&lt;/strong&gt;.
It's no longer our job to track those dependencies.
One fewer cognitive burden getting in the way of research progress!&lt;/p&gt;
&lt;p&gt;In addition, a snakefile explicitly documents the inputs to and outputs
from every step in the analysis.
These are like informal "USAGE:" documentation for our scripts.&lt;/p&gt;
&lt;p&gt;It is worth pointing out that our pipeline (and every pipeline) &lt;em&gt;must&lt;/em&gt; be
acyclic: no file can be an input to itself or to any of its inputs, &lt;em&gt;ad
infinitum&lt;/em&gt;.
Officially we talk about the relationships between files as a Directed Acyclic
Graph (DAG).
While earlier we took the time to diagram our DAG by hand, &lt;em&gt;Snakemake&lt;/em&gt;
has tools for plotting this network automatically.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;snakemake --dag zipf_results.tgz &lt;span class="p"&gt;|&lt;/span&gt; dot -Tpng &amp;gt; dag.png
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Open that file and check it out.&lt;/p&gt;
&lt;p&gt;&lt;img alt="A visualization of the analysis DAG" src="//bsmith89.github.com/blog/static/images/snakemake-dag.png"&gt;&lt;/p&gt;
&lt;p&gt;Diagrams like this one can be a very useful way to debug problems with an
analysis pipeline.&lt;/p&gt;
&lt;h2&gt;Don't repeat yourself&lt;/h2&gt;
&lt;p&gt;In many programming language, the bulk of the language features are there
to allow the programmer to describe long-winded computational routines as
short, expressive, beautiful code.
Features in Python or R like user-defined variables and functions are
useful in part because they mean we don't have to write out (or think about)
all of the details over and over again.
This good habit of writing things out only once is known as the D.R.Y.
principle.&lt;/p&gt;
&lt;p&gt;In &lt;em&gt;Snakemake&lt;/em&gt; a number of features are designed to minimize repetitive code.
Our current snakefile does &lt;em&gt;not&lt;/em&gt; conform to this principle,
but &lt;em&gt;Snakemake&lt;/em&gt; is perfectly capable of doing so.&lt;/p&gt;
&lt;h3&gt;Automatic variables [10 minutes]&lt;/h3&gt;
&lt;blockquote&gt;
&lt;h4&gt;Question&lt;/h4&gt;
&lt;p&gt;What are some of the repetitive components of our snakefile?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;One overly repetitive part of our Snakefile:
Inputs and outputs are in both the header &lt;em&gt;and&lt;/em&gt; the recipe of each rule.&lt;/p&gt;
&lt;p&gt;It turns out, that&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rule wordcount_isles:
    input: &amp;quot;books/isles.txt&amp;quot;
    output: &amp;quot;isles.tsv&amp;quot;
    shell: &amp;quot;scripts/wordcount.py books/isles.txt isles.tsv&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Can be rewritten as&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rule wordcount_isles:
    input: &amp;quot;books/isles.txt&amp;quot;
    output: &amp;quot;isles.tsv&amp;quot;
    shell: &amp;quot;scripts/wordcount.py {input} {output}&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we've replaced the input "&lt;code&gt;books/isles.txt&lt;/code&gt;" in the recipe
with "&lt;code&gt;{input}&lt;/code&gt;" and the output "&lt;code&gt;isles.dat&lt;/code&gt;" with "&lt;code&gt;{output}&lt;/code&gt;".
Both "&lt;code&gt;{input}&lt;/code&gt;" and "&lt;code&gt;{output}&lt;/code&gt;" are placeholders that refer to all of the
prerequisites and target of a rule, respectively.
In &lt;em&gt;Snakemake&lt;/em&gt;, placeholders are all wrapped in opening and closing brackets,
and are replaced with the value of that variable at runtime.
If you are familiar with modern Python format strings, that's where the syntax
comes from.&lt;/p&gt;
&lt;p&gt;Likewise&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rule archive_results:
    input: &amp;quot;isles.tsv&amp;quot;, &amp;quot;abyss.tsv&amp;quot;, &amp;quot;isles.png&amp;quot;, &amp;quot;abyss.png&amp;quot;
    output: &amp;quot;zipf_results.tgz&amp;quot;
    shell:
        &amp;quot;&amp;quot;&amp;quot;
        rm -rf zipf_results/
        mkdir zipf_results/
        cp isles.tsv abyss.tsv isles.png abyss.png zipf_results/
        tar -czf zipf_results.tgz zipf_results/
        rm -r zipf_results/
        &amp;quot;&amp;quot;&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;can now be rewritten as&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rule archive_results:
    input: &amp;quot;isles.tsv&amp;quot;, &amp;quot;abyss.tsv&amp;quot;, &amp;quot;isles.png&amp;quot;, &amp;quot;abyss.png&amp;quot;
    output: &amp;quot;zipf_results.tgz&amp;quot;
    shell:
        &amp;quot;&amp;quot;&amp;quot;
        rm -rf zipf_results/
        mkdir zipf_results/
        cp {input} zipf_results/
        tar -czf {output} zipf_results/
        rm -r zipf_results/
        &amp;quot;&amp;quot;&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's a little less cluttered,
and still perfectly understandable once you know what the variables mean.
The best part, is that if I want to change the input files, I only need to
edit my snakefile in one place.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4&gt;Try it&lt;/h4&gt;
&lt;p&gt;```bash
snakemake clean
snakemake isles.tsv
``````````
&lt;!--Those extra backticks are because of Vim syntax highlighting.--&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You should get the same output as last time.
Internally, &lt;em&gt;Snakemake&lt;/em&gt; replaced "&lt;code&gt;{output}&lt;/code&gt;" with "&lt;code&gt;isles.tsv&lt;/code&gt;"
and "&lt;code&gt;{input}&lt;/code&gt;" with "&lt;code&gt;books/isles.txt&lt;/code&gt;"
before running the recipe.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4&gt;Practice&lt;/h4&gt;
&lt;p&gt;Go ahead and rewrite all of the rules in Snakefile to minimize
repetition and take advantage of the "&lt;code&gt;{input}&lt;/code&gt;" and "&lt;code&gt;{output}&lt;/code&gt;"
placeholders.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Wildcard Filenames [10 minutes]&lt;/h3&gt;
&lt;p&gt;Another deviation from D.R.Y.:
We have nearly identical recipes for &lt;code&gt;abyss.tsv&lt;/code&gt; and &lt;code&gt;isles.tsv&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It turns out we can replace &lt;em&gt;both&lt;/em&gt; of those rules with a single rule,
by telling &lt;em&gt;Snakemake&lt;/em&gt; about the relationships between filenames with
&lt;em&gt;wildcards&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Using wildcards looks like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rule wordcount:
    input: &amp;quot;books/{name}.txt&amp;quot;
    output: &amp;quot;{name}.tsv&amp;quot;
    shell: &amp;quot;scripts/wordcount.py {input} {output}&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we've replaced the book name with "&lt;code&gt;{name}&lt;/code&gt;".
The "&lt;code&gt;{name}&lt;/code&gt;" matches any part of the input filename between "&lt;code&gt;books/&lt;/code&gt;"
and "&lt;code&gt;.txt&lt;/code&gt;", and must be the same as "&lt;code&gt;{name}&lt;/code&gt;" in the output filename.
You don't have to use "name" as your wildcard name, and you should be
descriptive.&lt;/p&gt;
&lt;p&gt;This rule can be interpreted as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In order to build a file named &lt;code&gt;[something].tsv&lt;/code&gt; (the target)
find a file named &lt;code&gt;books/[that same something].txt&lt;/code&gt; (the prerequisite)
and run &lt;code&gt;scripts/wordcount.py [the prerequisite] [the target]&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Notice how helpful the automatic input/output variables were here.
This recipe will work no matter what stem is being matched!&lt;/p&gt;
&lt;p&gt;Go ahead and make this change in your snakefile.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4&gt;Try it&lt;/h4&gt;
&lt;p&gt;After you've replaced the two rules with one
rule using wildcards, try removing all of the products (&lt;code&gt;snakemake clean&lt;/code&gt;)
and rerunning the pipeline.&lt;/p&gt;
&lt;p&gt;Is anything different now that you're using the new, universal rule?&lt;/p&gt;
&lt;h4&gt;Practice&lt;/h4&gt;
&lt;p&gt;Replace the rules for &lt;code&gt;abyss.png&lt;/code&gt; and &lt;code&gt;isles.png&lt;/code&gt;
with a single rule.&lt;/p&gt;
&lt;h4&gt;Challenge&lt;/h4&gt;
&lt;p&gt;Add &lt;code&gt;books/sierra.txt&lt;/code&gt; to your pipeline.&lt;/p&gt;
&lt;p&gt;(i.e. &lt;code&gt;snakemake all&lt;/code&gt; should plot the word counts and add the plots to
&lt;code&gt;zipf_results.tgz&lt;/code&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(If you'd prefer a pre-cooked snakefile: &lt;code&gt;cp .extra/Snakefile.2 Snakefile&lt;/code&gt;)&lt;/p&gt;
&lt;h2&gt;Scripts as prerequisites [10 minutes]&lt;/h2&gt;
&lt;p&gt;We've talked a lot about the power of &lt;em&gt;Snakemake&lt;/em&gt; for
rebuilding research outputs when input data changes.
When doing novel data analysis, however, it's very common for our &lt;em&gt;scripts&lt;/em&gt; to
be as or &lt;em&gt;more&lt;/em&gt; dynamic than the data.&lt;/p&gt;
&lt;p&gt;What happens when we edit our scripts instead of changing our data?&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4&gt;Try it&lt;/h4&gt;
&lt;p&gt;First, run &lt;code&gt;snakemake all&lt;/code&gt; so your analysis is up-to-date.&lt;/p&gt;
&lt;p&gt;Let's change the default number of entries in the rank/frequency
plot from 10 to 5.&lt;/p&gt;
&lt;p&gt;(Hint: edit the function definition for &lt;code&gt;plot_word_counts&lt;/code&gt; in
&lt;code&gt;plotcount.py&lt;/code&gt; to read &lt;code&gt;limit=5&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;Now run &lt;code&gt;snakemake all&lt;/code&gt; again.  What happened?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As it stands, we have to run &lt;code&gt;snakemake clean&lt;/code&gt; followed by &lt;code&gt;snakemake all&lt;/code&gt;
to update our analysis with the new script.
We're missing out on the benefits of incremental analysis when our scripts
are changing too.&lt;/p&gt;
&lt;p&gt;There must be a better way...and there is.
Scripts should be considered inputs too!&lt;/p&gt;
&lt;p&gt;Let's edit the rule for &lt;code&gt;{name}.png&lt;/code&gt; to include &lt;code&gt;plotcount.py&lt;/code&gt;
as an input.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rule plotcount:
    input:
        script=&amp;quot;scripts/plotcount.py&amp;quot;,
        data=&amp;quot;{name}.tsv&amp;quot;
    output: &amp;quot;{name}.png&amp;quot;
    shell: &amp;quot;{input.script} {input.data} {output}&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we've assigned names to our two inputs.&lt;/p&gt;
&lt;p&gt;This recipe works because "&lt;code&gt;{input.script}&lt;/code&gt;" is replaced with
"&lt;code&gt;scripts/plotcount.py&lt;/code&gt;"
and "&lt;code&gt;{input.data}&lt;/code&gt;" with the appropriate expansion of "&lt;code&gt;{name}.tsv&lt;/code&gt;".
When building &lt;code&gt;abyss.png&lt;/code&gt;, for instance,
"&lt;code&gt;{input.script} {input.data} {output}&lt;/code&gt;" becomes
"&lt;code&gt;scripts/plotcount.py abyss.tsv abyss.png&lt;/code&gt;", which is exactly what we want.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4&gt;Try it&lt;/h4&gt;
&lt;p&gt;What happens when you run the pipeline after modifying your script again?&lt;/p&gt;
&lt;p&gt;(Changes to your script can be simulated with &lt;code&gt;touch plotcount.py&lt;/code&gt;.)&lt;/p&gt;
&lt;h4&gt;Practice&lt;/h4&gt;
&lt;p&gt;Update your other rules to include the relevant scripts as inputs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(Final snakefile: &lt;code&gt;cp .extra/Snakefile.3 Snakefile&lt;/code&gt;)&lt;/p&gt;
&lt;h1&gt;Conclusion [1 minutes]&lt;/h1&gt;
&lt;p&gt;I hope that I've convinced you of the value of &lt;em&gt;Snakemake&lt;/em&gt; for data analysis.
What I have shown you today barely scratches the surface of the software's
functionality;
I encourage you to check out the &lt;a href="https://snakemake.readthedocs.io"&gt;website&lt;/a&gt;.
In my experience, though, the topics we've gone over today already provide
90% of the benefits:
we can forget about script names
and intermediate steps and focus instead on the output files that we want.
This &lt;a href="https://en.wikipedia.org/wiki/Declarative_programming"&gt;'declarative'&lt;/a&gt; approach to pipelines
pipelines has transformed the way I do data analysis.
I think it can do the same for you.&lt;/p&gt;</content><category term="teaching"></category><category term="programming"></category><category term="python"></category><category term="pipelines"></category><category term="bioinformatics"></category><category term="software"></category></entry><entry><title>Teaching Python by the (Note)Book</title><link href="//bsmith89.github.com/blog/python-lesson-balance.html" rel="alternate"></link><published>2017-01-01T18:30:00-05:00</published><updated>2017-01-01T18:30:00-05:00</updated><author><name>Byron J. Smith</name></author><id>tag:bsmith89.github.com,2017-01-01:/blog/python-lesson-balance.html</id><summary type="html">&lt;p&gt;&lt;em&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt; I tried out a &lt;a href="https://gist.github.com/bsmith89/5eeb9e7da35bd6b8bf28ae884f6478ff"&gt;modified Python lesson&lt;/a&gt;
and I think it was successful at balancing learner motivation with teaching
foundational (and sometimes boring) concepts.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In many ways, &lt;a href="https://software-carpentry.org"&gt;teaching Python to scientists&lt;/a&gt;
is easier than just about every other audience.
The learning objective is clear: write code to make my science more accurate,
more efficient, and more impactful.
The motivation is apparent: data is increasingly plentiful and increasingly
complex.
The learners are both engaged and prepared to put in the effort
required to develop new skills.&lt;/p&gt;
&lt;p&gt;But, despite all of the advantages, teaching &lt;em&gt;anybody&lt;/em&gt; to program is hard.&lt;/p&gt;
&lt;p&gt;In my experience, one of the most challenging trade-offs for lesson planners
is between motivating the material and teaching a mental model
for code execution.
For example, scientists are easily motivated by simple data munging and
plotting using &lt;code&gt;pandas&lt;/code&gt; and &lt;code&gt;matplotlib&lt;/code&gt;;
these are features of the Python ecosystem that can convince …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt; I tried out a &lt;a href="https://gist.github.com/bsmith89/5eeb9e7da35bd6b8bf28ae884f6478ff"&gt;modified Python lesson&lt;/a&gt;
and I think it was successful at balancing learner motivation with teaching
foundational (and sometimes boring) concepts.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In many ways, &lt;a href="https://software-carpentry.org"&gt;teaching Python to scientists&lt;/a&gt;
is easier than just about every other audience.
The learning objective is clear: write code to make my science more accurate,
more efficient, and more impactful.
The motivation is apparent: data is increasingly plentiful and increasingly
complex.
The learners are both engaged and prepared to put in the effort
required to develop new skills.&lt;/p&gt;
&lt;p&gt;But, despite all of the advantages, teaching &lt;em&gt;anybody&lt;/em&gt; to program is hard.&lt;/p&gt;
&lt;p&gt;In my experience, one of the most challenging trade-offs for lesson planners
is between motivating the material and teaching a mental model
for code execution.
For example, scientists are easily motivated by simple data munging and
plotting using &lt;code&gt;pandas&lt;/code&gt; and &lt;code&gt;matplotlib&lt;/code&gt;;
these are features of the Python ecosystem that can convince a graduate
student to pay attention to the material instead of answering emails.
Actually &lt;em&gt;using&lt;/em&gt; these features, however, requires a long list of basic
concepts: Python syntax, libraries, function calls, objects and methods,
conditionals, and variable assignment, to name just a few.&lt;/p&gt;
&lt;p&gt;A lesson planner can start from the basics, working in to these features
along the branches of the dependency tree, but that could require hours
(or even days) of "boring programming".
It's all too easy to dismiss learners who lose interest before you get
to the good stuff, but it is more a reflection of the materials and
instructor, than the students.&lt;/p&gt;
&lt;p&gt;At the other extreme, a lesson could start with working code,
or, in the Software Carpentry style the instructor could lead learners
through writing code that uses these features, before the concepts have
been fully introduced.
This in-at-the-deep-end approach quickly demonstrates exciting uses of Python,
but at the risk of intimidating learners, making them wonder if they're the
only one in the room who's confused by what's going on under the hood and what
all of the syntax means.
I'm not aware of any studies on this topic (if you are, please pass them my
way), but I'm willing to speculate that this second approach has
a higher risk of subjecting learners from underrepresented groups to stereotype
threat, a major risk when teaching a subject with a pervasive diversity
problem.&lt;/p&gt;
&lt;p&gt;Luckily for us all, there's a whole spectrum of approaches in between the
motivations-first and foundations-first extremes.
We can trust learners to self-motivate for a time, especially when we're
teaching scientists.
Attendees are there voluntarily (I would hope).
Likewise, learners will never have a perfect understanding of how their code is
working, regardless of how long you spend teaching the basics.
The key is to avoid unintentionally teaching pathological mental models that
are difficult for the instructor to diagnose and iterate beyond.&lt;/p&gt;
&lt;h1&gt;State of the Python lesson&lt;/h1&gt;
&lt;p&gt;As of this writing, the current default Python lesson for Software Carpentry is
&lt;a href="http://swcarpentry.github.io/python-novice-inflammation/"&gt;"Novice Inflammation"&lt;/a&gt;&lt;sup id="fnref-inflammation-commit"&gt;&lt;a class="footnote-ref" href="#fn-inflammation-commit"&gt;1&lt;/a&gt;&lt;/sup&gt;.
I have &lt;a href="//bsmith89.github.com/blog/swc-python-lesson.html"&gt;written previously&lt;/a&gt; about my experience
with the lesson, and have not been shy with my criticism.
There is a &lt;em&gt;lot&lt;/em&gt; to be positive about in the composition of Inflammation.
It has been an effective approach to teaching Python to what at this point
must be several thousand workshop attendees.&lt;/p&gt;
&lt;p&gt;However, this post is about how we can do better.
My primary criticism focuses on the first section:
&lt;a href="http://swcarpentry.github.io/python-novice-inflammation/01-numpy/"&gt;"Analyzing Patient Data"&lt;/a&gt;.
The approach here falls towards the motivation-first extreme.
Learners are shown how one might go from raw data in a CSV to heatmaps
and line plots, two useful skills.&lt;/p&gt;
&lt;p&gt;The downside, however, is that this happens without fully explaining the
syntax, what libraries are, &lt;code&gt;numpy&lt;/code&gt; arrays versus Python lists, &lt;code&gt;dtypes&lt;/code&gt; vs
built-in Python types, and more.
I think that by using this particular motivating example while glossing over
those details we're giving learners a challenging mental model to iterate
beyond.
What's more, I believe that this results in a &lt;em&gt;diversity&lt;/em&gt; of models
making later instruction more likely to leave some learners behind.
Novice Inflammation also gets stuck in the weeds over difficult concepts which,
in my opinion, aren't nearly as important for learners, for example,
accumulating over particular axes in &lt;code&gt;numpy&lt;/code&gt; arrays.&lt;/p&gt;
&lt;p&gt;For this and other reasons Greg Wilson spearheaded an attempt to
reinvent the Python lesson.
The &lt;a href="http://swcarpentry.github.io/python-novice-gapminder/"&gt;"Novice Gapminder" lesson&lt;/a&gt;&lt;sup id="fnref-gapminder-commit"&gt;&lt;a class="footnote-ref" href="#fn-gapminder-commit"&gt;2&lt;/a&gt;&lt;/sup&gt;
is a from-scratch re-write.
It's worth noting that SWC's normal pull-request model for lesson development
is unable to accommodate a major overhaul like this one.&lt;/p&gt;
&lt;p&gt;Gapminder is different in several ways, for instance using &lt;code&gt;pandas&lt;/code&gt; as a focal
library instead of &lt;code&gt;numpy&lt;/code&gt;.
Notably for this commentary, though, it also takes a much more gradual approach
to motivating the material.
&lt;code&gt;pandas&lt;/code&gt; and &lt;code&gt;matplotlib&lt;/code&gt; are not introduced until the end of the first
half-day,
and only &lt;em&gt;after&lt;/em&gt; a thorough discussion of variable assignment, functions, and
data types.
The Gapminder lesson also appears to lack the distractions and rabbit holes
that I've criticized in Inflammation.&lt;/p&gt;
&lt;p&gt;Overall, I think Gapminder hits a superior balance between motivation
and basics, while also improve the structure and refining the details.
I have to applaud everyone who's contributed to its development.
I've now taught from the new lesson once, and co-instructed a workshop that
used the first half.
The improvements in the design were apparent both times.
I expect it to be well received by the SWC community when it becomes the
default.&lt;/p&gt;
&lt;h1&gt;Continual improvement&lt;/h1&gt;
&lt;p&gt;That's not to say, however, that it cannot be improved.
The same motivation-vs-foundations question has already come up in
&lt;a href="https://github.com/swcarpentry/python-novice-gapminder/issues/113"&gt;a discussion on GitHub&lt;/a&gt;.
A proposal was made to delay the use of &lt;code&gt;pandas&lt;/code&gt; and &lt;code&gt;matplotlib&lt;/code&gt; until the
second half, further front-loading the basics.
My personal opinion, having taught the lesson is that
this is unnecessary.
With the Gapminder lesson, by the time we got to these more advanced topics at
the end of the first half-day, learners appeared to be ready for the material,
comfortably updating their mental models in an appropriate way.
And, thankfully, I also didn't notice a loss of engagement due to the delayed
pay-off.&lt;/p&gt;
&lt;p&gt;Like many trade-offs in lesson design, the optimal position on the
motivations/foundations spectrum is context dependent.
I would focus on cool application instead of basic concepts
for the first session if I were
teaching high school students or any learners skeptical about the utility of
the material.
A room full of scientists who were there specifically to learn Python, however,
could probably tolerate even more front-loading of syntax and control-flow.
A framework to help instructors customize the materials for their audience
would be a very useful addition.&lt;/p&gt;
&lt;p&gt;The main purpose of this post is to nominate a slightly different approach
which introduces an advanced example early in the lesson without the
risk (I believe) of intimidating learners.&lt;/p&gt;
&lt;p&gt;In December 2016 I co-instructed a (not officially SWC)
&lt;a href="https://umswc.github.io/2016-12-14-umich/"&gt;workshop&lt;/a&gt; which taught Python over two half-day sessions to
about 20 learners, primarily graduate students in the biological sciences.&lt;/p&gt;
&lt;p&gt;My co-instructor, Jackie Cohen (&lt;a href="https://twitter.com/jczetta"&gt;\@jczetta&lt;/a&gt;),
taught the first half-day using the Gapminder lesson.
The positive reception from learners to the first half of the material was
testament not only to her skillful instruction, but also the quality of the
design.&lt;/p&gt;
&lt;p&gt;I then taught the second day with the
same gapminder dataset and covering the same
topics as the normal materials, but using &lt;a href="https://gist.github.com/bsmith89/5eeb9e7da35bd6b8bf28ae884f6478ff"&gt;a custom lesson plan&lt;/a&gt;.
Inspired by &lt;a href="https://github.com/swcarpentry/python-novice-gapminder/issues/113#issuecomment-256230540"&gt;a comment&lt;/a&gt; on the Gapminder GitHub repository,
I constructed a "realistic" analysis of the gapminder data
as a Jupyter notebook.
In particular, the notebook includes code to generate a fairly involved
figure telling a story about the relationship between per-capita GDP and
life-expectancy.&lt;/p&gt;
&lt;p&gt;&lt;img alt="An example visualization of the gapminder data." src="//bsmith89.github.com/blog/static/images/gapminder-analysis.png"&gt;&lt;/p&gt;
&lt;p&gt;I started the second day by having learners download and run this notebook,
demonstrating the quality of analyses they could produce with fewer than 100
lines of code.
By &lt;em&gt;not&lt;/em&gt; live-coding, and &lt;em&gt;not&lt;/em&gt; expecting the learners to type along during the
introduction, I believe this approach minimizes the likelihood of intimidating
the learners with syntax.
To that end, I also did not walk through the code itself, but instead focused
on describing the overarching flow of the analysis:
loading external data, selecting a subset, plotting two columns as a
scatter-plot with a third column determining the size of the points, running a
linear regression, and plotting a best-fit line.
The purpose of this introduction was purely to motivate the material, not
to introduce the concepts.&lt;/p&gt;
&lt;p&gt;I then had them open a new, empty notebook, and the remainder of the lesson
(which &lt;em&gt;was&lt;/em&gt; done in the traditional live-coding style)
then revolved around reconstructing the same analysis from scratch,
a thematic unification, that I found to be elegant.
Since the pre-constructed analysis made use of for-loops, if-statements,
and functions, I was able to limit my use of foo/bar style examples and
quickly return to the core analysis demonstrating the use of these elements
in a realistic setting.
Our workshop was advertised as an introduction to Jupyter notebooks, data
manipulation, and plotting, (as well as novice Python) so a significant
fraction of the time was spent on these topics and libraries instead of more
foundational concepts.&lt;/p&gt;
&lt;h1&gt;Where to go from here?&lt;/h1&gt;
&lt;p&gt;I found this approach to be quite successful.
In-person and exit survey feedback has been uniformly positive and
learners appeared to have achieved most or all of the learning objectives
of the core Gapminder lesson.
While the "realistic analysis" approach sounds more like the
&lt;a href="http://www.datacarpentry.org/"&gt;Data Carpentry&lt;/a&gt;
style, in this particular case it was a great fit for the Software Carpentry
learning objectives.&lt;/p&gt;
&lt;p&gt;I believe that this model could be implemented in the core Gapminder lesson,
perhaps starting in the second half (as we did), or with a different
example notebook for each half-day.
That would, however, entail modifying most or all of the sections to
focus on the new unified example.
Is it worth expending the tens of hours required to implement it?
Even if it were implemented, I'm not convinced that the SWC lesson development
model makes this kind of large-scale refactoring feasible.&lt;/p&gt;
&lt;p&gt;As an alternative to submitting a pull request,
I'm hoping that I can convince a few instructors to try it out for themselves.
Positive experiences with an unofficial fork makes patching the main branch a
more rational investment.
I've already been &lt;a href="http://lists.software-carpentry.org/pipermail/discuss/2016-May/004529.html"&gt;evangelizing&lt;/a&gt; in a similar way for an
&lt;a href="https://github.com/bsmith89/git-novice-outline"&gt;alternative Git lesson&lt;/a&gt;,
sharing my immature outline and encouraging folks to try it out
themselves.
Is there a better approach to making medium to large changes to the design of
a SWC lesson?&lt;/p&gt;
&lt;p&gt;In conclusion: I think we need additional discussion (and data) about the
motivations/foundations trade-off in our lessons.
I'd also like to hear your thoughts on the best way to lobby for and introduce
moderately sized changes to the core materials.
What do you think about my approach?
If you're feeling brave, please try it out and let me know how it goes!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-inflammation-commit"&gt;
&lt;p&gt;HEAD at
&lt;a href="https://github.com/swcarpentry/python-novice-inflammation/tree/030f3fbd3006cea06e42bbd14a62ddb33098b9f6"&gt;030f3fbd30&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-inflammation-commit" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-gapminder-commit"&gt;
&lt;p&gt;HEAD at &lt;a href="https://github.com/swcarpentry/python-novice-gapminder/tree/e303e6a9d309bdcbcfb370c8125b7792d4096968"&gt;e303e6a9d3&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-gapminder-commit" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="software-carpentry"></category><category term="teaching"></category><category term="programming"></category><category term="python"></category><category term="jupyter"></category></entry><entry><title>Take five minutes to simplify your life with Make</title><link href="//bsmith89.github.com/blog/makefile-shortcuts.html" rel="alternate"></link><published>2016-06-14T12:00:00-04:00</published><updated>2017-11-21T09:30:00-05:00</updated><author><name>Byron J. Smith</name></author><id>tag:bsmith89.github.com,2016-06-14:/blog/makefile-shortcuts.html</id><summary type="html">&lt;p&gt;&lt;em&gt;WARNING: Because of the Markdown rendering of this blog, tab characters
have been replaced with 4 spaces in code blocks.
For this reason, &lt;strong&gt;the makefile code will not work&lt;/strong&gt; when copied directly from
the post.
Instead, you must first replace all 4-space indents with a tab character.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I use &lt;em&gt;GNU Make&lt;/em&gt; to automate my data processing pipelines.
I've written a &lt;a href="//bsmith89.github.com/blog/make-analysis.html"&gt;tutorial&lt;/a&gt; &lt;sup id="fnref-shorter-tutorials"&gt;&lt;a class="footnote-ref" href="#fn-shorter-tutorials"&gt;1&lt;/a&gt;&lt;/sup&gt; for novices on the
basics of using &lt;em&gt;Make&lt;/em&gt; for reproducible analysis and I think that everyone who
writes more than one script, or runs more than one shell command to process
their data can benefit from automating that process.
&lt;a href="http://kbroman.org/minimal_make/"&gt;I'm&lt;/a&gt; &lt;a href="https://bost.ocks.org/mike/make/"&gt;not&lt;/a&gt;
&lt;a href="http://zmjones.com/make/"&gt;alone&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, the investment required to learn &lt;em&gt;Make&lt;/em&gt; and to convert an
entire project can seem daunting to many time-strapped researchers.
Even if you aren't
living the dream—rebuilding
a paper from raw data with a single invocation of
&lt;code&gt;make paper&lt;/code&gt;—I still
think you can benefit …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;WARNING: Because of the Markdown rendering of this blog, tab characters
have been replaced with 4 spaces in code blocks.
For this reason, &lt;strong&gt;the makefile code will not work&lt;/strong&gt; when copied directly from
the post.
Instead, you must first replace all 4-space indents with a tab character.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I use &lt;em&gt;GNU Make&lt;/em&gt; to automate my data processing pipelines.
I've written a &lt;a href="//bsmith89.github.com/blog/make-analysis.html"&gt;tutorial&lt;/a&gt; &lt;sup id="fnref-shorter-tutorials"&gt;&lt;a class="footnote-ref" href="#fn-shorter-tutorials"&gt;1&lt;/a&gt;&lt;/sup&gt; for novices on the
basics of using &lt;em&gt;Make&lt;/em&gt; for reproducible analysis and I think that everyone who
writes more than one script, or runs more than one shell command to process
their data can benefit from automating that process.
&lt;a href="http://kbroman.org/minimal_make/"&gt;I'm&lt;/a&gt; &lt;a href="https://bost.ocks.org/mike/make/"&gt;not&lt;/a&gt;
&lt;a href="http://zmjones.com/make/"&gt;alone&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, the investment required to learn &lt;em&gt;Make&lt;/em&gt; and to convert an
entire project can seem daunting to many time-strapped researchers.
Even if you aren't
living the dream—rebuilding
a paper from raw data with a single invocation of
&lt;code&gt;make paper&lt;/code&gt;—I still
think you can benefit from adding a simple &lt;code&gt;Makefile&lt;/code&gt; to your project root.&lt;/p&gt;
&lt;p&gt;When done right, scripting the tedious parts of your job &lt;em&gt;can&lt;/em&gt;
save you time in the long run&lt;sup id="fnref-xkcd-refs"&gt;&lt;a class="footnote-ref" href="#fn-xkcd-refs"&gt;2&lt;/a&gt;&lt;/sup&gt;.
But the time savings aren't the only reason to do it.
For me, a bigger advantage is that I get to save my mental energy for
more interesting problems&lt;sup id="fnref-cook-ref"&gt;&lt;a class="footnote-ref" href="#fn-cook-ref"&gt;3&lt;/a&gt;&lt;/sup&gt;.
&lt;em&gt;Make&lt;/em&gt; goes a step further and lets me forget about everything but my
real objective.
With a &lt;code&gt;make [target]&lt;/code&gt; invocation I don't even need to remember the name of the
script.&lt;/p&gt;
&lt;h2&gt;The default makefile&lt;/h2&gt;
&lt;p&gt;TL;DR: All of the code in this post is available as a &lt;a href="https://gist.github.com/bsmith89/c6811893c1cbd2a72cc1d144a197bef2"&gt;gist&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here's what a minimal makefile might look like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;define PROJECT_HELP_MSG&lt;/span&gt;

&lt;span class="nf"&gt;Usage&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    make &lt;span class="nb"&gt;help&lt;/span&gt;                   show this message
    make clean                  remove intermediate files &lt;span class="o"&gt;(&lt;/span&gt;see CLEANUP&lt;span class="o"&gt;)&lt;/span&gt;

    make &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;VENV&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;                make a virtualenv in the base directory &lt;span class="o"&gt;(&lt;/span&gt;see VENV&lt;span class="o"&gt;)&lt;/span&gt;
    make python-reqs            install python packages in requirements.pip
    make git-config             &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;local&lt;/span&gt; git configuration
    make setup                  git init&lt;span class="p"&gt;;&lt;/span&gt; make python-reqs git-config

    make start-jupyter          launch a jupyter server from the &lt;span class="nb"&gt;local&lt;/span&gt; virtualenv

&lt;span class="cp"&gt;endef&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PROJECT_HELP_MSG&lt;/span&gt;

&lt;span class="nf"&gt;help&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$$&lt;/span&gt;PROJECT_HELP_MSG &lt;span class="p"&gt;|&lt;/span&gt; less

&lt;span class="nf"&gt;.git&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    git init

&lt;span class="nf"&gt;git-config&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; .&lt;span class="n"&gt;git&lt;/span&gt; 
    git config --local filter.dropoutput_jupyter.clean &lt;span class="se"&gt;\&lt;/span&gt;
        drop_jupyter_output.sh
    git config --local filter.dropoutput_jupyter.smudge cat
    git config --local core.page &lt;span class="s1"&gt;&amp;#39;less -x4&amp;#39;&lt;/span&gt;
    git config --local &lt;span class="se"&gt;\&lt;/span&gt;
        diff.daff-csv.command &lt;span class="s2"&gt;&amp;quot;daff.py diff --git&amp;quot;&lt;/span&gt;
    git config --local &lt;span class="se"&gt;\&lt;/span&gt;
        merge.daff-csv.name &lt;span class="s2"&gt;&amp;quot;daff.py tabular merge&amp;quot;&lt;/span&gt;
    git config --local &lt;span class="se"&gt;\&lt;/span&gt;
        merge.daff-csv.driver &lt;span class="s2"&gt;&amp;quot;daff.py merge --output %A %O %A %B&amp;quot;&lt;/span&gt;

&lt;span class="nv"&gt;VENV&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; .venv
&lt;span class="k"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;VIRTUAL_ENV&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;abspath &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;VENV&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;VIRTUAL_ENV&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/bin:&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;${VENV}&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    python3 -m venv &lt;span class="nv"&gt;$@&lt;/span&gt;

&lt;span class="nf"&gt;python-reqs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt;.&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; ${&lt;span class="n"&gt;VENV&lt;/span&gt;}
    pip install --upgrade -r requirements.pip

&lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; ${&lt;span class="n"&gt;VENV&lt;/span&gt;} &lt;span class="n"&gt;python&lt;/span&gt;-&lt;span class="n"&gt;reqs&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;-&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; .&lt;span class="n"&gt;git&lt;/span&gt;

&lt;span class="nf"&gt;start-jupyter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    jupyter notebook --config&lt;span class="o"&gt;=&lt;/span&gt;jupyter_notebook_config.py

&lt;span class="nv"&gt;CLEANUP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; *.pyc

&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    rm -rf &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CLEANUP&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;-&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;-&lt;span class="n"&gt;jupter&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;-&lt;span class="n"&gt;reqs&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt; &lt;span class="n"&gt;clean&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you want to start using it right away, download the &lt;a href="https://gist.github.com/bsmith89/c6811893c1cbd2a72cc1d144a197bef2"&gt;gist&lt;/a&gt;,
which includes a couple of other necessary files.
As long as you aren't saving it over another makefile, it won't mess anything
up.&lt;/p&gt;
&lt;p&gt;But let's break it down so you can see how it's made and why it's awesome.&lt;/p&gt;
&lt;p&gt;From the top!&lt;/p&gt;
&lt;h2&gt;A help message for your project&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;define PROJECT_HELP_MSG&lt;/span&gt;

&lt;span class="nf"&gt;Usage&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    make &lt;span class="nb"&gt;help&lt;/span&gt;                   show this message
    make clean                  remove intermediate files &lt;span class="o"&gt;(&lt;/span&gt;see CLEANUP&lt;span class="o"&gt;)&lt;/span&gt;

    make git-config             &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;local&lt;/span&gt; git configuration
    make &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;VENV&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;                make a virtualenv in the base directory &lt;span class="o"&gt;(&lt;/span&gt;see VENV&lt;span class="o"&gt;)&lt;/span&gt;
    make python-reqs            install python packages in requirements.pip
    make setup                  git init&lt;span class="p"&gt;;&lt;/span&gt; make python-reqs git-config

    make start-jupyter          launch a jupyter server from the &lt;span class="nb"&gt;local&lt;/span&gt; virtualenv

&lt;span class="cp"&gt;endef&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PROJECT_HELP_MSG&lt;/span&gt;

&lt;span class="nf"&gt;help&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$$&lt;/span&gt;PROJECT_HELP_MSG
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The top of our makefile is a help message.
Running the traditional invocation &lt;code&gt;make help&lt;/code&gt; will call that recipe and we'll
see an abridged list of the available recipes printed to our terminal.
Since &lt;code&gt;help&lt;/code&gt; is the very first recipe in the makefile, it will also be the
default recipe;
typing &lt;code&gt;make&lt;/code&gt; alone prints the help message.&lt;/p&gt;
&lt;p&gt;As you start adding additional recipes, fill out this usage message.
That way you'll have both documentation about the analysis targets, and also
a handy cheatsheet.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Edit (2016-06-15):&lt;/em&gt; &lt;a href="https://www.reddit.com/r/bioinformatics/comments/4o7aaa/a_simple_makefile_to_make_your_life_simple_xpost/d4aa8ir"&gt;On Reddit, /r/guepier&lt;/a&gt; suggests using a
nifty trick to auto-generate these help messages,
keeping documentation and recipes together in your makefile.&lt;/p&gt;
&lt;h2&gt;Streamline git setup&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;.git&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    git init
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Every project should be &lt;a href="https://dx.doi.org/10.1186/1751-0473-8-7"&gt;version controlled&lt;/a&gt;.
I prefer git, but the makefile can probably be adapted for Mercurial,
Subversion, darcs, etc.
This recipe is so simple as to appear useless (since &lt;code&gt;make .git&lt;/code&gt; is no easier
to type than &lt;code&gt;git init&lt;/code&gt;) but we use the directory &lt;code&gt;.git/&lt;/code&gt; as an
&lt;a href="https://www.gnu.org/software/make/manual/html_node/Prerequisite-Types.html"&gt;order-only prerequisite&lt;/a&gt;
for the next recipe:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;git-config&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; .&lt;span class="n"&gt;git&lt;/span&gt; 
    git config --local filter.dropoutput_jupyter.clean &lt;span class="se"&gt;\&lt;/span&gt;
        drop_jupyter_output.sh
    git config --local filter.dropoutput_jupyter.smudge cat
    git config --local core.page &lt;span class="s1"&gt;&amp;#39;less -x4&amp;#39;&lt;/span&gt;
    git config --local &lt;span class="se"&gt;\&lt;/span&gt;
        diff.daff-csv.command &lt;span class="s2"&gt;&amp;quot;daff.py diff --git&amp;quot;&lt;/span&gt;
    git config --local &lt;span class="se"&gt;\&lt;/span&gt;
        merge.daff-csv.name &lt;span class="s2"&gt;&amp;quot;daff.py tabular merge&amp;quot;&lt;/span&gt;
    git config --local &lt;span class="se"&gt;\&lt;/span&gt;
        merge.daff-csv.driver &lt;span class="s2"&gt;&amp;quot;daff.py merge --output %A %O %A %B&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Git configuration is &lt;em&gt;just&lt;/em&gt; annoying enough that I often put it off for a new
project.
With this recipe I don't have to!&lt;/p&gt;
&lt;p&gt;There are three parts to the configuration above;
customize it for how you use git.&lt;/p&gt;
&lt;h3&gt;Drop Jupyter Notebook output&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git config --local filter.dropoutput_jupyter.clean &lt;span class="se"&gt;\&lt;/span&gt;
    ./drop_jupyter_output.sh
git config --local filter.dropoutput_jupyter.smudge cat
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I set up a &lt;a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Attributes"&gt;clean/smudge filter&lt;/a&gt; for my Jupyter notebooks.
Outputs of analysis should generally not be version controlled,
and this includes those outputs that are inlined in a Jupyter notebook.
Now, when you &lt;code&gt;git add&lt;/code&gt; and &lt;code&gt;git diff&lt;/code&gt; notebooks, the output from cells will
be automatically ignored.
Thankfully, using this filter won't change the contents of the &lt;code&gt;.ipynb&lt;/code&gt; file
itself, just the contents of the diff.
This does mean, however, that when you &lt;code&gt;git checkout&lt;/code&gt; an old version of your
notebook you'll have to re-execute all of the cells to get the results.&lt;/p&gt;
&lt;p&gt;Two other files are needed for this configuration to have any effect.
First, &lt;code&gt;.gitattributes&lt;/code&gt; which is a tab-separated file mapping filename patterns
to special git configuration.
The first line in that file should be the following.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;*.ipynb filter=dropoutput_jupyter
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(That's a tab after &lt;code&gt;*.ipynb&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;The second file is the filter &lt;code&gt;drop_jupyter_output.sh&lt;/code&gt;,
which needs to be executable.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;span class="c1"&gt;# run `chmod +x drop_jupyter_output.sh` to make it executable.&lt;/span&gt;

&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;mktemp&lt;span class="k"&gt;)&lt;/span&gt;
cat &amp;lt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &amp;gt;&lt;span class="nv"&gt;$file&lt;/span&gt;
jupyter nbconvert --to notebook --ClearOutputPreprocessor.enabled&lt;span class="o"&gt;=&lt;/span&gt;True &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nv"&gt;$file&lt;/span&gt; --stdout &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;/dev/null
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Display tabs as four spaces&lt;/h3&gt;
&lt;p&gt;I also configure &lt;code&gt;less&lt;/code&gt; to show four spaces for tabs.
This makes &lt;code&gt;git diff&lt;/code&gt;-ing my makefile much easier on the eyes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git config --local core.page &lt;span class="s1"&gt;&amp;#39;less -x4&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Smart &lt;code&gt;diff&lt;/code&gt;s for tabular data&lt;/h3&gt;
&lt;p&gt;Since git considers changes on a per-line basis, looking at
&lt;code&gt;diff&lt;/code&gt;s of comma-delimited and tab-delimited files can get obnoxious.
The program &lt;a href="http://paulfitz.github.io/daff/"&gt;&lt;code&gt;daff&lt;/code&gt;&lt;/a&gt; fixes this problem.&lt;/p&gt;
&lt;p&gt;We'll configure git to use &lt;code&gt;daff&lt;/code&gt; for all tabular files.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git config --local &lt;span class="se"&gt;\&lt;/span&gt;
    diff.daff-csv.command &lt;span class="s2"&gt;&amp;quot;daff.py diff --git&amp;quot;&lt;/span&gt;
git config --local &lt;span class="se"&gt;\&lt;/span&gt;
    merge.daff-csv.name &lt;span class="s2"&gt;&amp;quot;daff.py tabular merge&amp;quot;&lt;/span&gt;
git config --local &lt;span class="se"&gt;\&lt;/span&gt;
    merge.daff-csv.driver &lt;span class="s2"&gt;&amp;quot;daff.py merge --output %A %O %A %B&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Just like the output filter for Jupyter notebooks, we need to associate
this configuration with CSVs and TSVs in our &lt;code&gt;.gitattributes&lt;/code&gt; file by adding
the following two lines.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;*.[tc]sv diff=daff-csv
*.[tc]sv merge=daff-csv
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Automatic python virtual environments&lt;/h2&gt;
&lt;p&gt;There are plenty of &lt;a href="https://www.davidfischer.name/2010/04/why-you-should-be-using-pip-and-virtualenv/"&gt;reasons&lt;/a&gt; to sandbox your python environments.
If you're like me and keep a separate virtual environment for every project,
you'll appreciate these recipes to automate creating them and updating
packages.&lt;/p&gt;
&lt;p&gt;If you don't use python/pip, these recipes can be swapped out for other
sandboxing systems.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;VENV&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; .venv
&lt;span class="k"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;VIRTUAL_ENV&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;abspath &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;VENV&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;VIRTUAL_ENV&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/bin:&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;${VENV}&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    python3 -m venv &lt;span class="nv"&gt;$@&lt;/span&gt;

&lt;span class="nf"&gt;python-reqs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt;.&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; ${&lt;span class="n"&gt;VENV&lt;/span&gt;}
    pip install --upgrade -r requirements.pip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the top block, we first set a variable &lt;code&gt;VENV&lt;/code&gt; to be the location of our
virtual environment.
We then set &lt;code&gt;VIRTUAL_ENV&lt;/code&gt; and prepend its &lt;code&gt;bin/&lt;/code&gt; to our &lt;code&gt;PATH&lt;/code&gt;.
By exporting these variables, all recipes run from this makefile will
use python packages and executables from the virtual environment.
We don't have to remember to &lt;code&gt;source .venv/bin/activate&lt;/code&gt; first!&lt;/p&gt;
&lt;p&gt;(&lt;em&gt;Edit (2016-06-22):&lt;/em&gt; Based on my own testing, it would appear that this
approach to virtual environments in recipes does not work with the default
&lt;em&gt;GNU Make&lt;/em&gt; version installed on OS X.
It will, however, work with &lt;a href="http://brew.sh/"&gt;Homebrew&lt;/a&gt;'s version which is
installed as &lt;code&gt;gmake&lt;/code&gt; instead of &lt;code&gt;make&lt;/code&gt;.
It is unclear to me why the behavior is different.)&lt;/p&gt;
&lt;p&gt;The next block is the recipe to initialize the virtual environment.
If you're not using Python 3 for your project you will have to edit this one.&lt;/p&gt;
&lt;p&gt;And finally, a recipe to install and update all of the packages listed in
&lt;code&gt;requirements.pip&lt;/code&gt;.
If you want to make a change to your python requirements, add it to
&lt;code&gt;requirements.pip&lt;/code&gt; and re-run &lt;code&gt;make python-reqs&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can bootstrap other software installations similarly.
And, if you discipline yourself to make all changes to your execution
environment in this way, you'll have a permanently up-to-date record of your
system requirements.&lt;/p&gt;
&lt;h2&gt;Single-command project setup&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; ${&lt;span class="n"&gt;VENV&lt;/span&gt;} &lt;span class="n"&gt;python&lt;/span&gt;-&lt;span class="n"&gt;reqs&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;-&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; .&lt;span class="n"&gt;git&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With this meta-target a simple &lt;code&gt;make setup&lt;/code&gt; will have our new project
configured and ready to go.
This is particularly useful if you work on multiple machines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone git@github.com:username/project.git
&lt;span class="nb"&gt;cd&lt;/span&gt; project
make setup
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;is all it takes to get up and running.&lt;/p&gt;
&lt;h2&gt;Launch your tools without the hassle&lt;/h2&gt;
&lt;p&gt;I use Jupyter Notebooks a lot.
With this recipe (and the &lt;code&gt;PATH&lt;/code&gt; we export above) I don't have to remember
to activate my virtual environment or invoke specific configuration files
when I launch a server.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;start-jupyter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    jupyter notebook --config&lt;span class="o"&gt;=&lt;/span&gt;jupyter_notebook_config.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Put whatever you'd like into the &lt;a href="http://jupyter-notebook.readthedocs.io/en/latest/config.html"&gt;config file&lt;/a&gt;.
I like to keep my notebooks in a subdirectory, so my invocation is a little different:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;jupyter notebook --config&lt;span class="o"&gt;=&lt;/span&gt;ipynb/jupyter_notebook_config.py &lt;span class="se"&gt;\&lt;/span&gt;
    --notebook-dir&lt;span class="o"&gt;=&lt;/span&gt;ipynb/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And my configuration automatically changes the working directory to
the project root when launching a new notebook.&lt;/p&gt;
&lt;p&gt;Customize!
The same general idea works for any other software you can start from the shell.
No need to remember any of the obnoxious command-line flags.&lt;/p&gt;
&lt;h2&gt;Quick cleanup&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;CLEANUP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; *.pyc

&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    rm -rf &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CLEANUP&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A ubiquitous target for &lt;em&gt;Make&lt;/em&gt; is &lt;code&gt;clean&lt;/code&gt; to tidy up the repository.
With this makefile, run &lt;code&gt;make clean&lt;/code&gt; to remove all the &lt;code&gt;*.pyc&lt;/code&gt; files.
Customize the &lt;code&gt;CLEANUP&lt;/code&gt; variable with filenames and globs you find yourself
&lt;code&gt;rm&lt;/code&gt;-ing repeatedly.
For me, this includes a bunch of &lt;code&gt;*.log&lt;/code&gt; and &lt;code&gt;*.logfile&lt;/code&gt; files.&lt;/p&gt;
&lt;h2&gt;Fork this code!&lt;/h2&gt;
&lt;p&gt;That's all I've got for a default makefile.
And even this one is more complicated than it has to be;
any &lt;em&gt;one&lt;/em&gt; component from it can make your life easier when practicing
reproducible research.&lt;/p&gt;
&lt;p&gt;The whole point is to hide as much of the humdrum stuff as you can so you get
to focus on what counts.
I've found this makefile saves me both time and, more importantly, mental
energy.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Makefile&lt;/code&gt;, &lt;code&gt;.gitattributes&lt;/code&gt;, &lt;code&gt;requirements.pip&lt;/code&gt; and
&lt;code&gt;drop_jupyter_output.sh&lt;/code&gt; described
here can all be downloaded from &lt;a href="https://gist.github.com/bsmith89/c6811893c1cbd2a72cc1d144a197bef2"&gt;this gist&lt;/a&gt;&lt;sup id="fnref-bootstrap-idea"&gt;&lt;a class="footnote-ref" href="#fn-bootstrap-idea"&gt;4&lt;/a&gt;&lt;/sup&gt;.
Next time you're starting a project, download them to the project directory,
run &lt;code&gt;make setup&lt;/code&gt;, and let me know what you think!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-shorter-tutorials"&gt;
&lt;p&gt;My tutorial is designed to fill a three hour
    Software Carpentry lesson.  There are a number of much shorter
    primers to get you started (e.g. &lt;a href="http://zmjones.com/make/"&gt;#1&lt;/a&gt;,
    &lt;a href="https://bost.ocks.org/mike/make/"&gt;#2&lt;/a&gt;, &lt;a href="http://kbroman.org/minimal_make/"&gt;#3&lt;/a&gt;).&amp;#160;&lt;a class="footnote-backref" href="#fnref-shorter-tutorials" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-xkcd-refs"&gt;
&lt;p&gt;Randall Munroe does not agree.
    Relevant XKCDs: &lt;a href="https://xkcd.com/1205/"&gt;#1&lt;/a&gt;,
    &lt;a href="https://xkcd.com/1319/"&gt;#2&lt;/a&gt;, and &lt;a href="https://xkcd.com/974/"&gt;#3&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-xkcd-refs" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-cook-ref"&gt;
&lt;p&gt;John Cook makes &lt;a href="http://www.johndcook.com/blog/2015/12/22/automate-to-save-mental-energy-not-time/"&gt;this argument&lt;/a&gt; on his blog.&amp;#160;&lt;a class="footnote-backref" href="#fnref-cook-ref" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-bootstrap-idea"&gt;
&lt;p&gt;Even better, you could write a recipe to download those files
    on &lt;code&gt;make setup&lt;/code&gt;!&amp;#160;&lt;a class="footnote-backref" href="#fnref-bootstrap-idea" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="make"></category><category term="pipelines"></category><category term="bioinformatics"></category><category term="protips"></category><category term="git"></category><category term="venv"></category><category term="python"></category></entry><entry><title>Software carpentry instructor training</title><link href="//bsmith89.github.com/blog/instructor-survival.html" rel="alternate"></link><published>2016-05-30T12:00:00-04:00</published><updated>2016-05-31T12:00:00-04:00</updated><author><name>Byron J. Smith</name></author><id>tag:bsmith89.github.com,2016-05-30:/blog/instructor-survival.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Edit (2016-05-31): Added a hypothesis for why my results differ somewhat from
&lt;a href="http://www.datacarpentry.org/blog/instructor-metrics/"&gt;Erin Becker's&lt;/a&gt;.  Briefly: I removed individuals who taught
before they were officially certified.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A couple weeks ago, Greg Wilson &lt;a href="http://lists.software-carpentry.org/pipermail/discuss/2016-May/004471.html"&gt;asked&lt;/a&gt; the &lt;a href="http://software-carpentry.org/"&gt;Software
Carpentry&lt;/a&gt; community for &lt;a href="http://software-carpentry.org/blog/2016/05/looking-for-a-model.html"&gt;feedback&lt;/a&gt; on a collection of
data about the organization's instructors, when they were certified, and when
they taught.
Having dabbled in &lt;a href="https://en.wikipedia.org/wiki/Survival_analysis"&gt;survival analysis&lt;/a&gt;,
I was excited to explore the data within that context.&lt;/p&gt;
&lt;p&gt;Survival analysis is focused on time-to-event data,
for example time from birth until death, but also time to failure of
engineered systems,
or in this case, time from instructor certification to first teaching a
workshop.
The language is somewhat morbid, but helps with talking
precisely about models that can easily be applied to a variety of data,
only sometimes involving death or failure.
The power of modern survival analysis is the ability to include results from
subjects who have not …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Edit (2016-05-31): Added a hypothesis for why my results differ somewhat from
&lt;a href="http://www.datacarpentry.org/blog/instructor-metrics/"&gt;Erin Becker's&lt;/a&gt;.  Briefly: I removed individuals who taught
before they were officially certified.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A couple weeks ago, Greg Wilson &lt;a href="http://lists.software-carpentry.org/pipermail/discuss/2016-May/004471.html"&gt;asked&lt;/a&gt; the &lt;a href="http://software-carpentry.org/"&gt;Software
Carpentry&lt;/a&gt; community for &lt;a href="http://software-carpentry.org/blog/2016/05/looking-for-a-model.html"&gt;feedback&lt;/a&gt; on a collection of
data about the organization's instructors, when they were certified, and when
they taught.
Having dabbled in &lt;a href="https://en.wikipedia.org/wiki/Survival_analysis"&gt;survival analysis&lt;/a&gt;,
I was excited to explore the data within that context.&lt;/p&gt;
&lt;p&gt;Survival analysis is focused on time-to-event data,
for example time from birth until death, but also time to failure of
engineered systems,
or in this case, time from instructor certification to first teaching a
workshop.
The language is somewhat morbid, but helps with talking
precisely about models that can easily be applied to a variety of data,
only sometimes involving death or failure.
The power of modern survival analysis is the ability to include results from
subjects who have not yet experienced the event when data is collected.
After all, studies rarely have the funding or patience to continue indefinitely.
and excluding those data points entirely would falsely inflate rate
estimates.
Instead, the absence of an event for an individual during the study is useful
information that contributes to the precise estimation of rates.&lt;/p&gt;
&lt;p&gt;Let's grab the Software Carpentry data and take a look.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -O http://software-carpentry.org/files/2016/05/teaching-stats-2016-05.csv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now in Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;patsy&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;statsmodels.api&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sm&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;seaborn&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sns&lt;/span&gt;

&lt;span class="c1"&gt;# If you&amp;#39;re using jupyter:&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt; &lt;span class="n"&gt;inline&lt;/span&gt;

&lt;span class="n"&gt;raw_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;teaching-stats-2016-05.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort_values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Person&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raw_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;      Person   Certified      Taught
1781   11268  2016-03-16         NaN
1782   11278  2016-03-29         NaN
1783   11280  2016-04-19         NaN
1784   11292  2016-02-29         NaN
1785   11293  2016-03-01         NaN
1558   11294  2016-04-25  2016-04-18
1557   11294  2016-04-25  2016-02-02
1559   11295  2016-04-25  2016-02-02
1786   11298  2016-04-21         NaN
1787   11311  2016-04-19         NaN
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This data is arranged as three columns: a ID number for each person,
the date they were certified, and the date they taught.
Individuals who have taught more than once have more than one row,
and individuals who have been certified but have not yet taught have one
row where taught is &lt;code&gt;NaN&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In our analysis, each certified instructor will be a data point with a
certification date, a date of first teaching, second teaching, etc.
Let's rearrange our data to reflect this structure using pandas
split-apply-combine functionality.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_person_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort_values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Taught&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;certified&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Certified&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop_duplicates&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;certified&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;taught&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Taught&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop_duplicates&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;taught&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;taught_first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;taught&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;taught_second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nan&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;taught_first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;taught&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;taught_second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;taught&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Series&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;certified&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;certified&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                      &lt;span class="s1"&gt;&amp;#39;taught_first&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;taught_first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="s1"&gt;&amp;#39;taught_second&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;taught_second&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="s1"&gt;&amp;#39;taught_count&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;taught&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;notnull&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;()})&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;raw_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Person&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_person_details&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;         certified  taught_count taught_first taught_second
Person
48      2014-05-04             1   2014-09-11           NaN
75      2013-07-20            15   2013-03-20    2013-03-24
85      2014-12-23             4   2015-03-06    2015-06-17
87      2013-11-25             4   2014-05-12    2015-03-20
135     2015-02-03             1   2015-09-03           NaN
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And some calculations&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;certified&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;certified&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;taught_first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;taught_first&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;taught_second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;taught_second&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;has_taught&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;taught_count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;has_taught_multiple&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;taught_count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;time_to_taught_first&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;taught_first&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;
                                &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;certified&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;time_to_taught_second&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;taught_second&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;
                                 &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;certified&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;time_between_first_second&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time_to_taught_second&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;
                                     &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time_to_taught_first&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;year_certified&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;certified&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I'd like to include data on how long instructors have been certified,
since, for instructors who have not taught, thats how long they have
gone without teaching.
To get this value I need to a collection date for the data, which I don't know.
For now, I'll use June 1st since I know the data was from May.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;COLLECTION_DATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;time_since_certified&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;COLLECTION_DATE&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;certified&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;time_since_taught_first&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;COLLECTION_DATE&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;taught_first&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I'll take a quick peek at the key column.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;time_to_taught_first&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        time_to_taught_first
Person
48                     130.0
75                    -122.0
85                      73.0
87                     168.0
135                    212.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Some people (Person 75, for instance) taught their first workshop before they
were officially certified.
I don't have any idea how to include them in the analysis, so I will be
removing them from this point forward.
I believe that the removal of these individuals explain differences between
my results and &lt;a href="http://www.datacarpentry.org/blog/instructor-metrics/"&gt;the analysis&lt;/a&gt; posted to the Software Carpentry
blog by Erin Becker.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time_to_taught_first&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
            &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time_to_taught_first&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isnull&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Visualization is usually a good idea:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time_to_taught_first&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bins&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;taught_count&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xlabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Days between certification and first teaching&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Histogram of days between certification and first teaching." src="//bsmith89.github.com/blog/static/images/swc-survival-taught-first-hist.png"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{} of {} instructors have not yet taught.&amp;quot;&lt;/span&gt;
          &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_taught&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Of the 474 instructors in this data, 228 have not yet taught.&lt;/p&gt;
&lt;p&gt;Now we jump into the survival analysis.
I'm going to compare time-to-first-teaching to the year in which instructors
were certified.
This is mostly because I want a covariate here, and I don't have access to
more interesting ones, e.g. what style of training it was (online, 2-day, etc.).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# We&amp;#39;ll be modifying our data, so a copy will keep the original pristine.&lt;/span&gt;
&lt;span class="n"&gt;_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# If individuals have not yet taught as of data collection,&lt;/span&gt;
&lt;span class="c1"&gt;# then we will censor them.&lt;/span&gt;
&lt;span class="c1"&gt;# statsmodels requires this time-to-censoring be in the same column as the&lt;/span&gt;
&lt;span class="c1"&gt;# time-to-event.&lt;/span&gt;
&lt;span class="n"&gt;_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time_to_taught_first&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fillna&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time_since_certified&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Fit a proportional hazards model, comparing certification year.&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;quot;Sum&amp;quot; stands for sum-to-zero coding for the design matrix.&lt;/span&gt;
&lt;span class="n"&gt;ydm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xdm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; \
    &lt;span class="n"&gt;patsy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dmatrices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;time_to_taught_first ~ C(year_certified, Sum)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;return_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dataframe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Remove the intercept term.&lt;/span&gt;
&lt;span class="n"&gt;xdm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xdm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Intercept&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;columns&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Right censor for individuals who have not yet taught by the date&lt;/span&gt;
&lt;span class="c1"&gt;# of this data collection.&lt;/span&gt;
&lt;span class="n"&gt;fit1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PHReg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ydm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xdm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_taught&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The most widely used model in survival analysis is called the
&lt;a href="https://en.wikipedia.org/wiki/Proportional_hazards_model"&gt;proportional hazards model&lt;/a&gt;.
In the process of testing the significance of our covariates in this model,
a survival curve is calculated.
In this case, because of the coding for certification year in the design matrix,
this "baseline" curve represents the mean of annual means.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fit1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;baseline_cumulative_hazard&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;sf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ylim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xlabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Days post-certification&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ylabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Fraction instructors not taught&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Survival curve of days to teaching for the first time" src="//bsmith89.github.com/blog/static/images/swc-survival-taught-first-curve.png"&gt;&lt;/p&gt;
&lt;p&gt;The key figure in survival analysis is the survival curve, or its derivative
the hazard function.
Survival curves plot the number or percentage of individuals who have not yet
experienced the event after a given amount of time.
In the case of this data, the survival curve reflects the fraction of
instructors who have not yet taught by a given number of days after
they were certified.&lt;/p&gt;
&lt;p&gt;Despite the fact that about 50% of certified instructors have not yet taught,
many of these are recently trained and we expect them to teach in the
future.
50% of certified instructors teach by 200 days.
After more than a year, however, the survival curve flattens out.
Approximately 30% of instructors get to 400 days without having taught
and at 600 days about the same fraction have still not taught.
If we want to extrapolate beyond the data (always a bad idea) then we
might predict that these instructors will never teach.&lt;/p&gt;
&lt;p&gt;We can also test the effect of certification year on time to first workshop.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fit1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;                                   Results: PHReg
====================================================================================
Model:                       PH Reg                        Sample size:          474
Dependent variable:          time_to_taught_first          Num. events:          246
Ties:                        Breslow
------------------------------------------------------------------------------------
                                log HR log HR SE   HR      t    P&amp;gt;|t|  [0.025 0.975]
------------------------------------------------------------------------------------
C(year_certified, Sum)[S.2012]  0.1382    0.5705 1.1482  0.2422 0.8086 0.3753 3.5124
C(year_certified, Sum)[S.2013]  0.2230    0.2268 1.2498  0.9830 0.3256 0.8012 1.9493
C(year_certified, Sum)[S.2014] -0.1383    0.1789 0.8708 -0.7732 0.4394 0.6132 1.2366
C(year_certified, Sum)[S.2015]  0.0205    0.1730 1.0207  0.1183 0.9058 0.7272 1.4327
====================================================================================
Confidence intervals are for the hazard ratios
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We see no significant deviation from the average year for any of the 4 years of
certification data.&lt;/p&gt;
&lt;p&gt;Just for fun, let's go even further with this data.
Of the 246 instructors who have taught at least once, 131 have taught a
second time.
Can we predict the time after first teaching that it takes to teach again?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time_to_taught_first&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;notnull&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;

&lt;span class="c1"&gt;# Fill in dates for right censoring.&lt;/span&gt;
&lt;span class="n"&gt;_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time_between_first_second&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fillna&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time_since_taught_first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Fit a proportional hazards model using time between certification and first taught.&lt;/span&gt;
&lt;span class="n"&gt;ydm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xdm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patsy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dmatrices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;time_between_first_second ~ time_to_taught_first&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                           &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;return_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dataframe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;xdm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xdm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Intercept&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;columns&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Remove the intercept term&lt;/span&gt;

&lt;span class="c1"&gt;# Right censor for individuals who have not yet taught a second time.&lt;/span&gt;
&lt;span class="n"&gt;fit2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PHReg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ydm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xdm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_taught_multiple&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# The baseline hazard is the probability of having not taught a second&lt;/span&gt;
&lt;span class="c1"&gt;# time by a given day for someone who taught at day 0 of being certified.&lt;/span&gt;
&lt;span class="n"&gt;sf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fit2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;baseline_cumulative_hazard&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;sf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ylim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xlabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Days post-first-teaching&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ylabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Fraction instructors not taught second time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Survival curve of days to teaching a second time after having taught once" src="//bsmith89.github.com/blog/static/images/swc-survival-taught-second-curve.png"&gt;&lt;/p&gt;
&lt;p&gt;The baseline survival curve reflects expectations for a theoretical individual
who taught immediately upon being certified (day 0).
For these folks, we expect 50% to teach again within 100 days, and almost 80%
within a year.&lt;/p&gt;
&lt;p&gt;Let's take a look at the effect of time-to-first-teaching on time to teaching
again.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fit2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;                              Results: PHReg
==========================================================================
Model:                  PH Reg                        Sample size:     246
Dependent variable:     time_between_first_second     Num. events:     131
Ties:                   Breslow
--------------------------------------------------------------------------
                      log HR log HR SE   HR      t    P&amp;gt;|t|  [0.025 0.975]
--------------------------------------------------------------------------
time_to_taught_first -0.0045    0.0010 0.9955 -4.3474 0.0000 0.9935 0.9975
==========================================================================
Confidence intervals are for the hazard ratios
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We find a highly significant effect of time-to-first-teaching.&lt;/p&gt;
&lt;p&gt;The hazard ratio estimate is 0.9955.
We can interpret this to mean that the per-day probability of teaching again
goes down by 0.45% for every day between certification and teaching the first
time.
This isn't all that surprising; individuals who are able to teach soon
after being certified are probably both enthusiastic and have more time
to devote to teaching.&lt;/p&gt;
&lt;p&gt;That's all I've got.
Thanks for reading.
I'd love to hear what you think and if you spot any glaring mistakes in my
analysis.
All of the code to do this is available &lt;a href="https://github.com/bsmith89/swc-instructor-training-analysis"&gt;on github&lt;/a&gt;.
If you have ideas for additional analysis please leave a comment here,
submit an issue to the github repository, or even better, a pull-request.&lt;/p&gt;</content><category term="software-carpentry"></category><category term="python"></category><category term="statistics"></category></entry><entry><title>Tutorial: Reproducible bioinformatics pipelines using GNU Make</title><link href="//bsmith89.github.com/blog/make-analysis.html" rel="alternate"></link><published>2016-03-04T12:00:00-05:00</published><updated>2017-11-21T09:30:00-05:00</updated><author><name>Byron J. Smith</name></author><id>tag:bsmith89.github.com,2016-03-04:/blog/make-analysis.html</id><summary type="html">&lt;p&gt;&lt;em&gt;WARNING: Because of the Markdown rendering of this blog, tab characters
have been replaced with 4 spaces in code blocks.
For this reason, &lt;strong&gt;the makefile code will not work&lt;/strong&gt; when copied directly from
the post.
Instead, you must first replace all 4-space indents with a tab character.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For most projects with moderate to intense data analysis you should
consider using &lt;em&gt;Make&lt;/em&gt;.
Some day I'll write a post telling you why, but for now check out
&lt;a href="http://zmjones.com/make/"&gt;this post&lt;/a&gt; by Zachary M. Jones&lt;sup id="fnref-similar-title"&gt;&lt;a class="footnote-ref" href="#fn-similar-title"&gt;1&lt;/a&gt;&lt;/sup&gt;.
If you're already convinced, or just want to see what it's all about, read on.&lt;/p&gt;
&lt;p&gt;This post is the clone of a tutorial that I wrote for Titus Brown's
week-long &lt;a href="https://dib-training.readthedocs.org/en/pub/2016-02-08-bodega.html"&gt;Bioinformatics Workshop&lt;/a&gt; at UC Davis's Bodega
Marine Laboratory in February, 2016.
For now, the live tutorial lives in &lt;a href="https://github.com/bsmith89/make-bml"&gt;a Github repository&lt;/a&gt;,
although I eventually want to merge all of the good parts into the Software
Carpentry &lt;a href="https://swcarpentry.github.io/make-novice"&gt;Make lesson …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;WARNING: Because of the Markdown rendering of this blog, tab characters
have been replaced with 4 spaces in code blocks.
For this reason, &lt;strong&gt;the makefile code will not work&lt;/strong&gt; when copied directly from
the post.
Instead, you must first replace all 4-space indents with a tab character.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For most projects with moderate to intense data analysis you should
consider using &lt;em&gt;Make&lt;/em&gt;.
Some day I'll write a post telling you why, but for now check out
&lt;a href="http://zmjones.com/make/"&gt;this post&lt;/a&gt; by Zachary M. Jones&lt;sup id="fnref-similar-title"&gt;&lt;a class="footnote-ref" href="#fn-similar-title"&gt;1&lt;/a&gt;&lt;/sup&gt;.
If you're already convinced, or just want to see what it's all about, read on.&lt;/p&gt;
&lt;p&gt;This post is the clone of a tutorial that I wrote for Titus Brown's
week-long &lt;a href="https://dib-training.readthedocs.org/en/pub/2016-02-08-bodega.html"&gt;Bioinformatics Workshop&lt;/a&gt; at UC Davis's Bodega
Marine Laboratory in February, 2016.
For now, the live tutorial lives in &lt;a href="https://github.com/bsmith89/make-bml"&gt;a Github repository&lt;/a&gt;,
although I eventually want to merge all of the good parts into the Software
Carpentry &lt;a href="https://swcarpentry.github.io/make-novice"&gt;Make lesson&lt;/a&gt; (&lt;a href="https://github.com/swcarpentry/make-novice"&gt;repository&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;I'm posting this tutorial because I think it's a good introduction to the
analysis pipeline approach I have been slowly adopting over the last several
years.
This approach is even more deeply enshrined in a
&lt;a href="https://github.com/bsmith89/compbio-template"&gt;project template&lt;/a&gt; that I have been developing.
You can think of this tutorial as a gentle introduction to the motivation
for that template.&lt;/p&gt;
&lt;p&gt;The goals of this tutorial are three-fold:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Teach GNU Make basics,&lt;/li&gt;
&lt;li&gt;Demonstrate the use of general best-practices (version control, README's, etc.), and&lt;/li&gt;
&lt;li&gt;Describe my preferred way to organize projects.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While much of the material is original, it was heavily inspired by the
&lt;a href="https://swcarpentry.github.io/make-novice"&gt;Software Carpentry Make lesson&lt;/a&gt;
which is licensed &lt;a href="https://creativecommons.org/licenses/by/4.0/legalcode"&gt;CC-BY 4.0.&lt;/a&gt;,
and the example project is almost identical.&lt;/p&gt;
&lt;p&gt;And it is divided into five sections:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="#setup"&gt;Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#motivation"&gt;Motivation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#makefile-basics"&gt;Makefile basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#make-features"&gt;&lt;em&gt;Make&lt;/em&gt; features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#best-practices-for-make-based-projects"&gt;Best practices for &lt;em&gt;Make&lt;/em&gt;-based projects&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Setup&lt;/h1&gt;
&lt;p&gt;(Estimated time: 15 Minutes)&lt;/p&gt;
&lt;p&gt;This tutorial was designed for UNIX systems and has been tested
on Amazon EC2 using the
Ubuntu Server 14.04 LTS image and a "m3.medium" instance.
If you would like to use Windows, Git-Bash (packaged with Git for Windows)
is probably your best bet, although it has not been tested on that platform.&lt;/p&gt;
&lt;p&gt;For this lesson we will be using an already prepared set of files.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl https://codeload.github.com/bsmith89/make-example/tar.gz/v1.0-snap &lt;span class="se"&gt;\&lt;/span&gt;
    &amp;gt; make-example-1.0-snap.tgz
tar -xzf make-example-1.0-snap.tgz
&lt;span class="nb"&gt;cd&lt;/span&gt; make-example-1.0-snap
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's take a look at the files we will be working with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get update
sudo apt-get install tree
tree
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;tree&lt;/code&gt; command produces a handy tree-diagram of the directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.
├── books
│   ├── abyss.txt
│   ├── isles.txt
│   ├── last.txt
│   ├── LICENSE_TEXTS.md
│   └── sierra.txt
├── LICENSE.md
├── matplotlibrc
├── plotcount.py
├── README.md
└── wordcount.py

1 directory, 10 files
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Be sure that you also have &lt;em&gt;Python 3&lt;/em&gt;, &lt;em&gt;Git&lt;/em&gt;, and &lt;em&gt;GNU Make&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install python3 git make
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Configure git.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git config --global user.name &lt;span class="s2"&gt;&amp;quot;Your Name&amp;quot;&lt;/span&gt;
git config --global user.email you@example.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Install matplotlib.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install python3-matplotlib
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Motivation&lt;/h1&gt;
&lt;p&gt;(Estimated time: 30 minutes)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The most frequently-occurring word occurs approximately twice as
often as the second most frequent word. This is
&lt;a href="http://en.wikipedia.org/wiki/Zipf%27s_law"&gt;Zipf's Law&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let's imagine that instead of computational biology we're interested in
testing Zipf's law in some of our favorite books.
We've compiled our raw data, the books we want to analyze
(check out &lt;code&gt;head books/isles.txt&lt;/code&gt;)
and have prepared several Python scripts that together make up our
analysis pipeline.&lt;/p&gt;
&lt;p&gt;Before we begin, add a README to your project describing what we intend
to do.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nano README.md
&lt;span class="c1"&gt;# Describe what you&amp;#39;re going to do. (e.g. &amp;quot;Test Zipf&amp;#39;s Law&amp;quot;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first step is to count the frequency of each word in the book.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./wordcount.py books/isles.txt isles.dat
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(The leading '&lt;code&gt;./&lt;/code&gt;' is required so that Bash knows we're executing
a file in the current directory rather than a command in our path.)&lt;/p&gt;
&lt;p&gt;Let's take a quick peek at the result.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;head -5 isles.dat
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;shows us the top 5 lines in the output file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;the 3822    6.7371760973
of  2460    4.33632998414
and 1723    3.03719372466
to  1479    2.60708619778
a   1308    2.30565838181
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Each row shows the word itself, the number of occurrences of that
word, and the number of occurrences as a percentage of the total
number of words in the text file.&lt;/p&gt;
&lt;p&gt;We can do the same thing for a different book:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./wordcount.py books/abyss.txt abyss.dat
head -5 abyss.dat
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, let's visualize the results.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./plotcount.py isles.dat ascii
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;ascii&lt;/code&gt; argument has been added so that we get a text-based
bar-plot printed to the screen.&lt;/p&gt;
&lt;p&gt;The script is also able to render a graphical bar-plot using matplotlib
and save the figure to a given file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./plotcount.py isles.dat isles.png
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Together these scripts implement a common workflow:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Read a data file.&lt;/li&gt;
&lt;li&gt;Perform an analysis on this data file.&lt;/li&gt;
&lt;li&gt;Write the analysis results to a new file.&lt;/li&gt;
&lt;li&gt;Plot a graph of the analysis results.&lt;/li&gt;
&lt;li&gt;Save the graph as an image, so we can put it in a paper.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Writing a "master" script&lt;/h2&gt;
&lt;p&gt;Running this pipeline for one book is pretty easy using the command-line.
But once the number of files and the number of steps in the pipeline
expands, this can turn into a lot of work.
Plus, no one wants to sit and wait for a command to finish, even just for 30
seconds.&lt;/p&gt;
&lt;p&gt;The most common solution to the tedium of data processing is to write
a master script that runs the whole pipeline from start to finish.&lt;/p&gt;
&lt;p&gt;We can make a new file, &lt;code&gt;run_pipeline.sh&lt;/code&gt; that contains:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;span class="c1"&gt;# USAGE: bash run_pipeline.sh&lt;/span&gt;
&lt;span class="c1"&gt;# to produce plots for isles and abyss.&lt;/span&gt;

./wordcount.py isles.txt isles.dat
./wordcount.py abyss.txt abyss.dat

./plotcount.py isles.dat isles.png
./plotcount.py abyss.dat abyss.png

&lt;span class="c1"&gt;# Now archive the results in a tarball so we can share them with a colleague.&lt;/span&gt;
rm -rf zipf_results
mkdir zipf_results
mv isles.dat abyss.dat isles.png abyss.png zipf_results/
tar -czf zipf_results.tgz zipf_results
rm -r zipf_results
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This master script solved several problems in computational reproducibility:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It explicitly documents our pipeline,
    making communication with colleagues (and our future selves) more efficient.&lt;/li&gt;
&lt;li&gt;It allows us to type a single command, &lt;code&gt;bash run_pipeline.sh&lt;/code&gt;, to
    reproduce the full analysis.&lt;/li&gt;
&lt;li&gt;It prevents us from &lt;em&gt;repeating&lt;/em&gt; typos or mistakes.
    You might not get it right the first time, but once you fix something
    it'll (probably) stay that way.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To continue with the Good Ideas, let's put everything under version control.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git init
git add README.md
git commit -m &lt;span class="s2"&gt;&amp;quot;Starting a new project.&amp;quot;&lt;/span&gt;
git add wordcount.py plotcount.py matplotlibrc
git commit -m &lt;span class="s2"&gt;&amp;quot;Write scripts to test Zipf&amp;#39;s law.&amp;quot;&lt;/span&gt;
git add run_pipeline.sh
git commit -m &lt;span class="s2"&gt;&amp;quot;Write a master script to run the pipeline.&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice that we didn't version control any of the products of our analysis.
We'll talk more about this at the end of the tutorial.&lt;/p&gt;
&lt;p&gt;A master script is a good start, but it has a few shortcomings.&lt;/p&gt;
&lt;p&gt;Let's imagine that we adjusted the width of the bars in our plot
produced by &lt;code&gt;plotcount.py&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nano plotcount.py
&lt;span class="c1"&gt;# In the definition of plot_word_counts replace:&lt;/span&gt;
&lt;span class="c1"&gt;#    width = 1.0&lt;/span&gt;
&lt;span class="c1"&gt;# with:&lt;/span&gt;
&lt;span class="c1"&gt;#    width = 0.8&lt;/span&gt;
git add plotcount.py
git commit -m &lt;span class="s2"&gt;&amp;quot;Fix the bar width.&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we want to recreate our figures.
We &lt;em&gt;could&lt;/em&gt; just &lt;code&gt;bash run_pipeline.sh&lt;/code&gt; again.
That would work, but it could also be a big pain if counting words takes
more than a few seconds.
The word counting routine hasn't changed; we shouldn't need to recreate
those files.&lt;/p&gt;
&lt;p&gt;Alternatively, we could manually rerun the plotting for each word-count file
and recreate the tarball.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; file in *.dat&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    ./plotcount.py &lt;span class="nv"&gt;$file&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="p"&gt;/.dat/.png&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;

rm -rf zipf_results
mkdir zipf_results
mv isles.dat abyss.dat isles.png abyss.png zipf_results/
tar -czf zipf_results.tgz zipf_results
rm -r zipf_results
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But then we don't get many of the benefits of having a master script in
the first place.&lt;/p&gt;
&lt;p&gt;Another popular option is to comment out a subset of the lines in
&lt;code&gt;run_pipeline.sh&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;span class="c1"&gt;# USAGE: bash run_pipeline.sh&lt;/span&gt;
&lt;span class="c1"&gt;# to produce plots for isles and abyss.&lt;/span&gt;

&lt;span class="c1"&gt;# These lines are commented out because they don&amp;#39;t need to be rerun.&lt;/span&gt;
&lt;span class="c1"&gt;#./wordcount.py isles.txt isles.dat&lt;/span&gt;
&lt;span class="c1"&gt;#./wordcount.py abyss.txt abyss.dat&lt;/span&gt;

./plotcount.py isles.dat isles.png
./plotcount.py abyss.dat abyss.png

&lt;span class="c1"&gt;# Now archive the results in a tarball so we can share them with a colleague.&lt;/span&gt;
rm -rf zipf_results
mkdir zipf_results
mv isles.dat abyss.dat isles.png abyss.png zipf_results/
tar -czf zipf_results.tgz zipf_results
rm -r zipf_results
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Followed by &lt;code&gt;bash run_pipeline.sh&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But this process, and subsequently undoing it,
can be a hassle and source of errors in complicated pipelines.&lt;/p&gt;
&lt;p&gt;What we really want is an executable &lt;em&gt;description&lt;/em&gt; of our pipeline that
allows software to do the tricky part for us:
figuring out what steps need to be rerun.
It would also be nice if this tool encourage a &lt;em&gt;modular&lt;/em&gt; analysis
and reusing instead of rewriting parts of our pipeline.
As an added benefit, we'd like it all to play nice with the other
mainstays of reproducible research: version control, Unix-style tools,
and a variety of scripting languages.&lt;/p&gt;
&lt;h1&gt;Makefile basics&lt;/h1&gt;
&lt;p&gt;(Estimated time: 45 minutes)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Make&lt;/em&gt; is a computer program originally designed to automate the compilation
and installation of software.
&lt;em&gt;Make&lt;/em&gt; automates the process of building target files through a series of
discrete steps.
Despite it's original purpose, this design makes it a great fit for
bioinformatics pipelines, which often work by transforming data from one form
to another (e.g. &lt;em&gt;raw data&lt;/em&gt; &amp;#8594; &lt;em&gt;word counts&lt;/em&gt; &amp;#8594; &lt;em&gt;???&lt;/em&gt; &amp;#8594; &lt;em&gt;profit&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;For this tutorial we will be using an implementation of &lt;em&gt;Make&lt;/em&gt; called
&lt;em&gt;GNU Make&lt;/em&gt;, although others exist.&lt;/p&gt;
&lt;h2&gt;A simple Makefile&lt;/h2&gt;
&lt;p&gt;Let's get started writing a description of our analysis for &lt;em&gt;Make&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Open up a file called &lt;code&gt;Makefile&lt;/code&gt; in your editor of choice (e.g. &lt;code&gt;nano Makefile&lt;/code&gt;)
and add the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;isles.dat&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;/&lt;span class="n"&gt;isles&lt;/span&gt;.&lt;span class="n"&gt;txt&lt;/span&gt;
    ./wordcount.py books/isles.txt isles.dat
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We have now written the simplest, non-trivial Makefile&lt;sup id="fnref-makefile-name"&gt;&lt;a class="footnote-ref" href="#fn-makefile-name"&gt;2&lt;/a&gt;&lt;/sup&gt;.
It is pretty reminiscent of one of the lines from our master script.
It is a good bet that you can figure out what this Makefile does.&lt;/p&gt;
&lt;p&gt;Be sure to notice a few syntactical items.&lt;/p&gt;
&lt;p&gt;The part before the colon is called the &lt;strong&gt;target&lt;/strong&gt; and the part after is our
list of &lt;strong&gt;prerequisites&lt;/strong&gt; (there is just one in this case).
This first line is followed by an indented section called the &lt;strong&gt;recipe&lt;/strong&gt;.
The whole thing is together called a &lt;strong&gt;rule&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Notice that the indent is &lt;em&gt;not&lt;/em&gt; multiple spaces, but is instead a single tab
character.
This is the first gotcha in makefiles.
If the difference between spaces and a tab character isn't obvious in your
editor of choice, try moving your cursor from one side of the tab to the other.
It should &lt;em&gt;jump&lt;/em&gt; four or more spaces.
If your recipe is not indented with a tab character it is likely to not work.&lt;/p&gt;
&lt;p&gt;Notice that this recipe is exactly the same as the analogous step in our
master shell script.
This is no coincidence; &lt;em&gt;Make&lt;/em&gt; recipes &lt;em&gt;are&lt;/em&gt; shell scripts.
The first line (&lt;em&gt;target&lt;/em&gt;: &lt;em&gt;prerequisites&lt;/em&gt;) explicitly declares two details
that were implicit in our pipeline script:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We are generating a file called &lt;code&gt;isles.dat&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Creating this file requires &lt;code&gt;books/isles.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We'll think about our pipeline as a network of files that are dependent
on one another.
Right now our Makefile describes a pretty simple &lt;strong&gt;dependency graph&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;books/isles.txt&lt;/code&gt; &amp;#8594; &lt;code&gt;isles.dat&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;where the "&amp;#8594;" is pointing from requirements to targets.&lt;/p&gt;
&lt;p&gt;Don't forget to commit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add Makefile
git commit -m &lt;span class="s2"&gt;&amp;quot;Start converting master script into a Makefile.&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Running &lt;em&gt;Make&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Now that we have a (currently incomplete) description of our pipeline,
let's use &lt;em&gt;Make&lt;/em&gt; to execute it.&lt;/p&gt;
&lt;p&gt;First, remove the previously generated files.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rm *.dat *.png
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make isles.dat
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should see the following print to the terminal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./wordcount.py books/isles.txt isles.dat
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;By default, &lt;em&gt;Make&lt;/em&gt; prints the recipes that it executes&lt;sup id="fnref-makefile-identification"&gt;&lt;a class="footnote-ref" href="#fn-makefile-identification"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Let's see if we got what we expected.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;head -5 isles.dat
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first 5 lines of that file should look exactly like before.&lt;/p&gt;
&lt;h2&gt;Rerunning &lt;em&gt;Make&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Let's try running &lt;em&gt;Make&lt;/em&gt; the same way again.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make isles.dat
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This time, instead of executing the same recipe,
&lt;em&gt;Make&lt;/em&gt; prints &lt;code&gt;make: Nothing to be done for 'isles.dat'.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;What's happening here?&lt;/p&gt;
&lt;p&gt;When you ask &lt;em&gt;Make&lt;/em&gt; to make &lt;code&gt;isles.dat&lt;/code&gt; it first looks at
the modification time of that target.
Next it looks at the modification time for the target's prerequisites.
If the target is newer than the prerequisites &lt;em&gt;Make&lt;/em&gt; decides that
the target is up-to-date and does not need to be remade.&lt;/p&gt;
&lt;p&gt;Much has been said about using modification times as the cue for remaking
files.
This can be another &lt;em&gt;Make&lt;/em&gt; gotcha, so keep it in mind.&lt;/p&gt;
&lt;p&gt;If you want to induce the original behavior, you just have to
change the modification time of &lt;code&gt;books/isles.txt&lt;/code&gt; so that it is newer
than &lt;code&gt;isles.dat&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;touch books/isles.txt
make isles.dat
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The original behavior is restored.&lt;/p&gt;
&lt;p&gt;Sometimes you just want &lt;em&gt;Make&lt;/em&gt; to tell you what it thinks about the current
state of your files.
&lt;code&gt;make --dry-run isles.dat&lt;/code&gt; will print &lt;em&gt;Make&lt;/em&gt;'s execution plan, without
actually carrying it out.
The flag can be abbreviated as &lt;code&gt;-n&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you don't pass a target as an argument to make (i.e. just run &lt;code&gt;make&lt;/code&gt;)
it will assume that you want to build the first target in the Makefile.&lt;/p&gt;
&lt;h2&gt;More recipes&lt;/h2&gt;
&lt;p&gt;Now that &lt;em&gt;Make&lt;/em&gt; knows how to build &lt;code&gt;isles.dat&lt;/code&gt;,
we can add a rule for plotting those results.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;isles.png&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;isles&lt;/span&gt;.&lt;span class="n"&gt;dat&lt;/span&gt;
    ./plotcount.py isles.dat isles.png
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The dependency graph now looks like:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;books/isles.txt&lt;/code&gt; &amp;#8594; &lt;code&gt;isles.dat&lt;/code&gt; &amp;#8594; &lt;code&gt;isles.png&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let's add a few more recipes to our Makefile.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;abyss.dat&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;/&lt;span class="n"&gt;abyss&lt;/span&gt;.&lt;span class="n"&gt;txt&lt;/span&gt;
    ./wordcount.py books/abyss.txt abyss.dat

&lt;span class="nf"&gt;zipf_results.tgz&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;isles&lt;/span&gt;.&lt;span class="n"&gt;dat&lt;/span&gt; &lt;span class="n"&gt;abyss&lt;/span&gt;.&lt;span class="n"&gt;dat&lt;/span&gt; &lt;span class="n"&gt;isles&lt;/span&gt;.&lt;span class="n"&gt;png&lt;/span&gt; &lt;span class="n"&gt;abyss&lt;/span&gt;.&lt;span class="n"&gt;png&lt;/span&gt;
    rm -rf zipf_results/
    mkdir zipf_results/
    cp isles.dat abyss.dat isles.png abyss.png zipf_results/
    tar -czf zipf_results.tgz zipf_results/
    rm -r zipf_results/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And commit the changes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add Makefile
git commit -m &lt;span class="s2"&gt;&amp;quot;Add recipes for abyss counts, isles plotting, and the final archive.&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here the recipe for &lt;code&gt;zipf_results.tgz&lt;/code&gt; involves running a series of
shell commands.
When building the archive, &lt;em&gt;Make&lt;/em&gt; will run each line successively unless
any return an error.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4&gt;Question&lt;/h4&gt;
&lt;p&gt;Without doing it, what happens if you run &lt;code&gt;make isles.png&lt;/code&gt;?&lt;/p&gt;
&lt;h4&gt;Challenge&lt;/h4&gt;
&lt;p&gt;What does the dependency graph look like for your Makefile?&lt;/p&gt;
&lt;h4&gt;Try it&lt;/h4&gt;
&lt;p&gt;What happens if you run &lt;code&gt;make zipf_results.tgz&lt;/code&gt; right now?&lt;/p&gt;
&lt;h4&gt;Practice&lt;/h4&gt;
&lt;p&gt;Write a recipe for &lt;code&gt;abyss.png&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Once you've written a recipe for &lt;code&gt;abyss.png&lt;/code&gt; you should be able to
run &lt;code&gt;make zipf_results.tgz&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let's delete all of our files and try it out.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rm abyss.* isles.*
make zipf_results.tgz
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should get the something like the following output
(the order may be different)
to your terminal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./wordcount.py books/abyss.txt abyss.dat
./wordcount.py books/isles.txt isles.dat
./plotcount.py abyss.dat abyss.png
./plotcount.py isles.dat isles.png
rm -rf zipf_results/
mkdir zipf_results/
cp isles.dat abyss.dat isles.png abyss.png zipf_results/
tar -czf zipf_results.tgz zipf_results/
rm -r zipf_results/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since you asked for &lt;code&gt;zipf_results.tgz&lt;/code&gt; &lt;em&gt;Make&lt;/em&gt; looked first for that file.
Not finding it, &lt;em&gt;Make&lt;/em&gt; looked for its prerequisites.
Since none of those existed it remade the ones it could,
&lt;code&gt;abyss.dat&lt;/code&gt; and &lt;code&gt;isles.dat&lt;/code&gt;.
Once those were finished it was able to make &lt;code&gt;abyss.png&lt;/code&gt; and
&lt;code&gt;isles.png&lt;/code&gt;, before finally building &lt;code&gt;zipf_results.tgz&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You may also have gotten an additional line in your output similar to the
following.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rm abyss.dat isles.dat abyss.png isles.png
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Because you only asked for &lt;code&gt;zipf_results.tgz&lt;/code&gt;, &lt;em&gt;Make&lt;/em&gt; thinks its doing
you a favor by deleting the intermediate files.
As computational biologists we know to never trust our analyses until they've
been tested and intermediate files are a valuable audit trail.
To prevent the default behavior, add the following to your Makefile.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;.SECONDARY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now remove the outputs and rerun your pipeline.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rm zipf_results.tgz *.dat *.png
make zipf_results.tgz
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;.SECONDARY&lt;/code&gt; is one of a handful of &lt;strong&gt;special targets&lt;/strong&gt; used to control &lt;em&gt;Make&lt;/em&gt;'s
behavior.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4&gt;Try it&lt;/h4&gt;
&lt;p&gt;What happens if you &lt;code&gt;touch abyss.dat&lt;/code&gt; and
then &lt;code&gt;make zipf_results.tgz&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add Makefile
git commit -m &lt;span class="s2"&gt;&amp;quot;Finish translating pipeline script to a Makefile.&amp;quot;&lt;/span&gt;
git status
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice all the files that &lt;em&gt;Git&lt;/em&gt; wants to be tracking?
Like before, we're not going to version control any of the intermediate
or final products of our pipeline.
To reflect this fact add a &lt;code&gt;.gitignore&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;*.dat
*.png
zipf_results.tgz
LICENSE.md
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add .gitignore
git commit -m &lt;span class="s2"&gt;&amp;quot;Have git ignore intermediate data files.&amp;quot;&lt;/span&gt;
git status
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Phony targets&lt;/h2&gt;
&lt;p&gt;Sometimes its nice to have targets that don't refer to actual files.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;isles&lt;/span&gt;.&lt;span class="n"&gt;png&lt;/span&gt; &lt;span class="n"&gt;abyss&lt;/span&gt;.&lt;span class="n"&gt;png&lt;/span&gt; &lt;span class="n"&gt;zipf_results&lt;/span&gt;.&lt;span class="n"&gt;tgz&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Even though this rule doesn't have a recipe, it does have prerequisites.
Now, when you run &lt;code&gt;make all&lt;/code&gt; &lt;em&gt;Make&lt;/em&gt; will do what it needs to to bring
all three of those targets up to date.&lt;/p&gt;
&lt;p&gt;It is traditional for "&lt;code&gt;all:&lt;/code&gt;" to be the first recipe in a makefile,
since the first recipe is what is built by default
when no other target is passed as an argument.&lt;/p&gt;
&lt;p&gt;Another traditional target is "&lt;code&gt;clean&lt;/code&gt;".
Add the following to your Makefile.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    rm --force *.dat *.png zipf_results.tgz
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running &lt;code&gt;make clean&lt;/code&gt; will now remove all of the cruft.&lt;/p&gt;
&lt;p&gt;Watch out, though!&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4&gt;Try it&lt;/h4&gt;
&lt;p&gt;What happens if you create a file named &lt;code&gt;clean&lt;/code&gt; (i.e. &lt;code&gt;touch clean&lt;/code&gt;)
and then run &lt;code&gt;make clean&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When you run &lt;code&gt;make clean&lt;/code&gt; you get &lt;code&gt;make: Nothing to be done for 'clean'.&lt;/code&gt;.
That's &lt;em&gt;not&lt;/em&gt; because all those files have already been removed.
&lt;em&gt;Make&lt;/em&gt; isn't that smart.
Instead, make sees that there is already a file named "&lt;code&gt;clean&lt;/code&gt;" and,
since this file is newer than all of its prerequisites (there are none),
&lt;em&gt;Make&lt;/em&gt; decides there's nothing left to do.&lt;/p&gt;
&lt;p&gt;To avoid this problem add the following to your Makefile.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;clean&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This special target tells &lt;em&gt;Make&lt;/em&gt; to assume that the targets "all", and "clean"
are &lt;em&gt;not&lt;/em&gt; real files;
they're &lt;strong&gt;phony&lt;/strong&gt; targets.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add Makefile
git commit -m &lt;span class="s2"&gt;&amp;quot;Added &amp;#39;all&amp;#39; and &amp;#39;clean&amp;#39; recipes.&amp;quot;&lt;/span&gt;
rm clean
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;&lt;em&gt;Make&lt;/em&gt; features&lt;/h1&gt;
&lt;p&gt;(Estimated time: 45 minutes)&lt;/p&gt;
&lt;p&gt;Right now our Makefile looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;# Dummy targets&lt;/span&gt;
&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;isles&lt;/span&gt;.&lt;span class="n"&gt;png&lt;/span&gt; &lt;span class="n"&gt;abyss&lt;/span&gt;.&lt;span class="n"&gt;png&lt;/span&gt; &lt;span class="n"&gt;zipf_results&lt;/span&gt;.&lt;span class="n"&gt;tgz&lt;/span&gt;

&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    rm --force *.dat *.png zipf_results.tgz

&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;clean&lt;/span&gt;
&lt;span class="nf"&gt;.SECONDARY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

&lt;span class="c"&gt;# Analysis and plotting&lt;/span&gt;
&lt;span class="nf"&gt;isles.dat&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;/&lt;span class="n"&gt;isles&lt;/span&gt;.&lt;span class="n"&gt;txt&lt;/span&gt;
    ./wordcount.py books/isles.txt isles.dat

&lt;span class="nf"&gt;isles.png&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;isles&lt;/span&gt;.&lt;span class="n"&gt;dat&lt;/span&gt;
    ./plotcount.py isles.dat isles.png

&lt;span class="nf"&gt;abyss.dat&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;/&lt;span class="n"&gt;abyss&lt;/span&gt;.&lt;span class="n"&gt;txt&lt;/span&gt;
    ./wordcount.py books/abyss.txt abyss.dat

&lt;span class="nf"&gt;abyss.png&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;abyss&lt;/span&gt;.&lt;span class="n"&gt;png&lt;/span&gt;
    ./plotcount.py abyss.dat abyss.png

&lt;span class="c"&gt;# Archive for sharing&lt;/span&gt;
&lt;span class="nf"&gt;zipf_results.tgz&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;isles&lt;/span&gt;.&lt;span class="n"&gt;dat&lt;/span&gt; &lt;span class="n"&gt;abyss&lt;/span&gt;.&lt;span class="n"&gt;dat&lt;/span&gt; &lt;span class="n"&gt;isles&lt;/span&gt;.&lt;span class="n"&gt;png&lt;/span&gt; &lt;span class="n"&gt;abyss&lt;/span&gt;.&lt;span class="n"&gt;png&lt;/span&gt;
    rm -rf zipf_results/
    mkdir zipf_results/
    cp isles.dat abyss.dat isles.png abyss.png zipf_results/
    tar -czf zipf_results.tgz zipf_results/
    rm -r zipf_results/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Looks good, don't you think?
Notice the added comments, starting with the "&lt;code&gt;#&lt;/code&gt;" character just like in
Python, R, shell, etc.&lt;/p&gt;
&lt;p&gt;Using these recipes, a simple call to &lt;code&gt;make&lt;/code&gt; builds all the same files that
we were originally making either manually or using the master script,
but with a few bonus features.&lt;/p&gt;
&lt;p&gt;Now, if we change one of the inputs, we don't have to rebuild everything.
Instead, &lt;em&gt;Make&lt;/em&gt; knows to only rebuild the files that, either directly or
indirectly, depend on the file that changed.
This is called an &lt;strong&gt;incremental build&lt;/strong&gt;.
It's no longer our job to track those dependencies.
One fewer cognitive burden getting in the way of research progress!&lt;/p&gt;
&lt;p&gt;In addition, a makefile explicitly documents the inputs to and outputs
from every step in the analysis.
These are like informal "USAGE:" documentation for our scripts.&lt;/p&gt;
&lt;h2&gt;Parallel &lt;em&gt;Make&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;And check this out!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make clean
make --jobs
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Did you see it?
The &lt;code&gt;--jobs&lt;/code&gt; flag (just "&lt;code&gt;-j&lt;/code&gt;" works too) tells &lt;em&gt;Make&lt;/em&gt; to run recipes in
&lt;em&gt;parallel&lt;/em&gt;.
Our dependency graph clearly shows that
&lt;code&gt;abyss.dat&lt;/code&gt; and &lt;code&gt;isles.dat&lt;/code&gt; are mutually independent and can
both be built at the same time.
Likewise for &lt;code&gt;abyss.png&lt;/code&gt; and &lt;code&gt;isles.png&lt;/code&gt;.
If you've got a bunch of independent branches in your analysis, this can
greatly speed up your build process.&lt;/p&gt;
&lt;h2&gt;D.R.Y. (Don't Repeat Yourself)&lt;/h2&gt;
&lt;p&gt;In many programming language, the bulk of the language features are there
to allow the programmer to describe long-winded computational routines as
short, expressive, beautiful code.
Features in Python or R like user-defined variables and functions are
useful in part because they mean we don't have to write out (or think about)
all of the details over and over again.
This good habit of writing things out only once is known as the D.R.Y.
principle.&lt;/p&gt;
&lt;p&gt;In &lt;em&gt;Make&lt;/em&gt; a number of features are designed to minimize repetitive code.
Our current makefile does &lt;em&gt;not&lt;/em&gt; conform to this principle,
but &lt;em&gt;Make&lt;/em&gt; is perfectly capable of doing so.&lt;/p&gt;
&lt;h2&gt;Automatic variables&lt;/h2&gt;
&lt;p&gt;One overly repetitive part of our Makefile:
Targets and prerequisites are in both the header &lt;em&gt;and&lt;/em&gt; the recipe of each rule.&lt;/p&gt;
&lt;p&gt;It turns out, that&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;isles.dat&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;/&lt;span class="n"&gt;isles&lt;/span&gt;.&lt;span class="n"&gt;txt&lt;/span&gt;
    ./wordcount.py books/isles.txt isles.dat
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;can be rewritten as&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;isles.dat&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;/&lt;span class="n"&gt;isles&lt;/span&gt;.&lt;span class="n"&gt;txt&lt;/span&gt;
    ./wordcount.py $^ &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we've replaced the prerequisite "&lt;code&gt;books/isles.txt&lt;/code&gt;" in the recipe
with "&lt;code&gt;$^&lt;/code&gt;" and the target "&lt;code&gt;isles.dat&lt;/code&gt;" with "&lt;code&gt;$@&lt;/code&gt;".
Both "&lt;code&gt;$^&lt;/code&gt;" and "&lt;code&gt;$@&lt;/code&gt;" are variables that refer to all of the prerequisites and
target of a rule, respectively.
In &lt;em&gt;Make&lt;/em&gt;, variables are referenced with a leading dollar sign symbol.
While we can also define our own variables,
&lt;em&gt;Make&lt;/em&gt; &lt;em&gt;automatically&lt;/em&gt; defines a number of variables, like the ones
I've just shown you&lt;sup id="fnref-auto-vars"&gt;&lt;a class="footnote-ref" href="#fn-auto-vars"&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Therefore&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;zipf_results.tgz&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;isles&lt;/span&gt;.&lt;span class="n"&gt;dat&lt;/span&gt; &lt;span class="n"&gt;abyss&lt;/span&gt;.&lt;span class="n"&gt;dat&lt;/span&gt; &lt;span class="n"&gt;isles&lt;/span&gt;.&lt;span class="n"&gt;png&lt;/span&gt; &lt;span class="n"&gt;abyss&lt;/span&gt;.&lt;span class="n"&gt;png&lt;/span&gt;
    rm -rf zipf_results/
    mkdir zipf_results/
    cp isles.dat abyss.dat isles.png abyss.png zipf_results/
    tar -czf zipf_results.tgz zipf_results/
    rm -r zipf_results/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;can now be rewritten as&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;zipf_results.tgz&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;isles&lt;/span&gt;.&lt;span class="n"&gt;dat&lt;/span&gt; &lt;span class="n"&gt;abyss&lt;/span&gt;.&lt;span class="n"&gt;dat&lt;/span&gt; &lt;span class="n"&gt;isles&lt;/span&gt;.&lt;span class="n"&gt;png&lt;/span&gt; &lt;span class="n"&gt;abyss&lt;/span&gt;.&lt;span class="n"&gt;png&lt;/span&gt;
    rm -rf zipf_results/
    mkdir zipf_results/
    cp $^ zipf_results/
    tar -czf &lt;span class="nv"&gt;$@&lt;/span&gt; zipf_results/
    rm -r zipf_results/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's a little less cluttered,
and still perfectly understandable once you know what the variables mean.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4&gt;Try it&lt;/h4&gt;
&lt;p&gt;```bash
make clean
make isles.dat
``````````
&lt;!--Those extra backticks are because of Vim syntax highlighting.--&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You should get the same output as last time.
Internally, &lt;em&gt;Make&lt;/em&gt; replaced "&lt;code&gt;$@&lt;/code&gt;" with "&lt;code&gt;isles.dat&lt;/code&gt;"
and "&lt;code&gt;$^&lt;/code&gt;" with "&lt;code&gt;books/isles.txt&lt;/code&gt;"
before running the recipe.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4&gt;Practice&lt;/h4&gt;
&lt;p&gt;Go ahead and rewrite all of the rules in your Makefile to minimize
repetition and take advantage of these automatic variables.
Don't forget to commit your work.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Pattern rules&lt;/h2&gt;
&lt;p&gt;Another deviation from D.R.Y.:
We have nearly identical recipes for &lt;code&gt;abyss.dat&lt;/code&gt; and &lt;code&gt;isles.dat&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It turns out we can replace &lt;em&gt;both&lt;/em&gt; of those rules with just one rule,
by telling &lt;em&gt;Make&lt;/em&gt; about the relationships between filename &lt;em&gt;patterns&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A "pattern rule" looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;%.dat&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;/%.&lt;span class="n"&gt;txt&lt;/span&gt;
    countwords.py $^ &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we've replaced the book name with a percent sign, "&lt;code&gt;%&lt;/code&gt;".
The "&lt;code&gt;%&lt;/code&gt;" is called the &lt;strong&gt;stem&lt;/strong&gt;
and matches any sequence of characters in the target.
(Kind of like a "&lt;code&gt;*&lt;/code&gt;" (glob) in a path name, but they are &lt;em&gt;not&lt;/em&gt; the same.)
Whatever it matches is then filled in to the prerequisites
wherever there's a "&lt;code&gt;%&lt;/code&gt;".&lt;/p&gt;
&lt;p&gt;This rule can be interpreted as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In order to build a file named &lt;code&gt;[something].dat&lt;/code&gt; (the target)
find a file named &lt;code&gt;books/[that same something].txt&lt;/code&gt; (the prerequisite)
and run &lt;code&gt;countwords.py [the prerequisite] [the target]&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Notice how helpful the automatic variables are here.
This recipe will work no matter what stem is being matched!&lt;/p&gt;
&lt;p&gt;We can replace &lt;em&gt;both&lt;/em&gt; of the rules that matched this pattern
(&lt;code&gt;abyss.dat&lt;/code&gt; and &lt;code&gt;isles.dat&lt;/code&gt;) with just one rule.
Go ahead and do that in your Makefile.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4&gt;Try it&lt;/h4&gt;
&lt;p&gt;After you've replaced the two rules with one pattern
rule, try removing all of the products (&lt;code&gt;make clean&lt;/code&gt;)
and rerunning the pipeline.&lt;/p&gt;
&lt;p&gt;Is anything different now that you're using the pattern rule?&lt;/p&gt;
&lt;p&gt;If everything still works, commit your changes to &lt;em&gt;Git&lt;/em&gt;.&lt;/p&gt;
&lt;h4&gt;Practice&lt;/h4&gt;
&lt;p&gt;Replace the recipes for &lt;code&gt;abyss.png&lt;/code&gt; and &lt;code&gt;isles.png&lt;/code&gt;
with a single pattern rule.&lt;/p&gt;
&lt;h4&gt;Challenge&lt;/h4&gt;
&lt;p&gt;Add &lt;code&gt;books/sierra.txt&lt;/code&gt; to your pipeline.&lt;/p&gt;
&lt;p&gt;(i.e. &lt;code&gt;make all&lt;/code&gt; should plot the word counts and add the plots to
&lt;code&gt;zipf_results.tgz&lt;/code&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Commit your changes to &lt;em&gt;Git&lt;/em&gt; before we move on.&lt;/p&gt;
&lt;h2&gt;User defined variables&lt;/h2&gt;
&lt;p&gt;Not all variables in a makefile are of the automatic variety.
Users can define their own, as well.&lt;/p&gt;
&lt;p&gt;Add this lines at the top of your makefile:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;ARCHIVED&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; isles.dat isles.png &lt;span class="se"&gt;\&lt;/span&gt;
            abyss.dat abyss.png &lt;span class="se"&gt;\&lt;/span&gt;
            sierra.dat sierra.png
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Just like many other languages,
in makefiles "&lt;code&gt;\&lt;/code&gt;" is a line-continuation character.
Think of this variable definition as a single line without the backslash.&lt;/p&gt;
&lt;p&gt;The variable &lt;code&gt;ARCHIVED&lt;/code&gt; is a list of the files that we want to include in our
tarball.
Now wherever we write &lt;code&gt;${ARCHIVED}&lt;/code&gt; it will be replaced with that list of files.
The dollar sign, "&lt;code&gt;$&lt;/code&gt;", and curly-braces, "&lt;code&gt;{}&lt;/code&gt;", are both mandatory when
inserting the contents of a variable.&lt;/p&gt;
&lt;p&gt;Notice the backslashes in the variable definition
splitting the list over three lines, instead of one very long line.
Also notice that we assigned to the variable with "&lt;code&gt;:=&lt;/code&gt;".
This is generally a Good Idea;
Assigning with a normal equals sign can result in non-intuitive behavior for
reasons that we will not be talking about&lt;sup id="fnref-var-assign"&gt;&lt;a class="footnote-ref" href="#fn-var-assign"&gt;5&lt;/a&gt;&lt;/sup&gt;.
Finally, notice that the items in our list are separated by &lt;em&gt;whitespace&lt;/em&gt;,
not commas.
Prerequisite lists were the same way; this is just how lists of things work in
makefiles.
If you included commas they would be considered parts of the filenames.&lt;/p&gt;
&lt;p&gt;Using this variable we can replace the prerequisites of &lt;code&gt;zipf_results.tgz&lt;/code&gt;.
That rule would now be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;zipf_results.tgz&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; ${&lt;span class="n"&gt;ARCHIVED&lt;/span&gt;}
    rm -rf zipf_results/
    mkdir zipf_results/
    cp $^ zipf_results/
    tar -czf &lt;span class="nv"&gt;$@&lt;/span&gt; zipf_results/
    rm -r zipf_results/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can also use &lt;code&gt;${ARCHIVED}&lt;/code&gt; to simplify our cleanup rule.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    rm --force &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ARCHIVED&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; zipf_results.tgz
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;h4&gt;Try it&lt;/h4&gt;
&lt;p&gt;Try running &lt;code&gt;clean&lt;/code&gt; and then &lt;code&gt;all&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Does everything still work?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Best practices for &lt;em&gt;Make&lt;/em&gt;-based projects&lt;/h1&gt;
&lt;p&gt;(Estimated time: 60 minutes)&lt;/p&gt;
&lt;p&gt;A Makefile can be an important part of a reproducible research pipeline.
Have you noticed how simple it is now to add/remove books from our analysis?
Just add or remove those files from the definition of &lt;code&gt;ARCHIVED&lt;/code&gt; or
the prerequisites for the &lt;code&gt;all&lt;/code&gt; target!
With a master script approach, like &lt;code&gt;run_pipeline.sh&lt;/code&gt;,
adding an additional book required either more complicated
or less transparent changes.&lt;/p&gt;
&lt;h2&gt;What's a prerequisite?&lt;/h2&gt;
&lt;p&gt;We've talked a lot about the power of &lt;em&gt;Make&lt;/em&gt; for
rebuilding research outputs when input data changes.
When doing novel data analysis, however, it's very common for our &lt;em&gt;scripts&lt;/em&gt; to
be as or &lt;em&gt;more&lt;/em&gt; dynamic than the data.&lt;/p&gt;
&lt;p&gt;What happens when we edit our scripts instead of changing our data?&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4&gt;Try it&lt;/h4&gt;
&lt;p&gt;First, run &lt;code&gt;make all&lt;/code&gt; so your analysis is up-to-date.&lt;/p&gt;
&lt;p&gt;Let's change the default number of entries in the rank/frequency
plot from 10 to 5.&lt;/p&gt;
&lt;p&gt;(Hint: edit the function definition for &lt;code&gt;plot_word_counts&lt;/code&gt; in
&lt;code&gt;plotcounts.py&lt;/code&gt; to read &lt;code&gt;limit=5&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;Now run &lt;code&gt;make all&lt;/code&gt; again.  What happened?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As it stands, we have to run &lt;code&gt;make clean&lt;/code&gt; followed by &lt;code&gt;make all&lt;/code&gt;
to update our analysis with the new script.
We're missing out on the benefits of incremental analysis when our scripts
are changing too.&lt;/p&gt;
&lt;p&gt;There must be a better way...and there is!
&lt;em&gt;Scripts should be prerequisites too.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Let's edit the pattern rule for &lt;code&gt;%.png&lt;/code&gt; to include &lt;code&gt;plotcounts.py&lt;/code&gt;
as a prerequisites.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;%.png&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;plotcounts&lt;/span&gt;.&lt;span class="n"&gt;py&lt;/span&gt; %.&lt;span class="n"&gt;dat&lt;/span&gt;
    ./$^ &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The header makes sense, but that's a strange looking recipe:
just two automatic variables.&lt;/p&gt;
&lt;p&gt;This recipe works because "&lt;code&gt;$^&lt;/code&gt;" is replaced with all of the prerequisites.
&lt;em&gt;In order&lt;/em&gt;.
When building &lt;code&gt;abyss.png&lt;/code&gt;, for instance, '&lt;code&gt;./$^ $@&lt;/code&gt;' becomes
&lt;code&gt;./plotcounts.py abyss.dat&lt;/code&gt;, which is actually exactly what we want.&lt;/p&gt;
&lt;p&gt;(Remember that we need the leading '&lt;code&gt;./&lt;/code&gt;' so that Bash knows we're executing
a file in the current directory and not a command in our path.)&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4&gt;Try it&lt;/h4&gt;
&lt;p&gt;What happens when you run the pipeline after modifying your script again?&lt;/p&gt;
&lt;p&gt;(Changes to your script can be simulated with &lt;code&gt;touch plotcounts.py&lt;/code&gt;.)&lt;/p&gt;
&lt;h4&gt;Practice&lt;/h4&gt;
&lt;p&gt;Update your other rules to include the relevant scripts as prerequisites.&lt;/p&gt;
&lt;p&gt;Commit your changes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Directory structure&lt;/h2&gt;
&lt;p&gt;Take a look at all of the clutter in your project directory (run &lt;code&gt;ls&lt;/code&gt; to
list all of the files).
For such a small project that's a lot of junk!
Imagine how hard it would be to find your way around this analysis
if you had more than three steps?
Let's move some stuff around to make our project easier to navigate.&lt;/p&gt;
&lt;h3&gt;Store scripts in &lt;code&gt;scripts/&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;First we'll stow away the scripts.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir scripts/
mv plotcounts.py wordcount.py scripts/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We also need to update our Makefile to reflect the change:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;%.dat&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;countwords&lt;/span&gt;.&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;/%.&lt;span class="n"&gt;txt&lt;/span&gt;
    ./$^ &lt;span class="nv"&gt;$@&lt;/span&gt;

&lt;span class="nf"&gt;%.png&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;plotcounts&lt;/span&gt;.&lt;span class="n"&gt;py&lt;/span&gt; %.&lt;span class="n"&gt;dat&lt;/span&gt;
    ./$^ &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;becomes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;%.dat&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scripts&lt;/span&gt;/&lt;span class="n"&gt;countwords&lt;/span&gt;.&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;/%.&lt;span class="n"&gt;txt&lt;/span&gt;
    $^ &lt;span class="nv"&gt;$@&lt;/span&gt;

&lt;span class="nf"&gt;%.png&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scripts&lt;/span&gt;/&lt;span class="n"&gt;plotcounts&lt;/span&gt;.&lt;span class="n"&gt;py&lt;/span&gt; %.&lt;span class="n"&gt;dat&lt;/span&gt;
    $^ &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's a little more verbose, but it is now explicit
that &lt;code&gt;countwords.py&lt;/code&gt; and &lt;code&gt;plotcount.py&lt;/code&gt; are scripts.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Git&lt;/em&gt; should have no problem with the move once you tell it which files
to be aware of.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add countwords.py plotcounts.py
git add scripts/countwords.py scripts/plotcounts.py
git add Makefile
git commit -m &lt;span class="s2"&gt;&amp;quot;Move scripts into a subdirectory.&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Great!  From here on, when we add new scripts to our analysis they won't
clutter up our project root.&lt;/p&gt;
&lt;h3&gt;"Hide" intermediate files in &lt;code&gt;data/&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Speaking of clutter, what are we gonna do about all of these intermediate files!?
Put 'em in a subdirectory!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir data/
mv *.tsv data/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And then fix up your Makefile.
Adjust the relevant lines to look like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;# ...&lt;/span&gt;

&lt;span class="nv"&gt;ARCHIVED&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; data/isles.dat isles.png &lt;span class="se"&gt;\&lt;/span&gt;
            data/abyss.dat abyss.png &lt;span class="se"&gt;\&lt;/span&gt;
            data/sierra.dat sierra.png

&lt;span class="c"&gt;# ...&lt;/span&gt;

&lt;span class="nf"&gt;data/%.dat&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scripts&lt;/span&gt;/&lt;span class="n"&gt;countwords&lt;/span&gt;.&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;/%.&lt;span class="n"&gt;txt&lt;/span&gt;
    $^ &lt;span class="nv"&gt;$@&lt;/span&gt;

&lt;span class="nf"&gt;%.png&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scripts&lt;/span&gt;/&lt;span class="n"&gt;plotcounts&lt;/span&gt;.&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;/%.&lt;span class="n"&gt;dat&lt;/span&gt;

&lt;span class="c"&gt;# ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Thanks to our &lt;code&gt;ARCHIVED&lt;/code&gt; variable, making these changes is pretty simple.&lt;/p&gt;
&lt;p&gt;We have to make one more change if we don't want &lt;em&gt;Git&lt;/em&gt; to bother us about
untracked files.
Update your &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;data/*.dat
*.png
zipf_results.tgz
LICENSE.md
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now commit your changes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add Makefile
git add .gitignore
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Simple!&lt;/p&gt;
&lt;h3&gt;Output finished products to &lt;code&gt;fig/&lt;/code&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;h4&gt;Practice&lt;/h4&gt;
&lt;p&gt;Update your Makefile so that the plots and &lt;code&gt;zipf_results.tgz&lt;/code&gt; are in a
directory called &lt;code&gt;fig/&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can call this directory something else if you prefer, but &lt;code&gt;fig/&lt;/code&gt; seems
short and descriptive.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4&gt;Try it&lt;/h4&gt;
&lt;p&gt;Does your pipeline still execute the way you expect?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;File naming&lt;/h2&gt;
&lt;h3&gt;Use file extensions to indicate format&lt;/h3&gt;
&lt;p&gt;Up to this point, we've been working with three types of data files,
each with it's own file extension.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"&lt;code&gt;.txt&lt;/code&gt;" files: the original book in plain-text&lt;/li&gt;
&lt;li&gt;"&lt;code&gt;.dat&lt;/code&gt;" files: word counts and percentages in a plain-text format&lt;/li&gt;
&lt;li&gt;"&lt;code&gt;.png&lt;/code&gt;" files: PNG formatted barplots&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using file extensions like these clearly indicates to anyone not familiar with
your project what software to view each file with;
you won't get much out of opening a PNG with a text editor.
Whenever possible, use a widely used extension to make it easy for others
to understand your data.&lt;/p&gt;
&lt;p&gt;File extensions also give us a handle for describing the flow of data in our
pipeline.
Pattern rules rely on this convention.
Our makefile says that the raw, book data feeds into word count data
which feeds into barplot data.&lt;/p&gt;
&lt;p&gt;But the current naming scheme has one obvious ambiguity:
"&lt;code&gt;.dat&lt;/code&gt;" isn't particularly descriptive.
Lots of file formats can be described as "data", including binary formats
that would require specialized software to view.
For tab-delimited, tabular data (data in rows and columns),
"&lt;code&gt;.tsv&lt;/code&gt;" is a more precise convention.&lt;/p&gt;
&lt;p&gt;Updating our pipeline to use this extension is as simple as find-and-replace
"&lt;code&gt;.dat&lt;/code&gt;" to "&lt;code&gt;.tsv&lt;/code&gt;" in our Makefile.
If you're tired of &lt;code&gt;mv&lt;/code&gt;-ing your files every time you change your pipeline
you can also &lt;code&gt;make clean&lt;/code&gt; followed by &lt;code&gt;make all&lt;/code&gt; to check that everything still
works.&lt;/p&gt;
&lt;p&gt;You might want to update your "&lt;code&gt;clean&lt;/code&gt;" recipe to remove all the junk
like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    rm -f data/* fig/*
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Be sure to commit all of your changes.&lt;/p&gt;
&lt;h3&gt;Infix processing hints&lt;/h3&gt;
&lt;p&gt;One of our goals in implementing best practices for our analysis pipeline
is to make it easy to change it without rewriting everything.
Let's add a preprocessing step to our analysis that puts
everything in lowercase before counting words.&lt;/p&gt;
&lt;p&gt;The program &lt;code&gt;tr&lt;/code&gt; (short for "translate") is a Unix-style filter that swaps one
set of characters for another.
&lt;code&gt;tr '[:upper:]' '[:lower:]' &amp;lt; [input file] &amp;gt; [output file]&lt;/code&gt;
will read the mixedcase input file and write all lowercase to
the output file.&lt;/p&gt;
&lt;p&gt;We can add this to our pipeline.
We know the recipe is going to look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;tr &amp;#39;[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;:]&amp;#39; &amp;#39;[:&lt;span class="n"&gt;lower&lt;/span&gt;:]&amp;#39; &amp;lt; $^ &amp;gt; $@
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;h4&gt;Challenge&lt;/h4&gt;
&lt;p&gt;Rewrite your Makefile to update the pipeline with the preprocessing step.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You probably decided to take the pattern &lt;code&gt;books/%.txt&lt;/code&gt; as the prerequisite,
but what did you opt to name the target?&lt;/p&gt;
&lt;p&gt;&lt;code&gt;data/%.txt&lt;/code&gt; is an option, but that means we have two files named
&lt;code&gt;[bookname].txt&lt;/code&gt;, one in &lt;code&gt;books/&lt;/code&gt; and one in &lt;code&gt;data/&lt;/code&gt;.
Probably not the easiest to differentiate.&lt;/p&gt;
&lt;p&gt;A better option is to use a more descriptive filename.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;data/%.lower.txt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;/%.&lt;span class="n"&gt;txt&lt;/span&gt;
    tr &lt;span class="s1"&gt;&amp;#39;[:upper:]&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[:lower:]&amp;#39;&lt;/span&gt; &amp;lt; $^ &amp;gt; &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;By including an &lt;strong&gt;infix&lt;/strong&gt; of &lt;code&gt;.lower.&lt;/code&gt; in our filename it's easy to
see that one file is a lowercase version of the mixedcase original.
Now we can extend our pipeline with a variety of pre- and post-processing
steps, give each of them a descriptive infix,
and the names will be a self-documenting record of its origins.&lt;/p&gt;
&lt;p&gt;For reasons which may be apparent in a minute, let's also make a dummy
preprocessing step which will just copy the books verbatim into our
&lt;code&gt;data/&lt;/code&gt; directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;data/%.txt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;/%.&lt;span class="n"&gt;txt&lt;/span&gt;
    cp $^ &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And, in the spirit of infixes, we'll rename &lt;code&gt;data/%.tsv&lt;/code&gt; to be more descriptive.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;data/%.counts.tsv&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scripts&lt;/span&gt;/&lt;span class="n"&gt;wordcount&lt;/span&gt;.&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;/%.&lt;span class="n"&gt;txt&lt;/span&gt;
    $^ &lt;span class="nv"&gt;$@&lt;/span&gt;

&lt;span class="nf"&gt;fig/%.counts.png&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scripts&lt;/span&gt;/&lt;span class="n"&gt;plotcount&lt;/span&gt;.&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;/%.&lt;span class="n"&gt;counts&lt;/span&gt;.&lt;span class="n"&gt;tsv&lt;/span&gt;
    $^ &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Our Makefile now documents explicitly that we require a tab-delimited table of
word counts in order to generate the plot,
whereas before any &lt;code&gt;.tsv&lt;/code&gt; file would suggest a word-plot was possible.&lt;/p&gt;
&lt;p&gt;Here's the &lt;em&gt;full&lt;/em&gt; Makefile:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;ARCHIVED&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; data/isles.lower.counts.tsv data/abyss.lower.counts.tsv &lt;span class="se"&gt;\&lt;/span&gt;
            data/sierra.lower.counts.tsv fig/isles.lower.counts.png &lt;span class="se"&gt;\&lt;/span&gt;
            fig/abyss.lower.counts.png fig/sierra.lower.counts.png

&lt;span class="c"&gt;# Dummy targets&lt;/span&gt;
&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fig&lt;/span&gt;/&lt;span class="n"&gt;isles&lt;/span&gt;.&lt;span class="n"&gt;lower&lt;/span&gt;.&lt;span class="n"&gt;counts&lt;/span&gt;.&lt;span class="n"&gt;png&lt;/span&gt; &lt;span class="n"&gt;fig&lt;/span&gt;/&lt;span class="n"&gt;abyss&lt;/span&gt;.&lt;span class="n"&gt;lower&lt;/span&gt;.&lt;span class="n"&gt;counts&lt;/span&gt;.&lt;span class="n"&gt;png&lt;/span&gt; \
        &lt;span class="n"&gt;fig&lt;/span&gt;/&lt;span class="n"&gt;sierra&lt;/span&gt;.&lt;span class="n"&gt;lower&lt;/span&gt;.&lt;span class="n"&gt;counts&lt;/span&gt;.&lt;span class="n"&gt;png&lt;/span&gt; &lt;span class="n"&gt;zipf_results&lt;/span&gt;.&lt;span class="n"&gt;tgz&lt;/span&gt;

&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    rm --force data/* fig/*

&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;clean&lt;/span&gt;
&lt;span class="nf"&gt;.SECONDARY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

&lt;span class="c"&gt;# Analysis and plotting&lt;/span&gt;
&lt;span class="nf"&gt;data/%.txt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;/%.&lt;span class="n"&gt;txt&lt;/span&gt;
    cp $^ &lt;span class="nv"&gt;$@&lt;/span&gt;

&lt;span class="nf"&gt;data/%.lower.txt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;/%.&lt;span class="n"&gt;txt&lt;/span&gt;
    tr &lt;span class="s1"&gt;&amp;#39;[:upper:]&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[:lower:]&amp;#39;&lt;/span&gt; &amp;lt; $^ &amp;gt; &lt;span class="nv"&gt;$@&lt;/span&gt;

&lt;span class="nf"&gt;data/%.counts.tsv&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scripts&lt;/span&gt;/&lt;span class="n"&gt;wordcount&lt;/span&gt;.&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;/%.&lt;span class="n"&gt;txt&lt;/span&gt;
    $^ &lt;span class="nv"&gt;$@&lt;/span&gt;

&lt;span class="nf"&gt;fig/%.counts.png&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scripts&lt;/span&gt;/&lt;span class="n"&gt;plotcount&lt;/span&gt;.&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;/%.&lt;span class="n"&gt;counts&lt;/span&gt;.&lt;span class="n"&gt;tsv&lt;/span&gt;
    $^ &lt;span class="nv"&gt;$@&lt;/span&gt;

&lt;span class="c"&gt;# Archive for sharing&lt;/span&gt;
&lt;span class="nf"&gt;zipf_results.tgz&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; ${&lt;span class="n"&gt;ARCHIVED&lt;/span&gt;}
    rm -rf zipf_results/
    mkdir zipf_results/
    cp $^ zipf_results/
    tar -czf &lt;span class="nv"&gt;$@&lt;/span&gt; zipf_results/
    rm -r zipf_results/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Our filenames are certainly more verbose now, but in exchange we get:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;self-documenting filenames&lt;/li&gt;
&lt;li&gt;more flexible development&lt;/li&gt;
&lt;li&gt;and something else, too...&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make clean
make fig/abyss.lower.counts.png
make fig/abyss.counts.png
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What happened there?
We just built two different barplots, one for our analysis &lt;em&gt;with&lt;/em&gt; the
preprocessing step and one &lt;em&gt;without&lt;/em&gt;.
Both from the same Makefile.
By liberally applying pattern rules and infix filenames
we get something like a "filename language".
We describe the analyses we want to run and then have &lt;em&gt;Make&lt;/em&gt; figure out the
details.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4&gt;Practice&lt;/h4&gt;
&lt;p&gt;Update your drawing of the dependency graph.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Built-in Testing&lt;/h2&gt;
&lt;p&gt;It's a Good Idea to check your analysis against some form of ground truth.
The simplest version of this is a well-defined dataset that you can
reason about independent of your code.
Let's make just such a dataset.
Let's write a book!&lt;/p&gt;
&lt;p&gt;Into a file called &lt;code&gt;books/test.txt&lt;/code&gt; add something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;My Book
By Me

This is a book that I wrote.

The END
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We don't need software to count all of the words in this book, and
we can probably imagine exactly what a barplot of the count would look like.
If the actual result doesn't look like we expected,
then there's probably something wrong with our analysis.
Testing your scripts with this tiny book is computationally cheap, too.&lt;/p&gt;
&lt;p&gt;Let's try it out!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make fig/test.lower.counts.png
less data/test.lower.counts.tsv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Does your counts data match what you expected?&lt;/p&gt;
&lt;p&gt;We should run this test for just about every change we make,
to our scripts or to our Makefile.
We're going to do that a &lt;em&gt;lot&lt;/em&gt; so we'll make it as easy as possible.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fig&lt;/span&gt;/&lt;span class="n"&gt;test&lt;/span&gt;.&lt;span class="n"&gt;lower&lt;/span&gt;.&lt;span class="n"&gt;counts&lt;/span&gt;.&lt;span class="n"&gt;png&lt;/span&gt;

&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="n"&gt;clean&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You could even add the &lt;code&gt;test&lt;/code&gt; phony target as the first thing in your Makefile.
That way just calling &lt;code&gt;make&lt;/code&gt; will run your tests.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4&gt;Practice&lt;/h4&gt;
&lt;p&gt;Add a cleanup target called &lt;code&gt;testclean&lt;/code&gt; which is specific for
the outputs of your test run.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Commit your changes, including &lt;code&gt;books/test.txt&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add Makefile
git add -f books/test.txt
git commit -m &lt;span class="s2"&gt;&amp;quot;Add pipeline testing recipe and book.&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Review: version control&lt;/h2&gt;
&lt;p&gt;We have been following three guiding principles in our use of version
control during this lesson.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Use it (always).&lt;/p&gt;
&lt;p&gt;Version control is a Good Idea and should be used for any files which
describe your pipeline.
This includes notes/documentation/TODOs, scripts, and the Makefiles
themselves.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don't version control raw or processed data which can be recreated.&lt;/p&gt;
&lt;p&gt;Raw data stays raw and data cleanup should be part of the pipeline.
Because of this, backing up your data is imperative, but version
control is not usually the best way to do so.
Consider adding a recipe which downloads raw data using
&lt;code&gt;wget&lt;/code&gt; or &lt;code&gt;curl&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One exception would be test or example data.
These should be version controlled, as they are subject to change
as testing is adapted to the evolving pipeline.&lt;/p&gt;
&lt;p&gt;In many cases metadata &lt;em&gt;should&lt;/em&gt; be version controlled, since the format
and composition of the metadata is intimately linked with the analysis
pipeline itself.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Aim to commit "atomic" changes to your pipeline.&lt;/p&gt;
&lt;p&gt;This means you should usually run &lt;code&gt;make test&lt;/code&gt; before committing
your changes so that regressions don't need to be fixed
in subsequent commits.
Co-dependent updates to metadata, documentation, and testing should
be included in the same commit.
In a perfect world, &lt;code&gt;make all&lt;/code&gt; should work, and documentation
should be up to date, regardless of what revision has been checked out.
Excessive application of this principle is ill advised.&lt;/p&gt;
&lt;p&gt;A more common problem are behemoth commits which make large numbers of
unrelated changes.
In general, a single sentence commit message should be able to summarize
all of the changes in a commit.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-similar-title"&gt;
&lt;p&gt;I swear I didn't know about that post when I titled my tutorial.
Great minds think alike?&amp;#160;&lt;a class="footnote-backref" href="#fnref-similar-title" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-makefile-name"&gt;
&lt;p&gt;While several other filenames will work, it is a Good Idea to
always call your Makefile &lt;code&gt;Makefile&lt;/code&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref-makefile-name" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-makefile-identification"&gt;
&lt;p&gt;Notice that we didn't tell &lt;em&gt;Make&lt;/em&gt; to use
&lt;code&gt;Makefile&lt;/code&gt;.  When you run &lt;code&gt;make&lt;/code&gt;, the program automatically looks in
several places for your Makefile.&amp;#160;&lt;a class="footnote-backref" href="#fnref-makefile-identification" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-auto-vars"&gt;
&lt;p&gt;See https://www.gnu.org/software/make/manual/html_node/Automatic-Variables.html].&amp;#160;&lt;a class="footnote-backref" href="#fnref-auto-vars" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-var-assign"&gt;
&lt;p&gt;Variables are complicated in &lt;em&gt;Make&lt;/em&gt;.
Read the extensive [documentation][man-var] about variable assignment.
[man-var]: https://www.gnu.org/software/make/manual/html_node/Using-Variables.html&amp;#160;&lt;a class="footnote-backref" href="#fnref-var-assign" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="software-carpentry"></category><category term="teaching"></category><category term="programming"></category><category term="make"></category><category term="pipelines"></category><category term="bioinformatics"></category><category term="software"></category></entry><entry><title>Not all carbs are bad</title><link href="//bsmith89.github.com/blog/fiber-butyrate-life.html" rel="alternate"></link><published>2015-10-27T21:30:00-04:00</published><updated>2015-10-27T21:30:00-04:00</updated><author><name>Byron J. Smith</name></author><id>tag:bsmith89.github.com,2015-10-27:/blog/fiber-butyrate-life.html</id><summary type="html">&lt;p&gt;&lt;em&gt;This brief post was written as a popular science article for a class on
science communication.
My own research is currently focused on exactly this topic: describing microbial
community dynamics associated with acarbose treatment and the production of
butyrate.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A quick internet search search for “low-carb diets” comes back filled with
promises to make you sleek, spry, and slim just by cutting out this entire
category of foods.
The popularity of these diets shouldn't surprise you.
Recent research has implicated overconsumption of sugars, the simplest form
of carbohydrates, and starchy foods, which can quickly be broken down into
sugars, in the increased risk of heart disease, obesity, even some forms of
dementia.
Americans have responded quickly, with 50% trying to limit their intake of
sugars and carbohydrates according to a &lt;a href="http://www.foodinsight.org/sites/default/files/FINAL%202014%20Food%20and%20Health%20Survey%20Executive%20Summary_0.pdf)."&gt;2014 survey&lt;/a&gt;.
That same survey found only 74% of respondents believe that a healthy diet
can include moderate amounts of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;This brief post was written as a popular science article for a class on
science communication.
My own research is currently focused on exactly this topic: describing microbial
community dynamics associated with acarbose treatment and the production of
butyrate.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A quick internet search search for “low-carb diets” comes back filled with
promises to make you sleek, spry, and slim just by cutting out this entire
category of foods.
The popularity of these diets shouldn't surprise you.
Recent research has implicated overconsumption of sugars, the simplest form
of carbohydrates, and starchy foods, which can quickly be broken down into
sugars, in the increased risk of heart disease, obesity, even some forms of
dementia.
Americans have responded quickly, with 50% trying to limit their intake of
sugars and carbohydrates according to a &lt;a href="http://www.foodinsight.org/sites/default/files/FINAL%202014%20Food%20and%20Health%20Survey%20Executive%20Summary_0.pdf)."&gt;2014 survey&lt;/a&gt;.
That same survey found only 74% of respondents believe that a healthy diet
can include moderate amounts of sugar, down from 84% in 2013.
If these trends lead to decreasing calorie consumption as a whole, we could
see a decline in obesity, diabetes, and heart disease.&lt;/p&gt;
&lt;p&gt;Unfortunately, there may be an unintended consequence of these quickly
shifting attitudes.
The fraction of Americans that are actively trying to consume fiber and whole
grains in their diet dropped to 53% in 2014 from 62% the year before.
Dietary fiber is also a carbohydrate, made-up of individual sugars combined
like daisies into long chains and branching structures.
What makes these carbohydrates special is that, due to the links holding them
together, the human body is not capable of breaking fiber down into
individual sugars to be absorbed into the blood stream.&lt;/p&gt;
&lt;p&gt;Without any way to digest it, fiber is often thought of as an inert component
of our food, increasing feelings of fullness but not contributing to the
calorie content, all while improving our digestive health by absorbing water
and pushing everything smoothly along.
While some of the benefits of fiber consumption may be due to its inertness,
the problem with that description is that it entirely ignores the multitudes
of microbes living in our gut, collectively referred to as the microbiome.
Many of these bacteria can break down and feed on dietary fibers, in the
process, producing a huge variety of byproducts.
The discomfort and flatulence associated with the consumption of beans, for
instance&amp;mdash;or in lactose intolerant individuals, milk&amp;mdash;is due to the
carbon dioxide and hydrogen gas belched out by trillions of microbes in the
large intestine while they feast on carbohydrates inaccessible to our bodies.
Despite the discomfort, the breakdown of these compounds by fermentation
produces a number of small molecules called short-chain fatty acids, each of
which you can already recognize by smell: acetate (the acid in vinegar),
lactate (which gives cheese its sharpness), propionate (similar to body
odor), and butyrate (the distinctive stink of vomit).
Despite its odious stench, butyrate has a number of
&lt;a href="http://dx.doi.org/10.1111/j.1365-2036.2007.03562.x"&gt;health benefits&lt;/a&gt;, notably its ability to reduce
inflammation, a fact that should come as welcome news to the almost
&lt;a href="http://www.ccfa.org/assets/pdfs/updatedibdfactbook.pdf"&gt;2 million&lt;/a&gt; Americans who suffer from inflammatory bowel diseases.
The ability of these fibers to stimulate the growth of certain beneficial gut
bacteria puts them into the category of dietary supplements called
&lt;a href="https://en.wikipedia.org/wiki/Prebiotic_(nutrition)"&gt;"prebiotics"&lt;/a&gt; (rather than probiotics).&lt;/p&gt;
&lt;p&gt;For years, diabetics have been prescribed a drug called acarbose to temper
the glucose spikes that occur after starch-heavy meals.
Acarbose operates by blocking the breakdown and absorption of starch,
effectively (and unintentionally) transforming it into dietary fiber to be
broken down by the bacteria in our gut.
Unsurprisingly, flatulence and diarrhea are commonly reported side effects.
A little discomfort might be worth it, though, if the &lt;a href="http://dx.doi.org/10.1111/acel.12170"&gt;finding&lt;/a&gt;
that treatment with acarbose extends lifespan in mice&amp;mdash;by as much as
20%&amp;mdash;applies to humans as well.
Why it has this effect is unclear, but if it is due to the increased
production of butyrate by gut bacteria, increased fiber consumption could
have similar effects.
Studies are currently underway testing the longevity effects of inulin, a
dietary fiber from chicory root.
If this and other fibers also increase lifespan in mice, butyrate, and by
extension the microbiome, will be new targets for the growing field of
life-extending therapies.&lt;/p&gt;</content><category term="longevity"></category><category term="microbiome"></category><category term="diet"></category><category term="popular science"></category></entry><entry><title>First time teaching Python to novices</title><link href="//bsmith89.github.com/blog/swc-python-lesson.html" rel="alternate"></link><published>2015-08-12T01:00:00-04:00</published><updated>2015-08-14T10:00:00-04:00</updated><author><name>Byron J. Smith</name></author><id>tag:bsmith89.github.com,2015-08-12:/blog/swc-python-lesson.html</id><summary type="html">&lt;p&gt;This July I co-instructed with &lt;a href="https://impactstory.org/JenniferShelton"&gt;Jennifer Shelton&lt;/a&gt;
a Software Carpentry &lt;a href="http://i5k-kinbre-script-share.github.io/2015-07-23-stanford/"&gt;workshop&lt;/a&gt; at Stanford University,
targeted to researchers with genomic or evolutionary datasets.
Jennifer taught the shell (Bash) and version control with Git,
while I taught the general programming language Python.
I've been aware of the &lt;a href="http://software-carpentry.org/"&gt;organization&lt;/a&gt;, which teaches software
development and computational methods to scientists, since attending a
workshop in 2012.
Since then I've served as a helper at one workshop
(troubleshooting individual learner's problems and helping catch them up with
the rest of the class),
and gone through the "accelerated", two day, instructor training at Michigan
State University.
After the Stanford workshop, I took part in new-instructor debriefing
on August 4th, during which I mentioned that I had to greatly pare down the
community-written lesson plan, &lt;a href="http://swcarpentry.github.io/python-novice-inflammation/"&gt;python-novice-inflammation&lt;/a&gt;,
to fit into the two half-day session we allotted it.&lt;/p&gt;
&lt;p&gt;Karin and Tiffany, who were running the debriefing, asked me to send …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This July I co-instructed with &lt;a href="https://impactstory.org/JenniferShelton"&gt;Jennifer Shelton&lt;/a&gt;
a Software Carpentry &lt;a href="http://i5k-kinbre-script-share.github.io/2015-07-23-stanford/"&gt;workshop&lt;/a&gt; at Stanford University,
targeted to researchers with genomic or evolutionary datasets.
Jennifer taught the shell (Bash) and version control with Git,
while I taught the general programming language Python.
I've been aware of the &lt;a href="http://software-carpentry.org/"&gt;organization&lt;/a&gt;, which teaches software
development and computational methods to scientists, since attending a
workshop in 2012.
Since then I've served as a helper at one workshop
(troubleshooting individual learner's problems and helping catch them up with
the rest of the class),
and gone through the "accelerated", two day, instructor training at Michigan
State University.
After the Stanford workshop, I took part in new-instructor debriefing
on August 4th, during which I mentioned that I had to greatly pare down the
community-written lesson plan, &lt;a href="http://swcarpentry.github.io/python-novice-inflammation/"&gt;python-novice-inflammation&lt;/a&gt;,
to fit into the two half-day session we allotted it.&lt;/p&gt;
&lt;p&gt;Karin and Tiffany, who were running the debriefing, asked me to send a note
to the mentorship email list about which parts I removed and which I kept in.
I thought I'd also take the opportunity to comment on the material at large:
what worked for me and what didn't.
What started as an email quickly ballooned into this blog post.&lt;/p&gt;
&lt;p&gt;To be explicit, I was teaching from the state of the repository at the time of
the workshop&lt;sup id="fnref-repo-state"&gt;&lt;a class="footnote-ref" href="#fn-repo-state"&gt;1&lt;/a&gt;&lt;/sup&gt; .&lt;/p&gt;
&lt;p&gt;With this as my first workshop&lt;sup id="fnref-unprepared"&gt;&lt;a class="footnote-ref" href="#fn-unprepared"&gt;2&lt;/a&gt;&lt;/sup&gt;, I (incorrectly) thought
I could teach all of the topics straight through.
By the time it became apparent that this wasn't going to work,
adapting the first day's material had to be done on the fly.
After that experience, and
before the following afternoon,
I prepared a subset of the remaining material that I thought I could cover.
I'm now relying on my (somewhat traumatic) memory of the first session,
and that outline I put together for the second day to write this summary.&lt;/p&gt;
&lt;p&gt;My plan going in was to split &lt;a href="http://swcarpentry.github.io/python-novice-inflammation/index.html#topics"&gt;the material&lt;/a&gt; after Topic 6,
getting learners up to writing functions on the first day,
so that we could discuss debugging and best-practices,
and transition from the Jupyter notebook to shell scripts, the next day.
Based on my co-instructors recommendation,
I did not have learners do all of the challenge questions for each topic,
but instead picked just one or two that I thought would be most useful.&lt;/p&gt;
&lt;p&gt;I found myself wishing (especially for Topic 1: "Analyzing Patient Data") that
some of the easier questions were integrated into the lesson itself, instead of
all at the bottom.
Learners should have had more chances to problem-solve early, instead of
listening to me for the entirety of each topic before getting their feet wet.&lt;/p&gt;
&lt;h2&gt;Motivating Python&lt;/h2&gt;
&lt;p&gt;For that &lt;a href="http://swcarpentry.github.io/python-novice-inflammation/01-numpy.html"&gt;first topic&lt;/a&gt; I &lt;em&gt;did&lt;/em&gt; cover everything, but wish I hadn't,
since it was mostly focused on array operations and the specifics of working
with NumPy (e.g. operations along axes).
I appreciated that we were showing the learners powerful library features to
motivate the later work, but I didn't feel like it was great for this
workshop's "genomics" audience.
Maybe these initial motivating sections should be targeted the same way the
capstone projects are.
It was also too long relative to the other sections, in my opinion.&lt;/p&gt;
&lt;p&gt;It &lt;em&gt;was&lt;/em&gt; very good, however, for introducing some python specifics, especially
things that learners coming from other languages like R or Mathematica might
not know (e.g. 0-indexing, slices, that variable assignment happens when each
line is executed, etc.).
It gave learners a chance to be surprised by their misconceptions and ask
questions.
We should do more of that.&lt;/p&gt;
&lt;p&gt;It would have been helpful for the lesson to have pre-built explanations for
0-indexing and right-exclusive slicing, since these were the hard parts and I'm
not happy with the explanations I initially used.&lt;/p&gt;
&lt;p&gt;I found the nature of the made-up data (maximum values smooth and minimum
values as a step-function along the first axis) distracting.
I also didn't know what they were supposed to represent (beyond inflammation
over time), so the "actually doing science" part of the motivation was a bit
lost.
Is there a reason we use these data?&lt;/p&gt;
&lt;h2&gt;Python basics: lists, loops, conditionals, etc.&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://swcarpentry.github.io/python-novice-inflammation/02-loop.html"&gt;Topics 2&lt;/a&gt; and &lt;a href="http://swcarpentry.github.io/python-novice-inflammation/03-lists.html"&gt;3&lt;/a&gt;, "Repeating Actions with Loops" and
"Storing Multiple Values in Lists" respectively, were good and short.
I didn't feel like I had to cut anything out.
However, for-loop syntax was not explicitly covered early in the lesson plan.
It wasn't until I realized I had gotten ahead of myself that we talked about
loop variables, iterables&lt;sup id="fnref-iterables"&gt;&lt;a class="footnote-ref" href="#fn-iterables"&gt;3&lt;/a&gt;&lt;/sup&gt;, and the indented code-block.&lt;/p&gt;
&lt;p&gt;I also thought the segue from Topic 1 to 2 was a bit weak.
This was a theme throughout, mixing the inflammation data with much simpler
stuff (e.g. looping over short strings and lists).
I realize we want to keep the motivation going, but, as a first-time
instructor, I found it to be distracting, and didn't know which I should be
emphasizing to the learners.&lt;/p&gt;
&lt;p&gt;I also picked the wrong challenge question from Topic 1 (reverse &lt;code&gt;'Newton'&lt;/code&gt;
using a loop), since we hadn't covered &lt;code&gt;range&lt;/code&gt;, &lt;code&gt;append&lt;/code&gt;ing to lists,
&lt;code&gt;''.join&lt;/code&gt;, etc.
What novice audience is that question appropriate for?
Maybe the solution is simple and I'm just confused...&lt;/p&gt;
&lt;p&gt;The material for &lt;a href="http://swcarpentry.github.io/python-novice-inflammation/04-files.html"&gt;topic 4&lt;/a&gt;, "Analyzing Data from Multiple Files"
worked well overall.
The only mistake I remember was copy-pasting the big chunk of code from the
lesson (looping over files and drawing sets of plots) instead of typing it out.
I figured since most of the code was library calls, learners wouldn't get
anything out of me taking the time to type all of it.
That may have been true, but it meant the learners weren't executing the code
at the
same time as me, which interrupted the flow of the lesson.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://swcarpentry.github.io/python-novice-inflammation/05-cond.html"&gt;Topic 5&lt;/a&gt;, "Making Choice" (if-statements), was where things got
hairy.
I panicked a bit and went mostly off the lesson plan.
It did not go well.
When I tried to find something in the lesson to get me back on track,
I wished there was more explicit discussion of syntax and booleans.
I was able to review the topic the next day, which I think got any lost
learners
mostly caught up.&lt;/p&gt;
&lt;p&gt;As you can imagine, at this point we were nearing the end of the first day.
I did manage to show the learners the syntax for defining and using functions,
but I covered &lt;a href="http://swcarpentry.github.io/python-novice-inflammation/06-func.html"&gt;topic 6&lt;/a&gt;, "Creating Functions", in its entirety at the
start of the next
session.&lt;/p&gt;
&lt;h2&gt;Learning my lesson&lt;/h2&gt;
&lt;p&gt;After the harrowing experience with conditionals on the first day, I took the
time to write out a personalized lesson outline for the next day with learning
objectives, steps in explaining difficult concepts, and pre-picked
understanding/challenge questions.
The exercise of writing an outline of learning objectives before the class was
very helpful, and something I intend to repeat before future workshops.&lt;/p&gt;
&lt;p&gt;If I remember correctly&lt;sup id="fnref-metamemory"&gt;&lt;a class="footnote-ref" href="#fn-metamemory"&gt;4&lt;/a&gt;&lt;/sup&gt;, the second day I started once again with
functions, and largely based the lesson on the material in
&lt;a href="http://swcarpentry.github.io/python-novice-inflammation/06-func.html"&gt;the topic&lt;/a&gt;.
The temperature conversion formulas were an effective motivator for this
lesson.
I wonder if simple examples, like this one, can replace the more complex
(and, admittedly, more impressive)
inflammation tutorial to demonstrate the value of Python for scientists.
I also integrated material from the &lt;a href="http://swcarpentry.github.io/python-novice-inflammation/07-errors.html"&gt;topic on errors and exceptions&lt;/a&gt;:
tracebacks, syntax errors, etc.
In this combined topic I did not use the &lt;code&gt;import errors_01&lt;/code&gt; example.
It was unclear to me why the lesson plan, as written, uses a black-box script
like &lt;code&gt;errors_01.py&lt;/code&gt;, and not something more explicit, like an index or
attribute error, to dissect the traceback.
I think the explicit approach worked well for the learners in this workshop.
Since we were covering functions anyway, it wasn't hard to get a multi-level
traceback.
Syntax errors also combined nicely with learning function definition syntax.&lt;/p&gt;
&lt;p&gt;&lt;img alt="The author dissecting an attribute error.5" src="//bsmith89.github.com/blog/static/images/swc-stanford-byron.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Somewhere in the process of talking about functions we got sidetracked with
&lt;code&gt;open()&lt;/code&gt;.
I was surprised to see that the lesson plans have only limited discussion of
file objects, only really dealing with them in the section on &lt;code&gt;IOErrors&lt;/code&gt;.
I think learners appreciated a chance to see how the array data they had used
the day before were saved as a CSV,
and how they could access the data directly.
It also gave us a chance to show that other objects besides lists and strings
can serve as iterators in for-loops.&lt;/p&gt;
&lt;p&gt;I liked how the topic 6 &lt;a href="http://swcarpentry.github.io/python-novice-inflammation/06-func.html#defining-defaults"&gt;lesson plan&lt;/a&gt; used the library
function &lt;code&gt;numpy.loadtxt()&lt;/code&gt; to talk about default arguments and the &lt;code&gt;help()&lt;/code&gt;
built-in.
I jumped back and forth between examining that function and implementing
the same things (keywords, documentation) in a &lt;code&gt;center()&lt;/code&gt; function we were
building.
The realized lesson was very similar to the repository's lesson plan,
but a little more integrated with errors and exceptions.&lt;/p&gt;
&lt;p&gt;I had the learners implement &lt;code&gt;rescale()&lt;/code&gt; as a challenge question.
We then worked together as a class to add lower and upper bounds.
This was a much more difficult task than I expected
(even just deriving the correct formula),
and served nicely to demonstrate defensive programming and debugging.
While we touched on many of the concepts in &lt;a href="http://swcarpentry.github.io/python-novice-inflammation/08-defensive.html"&gt;topics 8&lt;/a&gt; and
&lt;a href="http://swcarpentry.github.io/python-novice-inflammation/09-debugging.html"&gt;9&lt;/a&gt;,
these ideas, were spread throughout,
and I did not walk through either as an atomic lesson.&lt;/p&gt;
&lt;p&gt;My ultimate goal on the second day was to write a program to calculate
the mean inflammation of each subject in the example files and then
transform the program into a command-line script that would operate as a
UNIX-style filter.
I remember Greg Wilson teaching Python scripting (along with Bash and SQL)
that way during my first workshop (as a &lt;em&gt;learner&lt;/em&gt;!) at MSU
in May 2012&lt;sup id="fnref-swc-msu"&gt;&lt;a class="footnote-ref" href="#fn-swc-msu"&gt;6&lt;/a&gt;&lt;/sup&gt;.
This &lt;a href="http://swcarpentry.github.io/python-novice-inflammation/10-cmdline.html"&gt;last topic&lt;/a&gt; seemed like a worthwhile mini-capstone,
since it would reintroduce ideas from the Bash lesson the day before,
and we could version-control our work with git.
While we managed to run our code as a script (rather than a cell in the
Jupyter notebook), the transition was a little rough around the edges, and we
didn't have time to add &lt;code&gt;sys.argv&lt;/code&gt; or &lt;code&gt;sys.stdin&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Take-aways&lt;/h2&gt;
&lt;p&gt;The second day of Python was much smoother than the first, and, while we
did not get to all of the material, I was satisfied with what we did cover.
It's quite remarkable that learners can go all the way from indexing into lists
to defensive programming and unit tests in just a few hours.
I'm not convinced that we got them far enough to jump right into using Python
for their own work, but I hope it was a good kick-start towards that goal.
I'm amazed some novice workshops only allocate a half-day session to the
programming language (be it Python, R, or Matlab),
although a quick survey of &lt;a href="http://software-carpentry.org/workshops/index.html#future"&gt;upcoming workshops&lt;/a&gt; suggests that almost
&lt;em&gt;all&lt;/em&gt; of them do in fact use two sessions.
Is this the recommended approach (and if so where is it documented)
or have many instructors all independently come to the same conclusion?&lt;/p&gt;
&lt;p&gt;Even so, there's still more material in python-novice-inflammation
than can be covered in two sessions.
I'm under the impression that the repository is sort of &lt;em&gt;meant&lt;/em&gt; to be like
that: way too big, so that instructors can pick and choose the parts that are
most salient for their audience.
This seems like a good idea, but
it was not sufficiently communicated to me as a first-time instructor,
and, while many of the difficulties I had could have been solved with more
comprehensive preparation,
having a "default" subset would have been helpful.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-repo-state"&gt;
&lt;p&gt;&lt;a href="https://github.com/swcarpentry/python-novice-inflammation/tree/76e3ea24406e4b8d684c9b45f3c5fd33e23ac71a"&gt;&lt;code&gt;76e3ea24406e4b8d684c9b45f3c5fd33e23ac71a&lt;/code&gt;&lt;/a&gt;: still the
HEAD as of this writing.&amp;#160;&lt;a class="footnote-backref" href="#fnref-repo-state" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-unprepared"&gt;
&lt;p&gt;and being insufficiently prepared&amp;#160;&lt;a class="footnote-backref" href="#fnref-unprepared" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-iterables"&gt;
&lt;p&gt;Actually, we talked about getting values from lists and how
strings are like lists, rather than about iterables in general.&amp;#160;&lt;a class="footnote-backref" href="#fnref-iterables" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-metamemory"&gt;
&lt;p&gt;Despite the fact that I have those notes, I actually don't
remember the details of that day's lesson as well.
I wonder if there's some weird metamemory thing going on
e.g. &lt;a href="http://www.sciencemag.org/content/333/6043/776.abstract"&gt;this&lt;/a&gt; (unfortunately paywalled).&amp;#160;&lt;a class="footnote-backref" href="#fnref-metamemory" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-photo-credit"&gt;
&lt;p&gt;Photo credit: Amy Hodge (&lt;a href="https://creativecommons.org/licenses/by/2.0/"&gt;CC-BY&lt;/a&gt;)&amp;#160;&lt;a class="footnote-backref" href="#fnref-photo-credit" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-swc-msu"&gt;
&lt;p&gt;The site for this historic event can still be found
&lt;a href="https://web.archive.org/web/20120514195748/http://software-carpentry.org/boot-camps/michigan-state-university-may-2012/"&gt;here&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref-swc-msu" title="Jump back to footnote 6 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="software-carpentry"></category><category term="teaching"></category><category term="programming"></category><category term="mistakes"></category><category term="python"></category></entry><entry><title>Do bacterial species exist?</title><link href="//bsmith89.github.com/blog/microbial-species.html" rel="alternate"></link><published>2013-08-06T18:30:00-04:00</published><updated>2013-08-06T18:30:00-04:00</updated><author><name>Byron J. Smith</name></author><id>tag:bsmith89.github.com,2013-08-06:/blog/microbial-species.html</id><summary type="html">&lt;p&gt;Any of my friends or colleagues who have had the "pleasure" of talking about
science with me for more than a few hours know that I am prepared, at the drop
of a hat, to rant extensively about several standing debates in biology which I
consider merely semantic.  For instance:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;: Are viruses alive?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: &lt;em&gt;Who CARES!?&lt;/em&gt;  Viruses do what they do.  Cellular organisms do
something else. What difference does it make if we decide to allow our
middle-schoolers to draw little dotted lines around animals, bacteria, &lt;em&gt;and&lt;/em&gt;
viruses?  And I don't even want to &lt;em&gt;hear&lt;/em&gt; the word "prion".&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I have a similar level of disdain for people who try to decide on a single
definition for "species".   Ultimately I am a pluralist: the definition should
be tailored to the scientific question.  Paleontologists, you have your
morphological species concept, because what &lt;em&gt;else&lt;/em&gt; do stony
fossils allow?  Are you studying speciation …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Any of my friends or colleagues who have had the "pleasure" of talking about
science with me for more than a few hours know that I am prepared, at the drop
of a hat, to rant extensively about several standing debates in biology which I
consider merely semantic.  For instance:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;: Are viruses alive?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: &lt;em&gt;Who CARES!?&lt;/em&gt;  Viruses do what they do.  Cellular organisms do
something else. What difference does it make if we decide to allow our
middle-schoolers to draw little dotted lines around animals, bacteria, &lt;em&gt;and&lt;/em&gt;
viruses?  And I don't even want to &lt;em&gt;hear&lt;/em&gt; the word "prion".&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I have a similar level of disdain for people who try to decide on a single
definition for "species".   Ultimately I am a pluralist: the definition should
be tailored to the scientific question.  Paleontologists, you have your
morphological species concept, because what &lt;em&gt;else&lt;/em&gt; do stony
fossils allow?  Are you studying speciation, you can keep the biological species
concept, just be prepared for the inevitable craziness when fairly divergent
plants hybridize or genes are transferred horizontally.  Macro-evolution folks,
don't give up on the phylogenetic species concept.&lt;/p&gt;
&lt;p&gt;As an aside, I have no tolerance for arbitrary definitions which do not admit
to their arbitrariness.  Since I have yet to be convinced otherwise, this has
precluded my acceptance of higher taxonomic divisions.  If someone can give me
a non-arbitrary definition for genus, order, family, phylum, etc. I would love
to know what it is.  As far as I am concerned they're just a naming system for
monophyletic groups which pander to dead systematists.&lt;/p&gt;
&lt;h2&gt;Most species concepts are not applicable or arbitrary&lt;/h2&gt;
&lt;p&gt;For us microbiologists, several
&lt;a href="http://dx.doi.org/10.1146/annurev.micro.56.012302.160634"&gt;species concepts&lt;/a&gt;
are in use.  The genetic species concept groups organisms whose full genomes or
selected genes have diverged minimally.  This definition is applied in
operational taxonomic unit (OTU) based analysis, and indirectly in whole genome
DNA-DNA hybridization, the traditional determination of bacterial species.&lt;/p&gt;
&lt;p&gt;OTU thresholds are certainly arbitrary; The definition fully acknowledges that
fact.  But the OTU concept is particularly useful for culture independent
methods, since genetic distance is perhaps the only measure of familial
resemblance available.  Just as the biological species concept doesn't do much
good for a paleontologist who lacks live, mating specimens, a morphological
species concept is helpless when faced with sequence divorced from physiology.&lt;/p&gt;
&lt;p&gt;When in possession of pure cultures, however, and therefore the luxury of
phenotypic data, a physiological (which I'm using synonymously with
"morphological") species concept is viable.  Unfortunately, application of the
morphogical definition depends critically on the exhaustivity of our search for
physiological differences and an arbitrary delineation between groups.&lt;/p&gt;
&lt;p&gt;The phylogenetic species concept is equally impotent.  I challenge the reader
to devise a monophyletic "basic unit" for any
&lt;a href="http://en.wikipedia.org/wiki/Asexual_reproduction"&gt;agamogenic&lt;/a&gt; organism which
does not classify every daughter as a new species.&lt;/p&gt;
&lt;p&gt;Despite the lack of canonical sex in microbes, an unsurprising (if not
justifiable) urge to model ourselves after animal ecologists has driven some
microbiologists to consider a biological species concept as well.  With many
microbes partaking in some form of recombination through transduction,
transformation, or conjugation, it seems feasible to group those individuals
which are capable of exchanging genetic material into a single species.
Unfortunately this definition leaves behind all those clades which are &lt;em&gt;not&lt;/em&gt;
known to horizontally transfer genes.  What's more, it fails the "arbitrariness
test": how much recombination is required before two individuals share a
species?&lt;/p&gt;
&lt;h2&gt;The ecological species concept saves the day&lt;/h2&gt;
&lt;p&gt;So if everything else is ultimately arbitrary, what's left?  Originally
formulated by Leigh Van Valen
(&lt;a href="http://www.jstor.org/stable/1219444"&gt;1976&lt;/a&gt;),
the ecological species concept has been distilled down to
(&lt;a href="http://dx.doi.org/10.1111/j.1420-9101.2009.01897.x"&gt;Martinez-Gordillo, 2010&lt;/a&gt;):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A species is a set of [related] organisms exploiting
(or adapted to) a single niche.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now that's interesting!  The ecological concept flips the
&lt;a href="http://en.wikipedia.org/wiki/Competitive_exclusion_principle"&gt;competitive exclusion principle&lt;/a&gt;
upside down.  This definition sets the threshold for familial resemblance at
the point where two lineages are no longer in the same niche.  While there are
still some rough edges, namely questions about what constitutes a niche, this
definition appears to pass the test of arbitrariness and makes a satisfying
connection between taxonomy and ecology.&lt;/p&gt;
&lt;p&gt;Despite their inherent differences in criteria, and in my opinion
defensibility, all of these species concepts (genetic, morphological,
biological, and ecological) are getting at the same core idea: what makes one
organism more "like" another?  What keeps the diversity of life clumped
together into identifiable units?  There is a certain harmony to these species
concepts.  Whether &lt;strong&gt;recombination&lt;/strong&gt; or &lt;strong&gt;ecological&lt;/strong&gt; processes, we expect the
end result to be &lt;strong&gt;genetic&lt;/strong&gt; similarity which will manifest itself as
&lt;strong&gt;physiological&lt;/strong&gt; clustering.&lt;/p&gt;
&lt;h2&gt;Are species empirically real?&lt;/h2&gt;
&lt;p&gt;But wait.  This is certainly begging the question.  Does the microbial world
&lt;em&gt;actually&lt;/em&gt; have this assumed genetic and physiological clustering?  Finally, a
hypothesis to be tested!&lt;/p&gt;
&lt;p&gt;Hanage &lt;em&gt;et al.&lt;/em&gt; have (&lt;a href="http://dx.doi.org/10.1098%2Frstb.2006.1917"&gt;2006&lt;/a&gt;)
summarized the current literature on genomic clustering and, in a second paper
(&lt;a href="http://dx.doi.org/10.1126/science.1159388"&gt;2009&lt;/a&gt;), the models which may
explain the observations.  The data is somewhat ambiguous.  &lt;strong&gt;Figure 1&lt;/strong&gt; from
the 2009 paper demonstrates several of the problems facing an empirically
described microbial species.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.sciencemag.org/content/323/5915/741/F1.expansion.html"&gt;&lt;strong&gt;Figure 1:&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Two examples exhibiting conflicts with species concepts in microbes." src="http://www.sciencemag.org/content/323/5915/741/F1.large.jpg"&gt;&lt;/p&gt;
&lt;p&gt;First, and most importantly, &lt;strong&gt;1A&lt;/strong&gt; shows that genetic distance between and
within clusters of &lt;em&gt;Streptococcus&lt;/em&gt; isolates is not consistent.  Current species
designations are indicated.  Clearly, the level of genetic distance within any
visually (indicated by terminal node color) or &lt;em&gt;a priori&lt;/em&gt; designated species
varies by a factor of 5 or more.  What's more, &lt;strong&gt;1B&lt;/strong&gt; demonstrates that while
ecological preference (terminal node color) is fairly correlated with phylogeny
in &lt;em&gt;Vibrio&lt;/em&gt;, some clades lack this association, specifically &lt;em&gt;V. splendidus&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The fractal-like clustering in the &lt;em&gt;Streptococcus&lt;/em&gt; phylogeny makes me wonder if
we're not seeing the result of numerous intense bottlenecks or selective sweeps
which occur stochastically.  And, while the ecological-phylogenetic mapping is
fairly consistent, a point in favor of the species concept, I am curious if
stabilizing selection and/or recombination models explain this clustering
better than other, less interesting processes (e.g. gradual niche migration).
I'm also concerned about problems with sampling.  If there were genotypes which
bridged the clusters would we know it?  And, like every database dependent
analysis in microbiology, a bias for pathogens could be misleading us here as
well.&lt;/p&gt;
&lt;h2&gt;&lt;a href="http://en.wikipedia.org/wiki/Betteridge's_law_of_headlines"&gt;So...&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Despite a exhaustive debate over the semantics of asexual species, surprisingly
little data has has been collected to show that bacteria even exhibit more than
trivial clustering.  Several mechanisms have been proposed for maintaining
genetic conformity, namely recombination and niche specificity.  Some of this
research has aimed to find parallels with plant and animal ecology, but I would
suggest we lose little by discarding the species concept entirely.&lt;/p&gt;
&lt;p&gt;I can understand the need to define morpho-species when diagnosing disease, or
the utility of OTU based approaches in molecular surveys.  I'm also not
suggesting that we should stop categorizing strains into species; the
convenience for communicating microbiology is undeniable.  But by remembering
that most species divisions are arbitrary, and that every microbe is a new
lineage, we're one step closer to escaping the chains of the old microbiology.&lt;/p&gt;</content><category term="microbiology"></category><category term="species"></category><category term="semantics"></category><category term="rant"></category></entry><entry><title>You, too, can host this website</title><link href="//bsmith89.github.com/blog/fork-this-blog.html" rel="alternate"></link><published>2013-07-13T17:00:00-04:00</published><updated>2013-07-13T17:00:00-04:00</updated><author><name>Byron J. Smith</name></author><id>tag:bsmith89.github.com,2013-07-13:/blog/fork-this-blog.html</id><summary type="html">&lt;p&gt;Loyal readers of this blog (of which I am sure there are exactly zero)
might have noticed that things are looking a little different since yesterday.
That's because I've finally developed my own &lt;a href="http://getpelican.com"&gt;Pelican&lt;/a&gt; theme
to the point that it's functional, and not too embaressing to look at.&lt;/p&gt;
&lt;p&gt;It doesn't appear &lt;em&gt;too&lt;/em&gt; different—it's certainly still inspired by the
&lt;a href="https://github.com/getpelican/pelican-themes/tree/master/notmyidea-cms"&gt;sample theme&lt;/a&gt;—but now I understand 95% of the code, instead of 5%.
My goal was to simplify the template files and css to the point that I could
customize just about anything with a minimum of work.  I also attempted to
maintain compatability with all of the configuration options supported by the
default theme.&lt;/p&gt;
&lt;p&gt;Not that I know why you would want to, but you can read and copy the
&lt;a href="https://github.com/bsmith89/blog"&gt;content and configuration files&lt;/a&gt; on Github.  The
&lt;a href="https://github.com/bsmith89/blog-theme"&gt;theme source code&lt;/a&gt; is there as well.&lt;/p&gt;
&lt;p&gt;By putting everything up on Github …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Loyal readers of this blog (of which I am sure there are exactly zero)
might have noticed that things are looking a little different since yesterday.
That's because I've finally developed my own &lt;a href="http://getpelican.com"&gt;Pelican&lt;/a&gt; theme
to the point that it's functional, and not too embaressing to look at.&lt;/p&gt;
&lt;p&gt;It doesn't appear &lt;em&gt;too&lt;/em&gt; different—it's certainly still inspired by the
&lt;a href="https://github.com/getpelican/pelican-themes/tree/master/notmyidea-cms"&gt;sample theme&lt;/a&gt;—but now I understand 95% of the code, instead of 5%.
My goal was to simplify the template files and css to the point that I could
customize just about anything with a minimum of work.  I also attempted to
maintain compatability with all of the configuration options supported by the
default theme.&lt;/p&gt;
&lt;p&gt;Not that I know why you would want to, but you can read and copy the
&lt;a href="https://github.com/bsmith89/blog"&gt;content and configuration files&lt;/a&gt; on Github.  The
&lt;a href="https://github.com/bsmith89/blog-theme"&gt;theme source code&lt;/a&gt; is there as well.&lt;/p&gt;
&lt;p&gt;By putting everything up on Github I make development easy for myself, get
a free, external backup, and give off an air of open-science superiority.&lt;/p&gt;
&lt;p&gt;So please, fork my blog.&lt;/p&gt;</content><category term="open-source"></category><category term="meta"></category><category term="pelican"></category><category term="website"></category><category term="blog"></category></entry><entry><title>Even pathogens hate a cheater</title><link href="//bsmith89.github.com/blog/the-enemy-of-my-enemy.html" rel="alternate"></link><published>2013-06-19T12:00:00-04:00</published><updated>2013-06-19T12:00:00-04:00</updated><author><name>Byron J. Smith</name></author><id>tag:bsmith89.github.com,2013-06-19:/blog/the-enemy-of-my-enemy.html</id><summary type="html">&lt;p&gt;&lt;em&gt;I would like to apologize for the long delay since my last post.  The excuse
(I keep telling myself) is that, having already written too many computational
articles, it was time to prove that I could write about biology too.
Unfortunately I'm not nearly as good at reading the literature as I should be.
Anyway, it's done.  You can stop complaining now.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;One barrier to engineering bacteria for biofuel production or any other human
endeavor is that evolutionary rates are scaled by population sizes and growth
rates.  For an organism with massive population sizes (trillions of individuals
or more) and doubling times on the order of hours, evolution can occur quite
quickly.  Genetic variants within the population which are capable of growing
faster will quickly take over.  For an organism which is, for example, wasting
a huge fraction of its energy producing your future gasoline, you can bet this
months …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;I would like to apologize for the long delay since my last post.  The excuse
(I keep telling myself) is that, having already written too many computational
articles, it was time to prove that I could write about biology too.
Unfortunately I'm not nearly as good at reading the literature as I should be.
Anyway, it's done.  You can stop complaining now.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;One barrier to engineering bacteria for biofuel production or any other human
endeavor is that evolutionary rates are scaled by population sizes and growth
rates.  For an organism with massive population sizes (trillions of individuals
or more) and doubling times on the order of hours, evolution can occur quite
quickly.  Genetic variants within the population which are capable of growing
faster will quickly take over.  For an organism which is, for example, wasting
a huge fraction of its energy producing your future gasoline, you can bet this
months graduate stipend that mutants which put more resources into growth will
sweep the population.&lt;/p&gt;
&lt;p&gt;See kids, cheaters &lt;em&gt;do&lt;/em&gt; win in the end!   In the above example the microbes are
"cheating" the metabolic engineers out of their valuable chemical products, but
the same sort of evolutionary trend: favoring fitness over (and often at the
expense of) any other metric we can think of, has big implications for other
bacteria as well.  My current research explores the impact of selection on
growth rate versus resource use efficiency, but I'll write more about that some
other time.&lt;/p&gt;
&lt;p&gt;Many microbial populations engage in cooperative behavior. &lt;a href="http://en.wikipedia.org/wiki/Salmonella_enterica"&gt;&lt;em&gt;Salmonella&lt;/em&gt;
Typhimurium&lt;/a&gt;, for instance, a human pathogen, uses a type III
secretion system (imagine bacteria using tiny syringes to pump toxins into your
cells) to induce wide-spread inflamation in the gut.  By inducing enough
inflamation, a population of &lt;em&gt;Salmonella&lt;/em&gt; can make a niche for themselves in
which they outcompete the non-pathogenic (commensal) bacteria already present.
Those syringes are expensive, but without them the &lt;em&gt;Salmonella&lt;/em&gt; can't colonize
at all, so everyone works together for the common good.&lt;/p&gt;
&lt;p&gt;Unfortunately (for &lt;em&gt;Salmonella&lt;/em&gt; at least) evolution doesn't really care about
the common good.  Every so often a mutant will come along which has lost the
type III secretion system genes, or doesn't express them as frequently or at
such high levels.  Since this new strain doesn't have to waste resources on
producing the costly virulence factor, but can still take advantage of the
inflamation being induced by all his straight-laced bretheren, he grows faster
than all the normal ("wild-type") &lt;em&gt;Salmonella&lt;/em&gt;.  Even when it's almost entirely
cheaters and the population's ability to inflame the host is greatly reduced,
even when they're all struggling to outcompete the commensal bacteria, the
mutant is still a &lt;em&gt;little&lt;/em&gt; better off because it's not wasting resources on
that silly syringe.&lt;/p&gt;
&lt;p&gt;The cheater wins again!  In this example it's not the metabolic engineers
that are being deprived of their liquid fuel, but the wild-type &lt;em&gt;Salmonella&lt;/em&gt;
which is being cheated out of its public resource: inflamation.  Of course
winning for the cheater also means that the entire population is wiped out.
Without sufficient inflamation &lt;em&gt;Salmonella&lt;/em&gt; can't survive, but up until that last
cell is killed or expelled, at least the cheater was doing better &lt;em&gt;relative to&lt;/em&gt;
the wild-type.  And, in the short-term, that's what winning &lt;em&gt;is&lt;/em&gt; in the Game of
Evolution.&lt;/p&gt;
&lt;p&gt;"But wait just a minute", says the astute reader, "why have I been cooking my
eggs all these years if &lt;em&gt;Salmonella&lt;/em&gt; can so easily be wiped out by this internal
rebellion?"  Aha!  That's the exact question raised by Médéric Diard and
co-authors in their recent paper, "&lt;a href="http://www.nature.com/nature/journal/v494/n7437/abs/nature11913.html"&gt;Stabilization of cooperative virulence by
the expression of an avirulent phenotype.&lt;/a&gt;"&lt;/p&gt;
&lt;p&gt;What they found was that wild-type &lt;em&gt;Salmonella&lt;/em&gt; Typhimurium was playing chess
with the mutant, sacrificing a Knight in order to take the King.  Diard et al.
discovered that a fraction of the wild-type Typhimurium population was not
expressing the costly virulence factors.  These are not cheaters; their
genotype is identical to cooperators which &lt;em&gt;are&lt;/em&gt; expressing the type III
secretion system.  Their phenotype, however, is identical to the cheaters.  By
choosing to not expend the energy needed for the construction of those microscopic
syringes, they achieve the same fitness as the mutant.&lt;/p&gt;
&lt;p&gt;It's not a complete equilizer.  Their daughters still have some probability of
expressing the virulence factors (or else they might as well be &lt;em&gt;real&lt;/em&gt;
cheaters), but their fitness deficit is not as great.  This boost was bought,
however at the price of a reduced population size.  Since only a fraction of
their ranks are inducing host inflamation, the total virulence of the
population is reduced.&lt;/p&gt;
&lt;p&gt;"But wait again", you might point out, "just because the fitness benefit of
cheating has been minimized does not mean that it has been eliminated entirely.
The cheaters will still take over the population in the end, no?"  You're
right, cheaters will still grow faster in the long run, since they &lt;em&gt;never&lt;/em&gt;
cooperate, but &lt;strong&gt;it will require additional time for them to take over&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The rate at which an allele fixes in the population is positively related to
the relative fitness of that allele and therefore the cheater will not fix as
quickly.  In a pathogen like &lt;em&gt;Salmonella&lt;/em&gt;, the ultimate goal is to infect a new
host.  If the cooperators can sustain a sufficiently large population for long
enough, their host is likely to pass them on to another unsuspecting (and
un-hand-washing) individual.  The cheater's success was all for nothing;
without the type III secretion system, the mutant will never colonize another
host.  While they may have won the figurative battle, they lost the war.
They've painted themselves into a corner.  (Insert additional cliches here.)&lt;/p&gt;
&lt;p&gt;Diard et al., in their article, do some fantastic simulations, showing all of
the dynamics at play.  I encourage you to check it out.  One of the most
exciting sentences is the second to last (see, a snoodier blogger would have
said "penultimate"), the authors point out that this tendency for mutants to
out-compete the wild-type pathogen, and therefore reduce the negative effects
on the host, suggests a potential &lt;a href="http://en.wikipedia.org/wiki/Evolutionary_medicine"&gt;therapy&lt;/a&gt;: treat those suffering
from &lt;em&gt;Salmonella&lt;/em&gt; with a large dose of cheaters!&lt;/p&gt;</content><category term="microbiology"></category><category term="cheaters"></category><category term="evolution"></category><category term="pathogens"></category></entry><entry><title>Compiling SciPy on RHEL6</title><link href="//bsmith89.github.com/blog/scipy-on-rhel.html" rel="alternate"></link><published>2013-05-20T12:00:00-04:00</published><updated>2013-05-20T12:00:00-04:00</updated><author><name>Byron J. Smith</name></author><id>tag:bsmith89.github.com,2013-05-20:/blog/scipy-on-rhel.html</id><summary type="html">&lt;p&gt;Within the past two years I've discovered something interesting about myself
(...actually really, &lt;em&gt;really&lt;/em&gt; boring about myself):
I can be happily entertained for hours on end setting up my
computational environment &lt;em&gt;just&lt;/em&gt; right.  I find that it gives me a similar
type of satisfaction to cataloguing my music collection.  I guess you could
call it a hobby.&lt;/p&gt;
&lt;p&gt;Usually this entails installing the usual suspects (&lt;code&gt;NumPy&lt;/code&gt;, &lt;code&gt;Pandas&lt;/code&gt;,
&lt;code&gt;IPython&lt;/code&gt;, &lt;code&gt;matplotlib&lt;/code&gt;, etc.) in a python
&lt;a href="http://www.virtualenv.org/en/latest/"&gt;virtual environment&lt;/a&gt;.
When I'm particularly into it (which is always), I'll also compile the python
distribution itself.  I've had several opportunities to indulge this pasttime,
most recently in setting up my research pipeline on the
&lt;a href="http://cac.engin.umich.edu/resources/systems/flux"&gt;Flux&lt;/a&gt;
high-performance compute cluster at The University of Michigan.&lt;/p&gt;
&lt;p&gt;Installing &lt;code&gt;NumPy&lt;/code&gt; is usually no trouble at all, but for some reason
(if you know, please tell me), &lt;code&gt;SciPy&lt;/code&gt; has &lt;em&gt;always&lt;/em&gt; given me a
"BlasNotFoundError" when installing on the Red Hat Enterprise Linux distros …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Within the past two years I've discovered something interesting about myself
(...actually really, &lt;em&gt;really&lt;/em&gt; boring about myself):
I can be happily entertained for hours on end setting up my
computational environment &lt;em&gt;just&lt;/em&gt; right.  I find that it gives me a similar
type of satisfaction to cataloguing my music collection.  I guess you could
call it a hobby.&lt;/p&gt;
&lt;p&gt;Usually this entails installing the usual suspects (&lt;code&gt;NumPy&lt;/code&gt;, &lt;code&gt;Pandas&lt;/code&gt;,
&lt;code&gt;IPython&lt;/code&gt;, &lt;code&gt;matplotlib&lt;/code&gt;, etc.) in a python
&lt;a href="http://www.virtualenv.org/en/latest/"&gt;virtual environment&lt;/a&gt;.
When I'm particularly into it (which is always), I'll also compile the python
distribution itself.  I've had several opportunities to indulge this pasttime,
most recently in setting up my research pipeline on the
&lt;a href="http://cac.engin.umich.edu/resources/systems/flux"&gt;Flux&lt;/a&gt;
high-performance compute cluster at The University of Michigan.&lt;/p&gt;
&lt;p&gt;Installing &lt;code&gt;NumPy&lt;/code&gt; is usually no trouble at all, but for some reason
(if you know, please tell me), &lt;code&gt;SciPy&lt;/code&gt; has &lt;em&gt;always&lt;/em&gt; given me a
"BlasNotFoundError" when installing on the Red Hat Enterprise Linux distros
commonly used on academic clusters.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt; pip install scipy
&lt;span class="go"&gt;Downloading/unpacking scipy&lt;/span&gt;
&lt;span class="go"&gt;  Downloading scipy-0.12.0.zip (10.2MB): 100% 10.2MB downloaded&lt;/span&gt;
&lt;span class="go"&gt;...&lt;/span&gt;
&lt;span class="go"&gt;numpy.distutils.system_info.BlasNotFoundError:&lt;/span&gt;
&lt;span class="go"&gt;    Blas (http://www.netlib.org/blas/) libraries not found.&lt;/span&gt;
&lt;span class="go"&gt;    Directories to search for the libraries can be specified in the&lt;/span&gt;
&lt;span class="go"&gt;    numpy/distutils/site.cfg file (section [blas]) or by setting&lt;/span&gt;
&lt;span class="go"&gt;    the BLAS environment variable.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I &lt;em&gt;know&lt;/em&gt; BLAS and LAPACK are installed as shared libraries: at Michigan State
University I had to load the respective modules, but at UMich they're right
there in &lt;code&gt;/usr/lib64/atlas&lt;/code&gt;.  So why &lt;code&gt;pip install SciPy&lt;/code&gt; always gives me that
error, I have no clue.  I've set the BLAS and LAPACK environmental
variables to the relevant shared libraries.  I've run
&lt;code&gt;python setup.py build --fcompiler=gnu95&lt;/code&gt; directly.  But I always got that
same error.&lt;/p&gt;
&lt;p&gt;Anyway, I &lt;em&gt;finally&lt;/em&gt; got it to work, so I thought I'd share the steps I took
just in case it helps someone else.  My solution was found on Stack Overflow
(surprise, surprise): The accepted answer to
&lt;a href="http://stackoverflow.com/q/7496547/848121"&gt;this&lt;/a&gt; question.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir -p ~/.local/src/
&lt;span class="nb"&gt;cd&lt;/span&gt; ~/.local/src/
wget -O BLAS.tgz http://www.netlib.org/blas/blas.tgz
tar -xzf BLAS.tgz
&lt;span class="nb"&gt;cd&lt;/span&gt; BLAS
gfortran -O3 -std&lt;span class="o"&gt;=&lt;/span&gt;legacy -m64 -fno-second-underscore -fPIC -c *.f
ar r libfblas.a *.o
ranlib libfblas.a
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;BLAS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$PWD&lt;/span&gt;/libfblas.a

&lt;span class="nb"&gt;cd&lt;/span&gt; ~/.local/src/
wget -O LAPACK.tgz http://www.netlib.org/lapack/lapack.tgz
tar -xzf LAPACK.tgz
&lt;span class="c1"&gt;# The resulting directory may be named lapack-&amp;lt;version&amp;gt;/&lt;/span&gt;
&lt;span class="c1"&gt;# the following assumes that it&amp;#39;s named LAPACK/&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; LAPACK
cp INSTALL/make.inc.gfortran make.inc
vim make.inc
&lt;span class="c1"&gt;# Change OPTS = -O2 to OPTS = -O2 -fPIC&lt;/span&gt;
&lt;span class="c1"&gt;# Change NOOPT = -O0 to NOOPT = -O0 -fPIC&lt;/span&gt;
make lapacklib
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;LAPACK&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$PWD&lt;/span&gt;/libflapack.a

&lt;span class="nb"&gt;cd&lt;/span&gt; ~/.local/src/
git clone https://github.com/scipy/scipy.git
&lt;span class="nb"&gt;cd&lt;/span&gt; scipy
python setup.py build --fcompiler gnu95
python setup.py install
&lt;span class="c1"&gt;# Assuming you&amp;#39;re already in the virtualenv you want to install to.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I don't know which other systems this will work on, but it does successfully
install SciPy for me.  On Python 3.3.2, running the unit tests give me
several errors and failures (nothing too scary looking), but everything passes
on Python 2.7.5!&lt;/p&gt;
&lt;p&gt;Enjoy.&lt;/p&gt;</content><category term="python"></category><category term="hpc"></category><category term="software"></category><category term="scipy"></category><category term="linux"></category></entry><entry><title>PyMake I: Another GNU Make clone</title><link href="//bsmith89.github.com/blog/pymake-0.html" rel="alternate"></link><published>2013-05-07T19:00:00-04:00</published><updated>2016-03-04T10:00:00-05:00</updated><author><name>Byron J. Smith</name></author><id>tag:bsmith89.github.com,2013-05-07:/blog/pymake-0.html</id><summary type="html">&lt;p&gt;(Edit 1): &lt;s&gt;&lt;em&gt;This is the first of two posts about my program
&lt;a href="http://github.com/bsmith89/pymake/"&gt;PyMake&lt;/a&gt;.  I'll post the link to Part II
here when I've written it.&lt;/em&gt;&lt;/s&gt;
&lt;em&gt;While I still agree with some of the many of the views expressed in
this piece, I have changed my thinking on Makefiles.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;(Edit 2): &lt;s&gt;&lt;em&gt;I'll post a new post about the topic when I take the time to write it.&lt;/em&gt;&lt;/s&gt;
&lt;em&gt;I've written a &lt;a href="//bsmith89.github.com/blog/make-analysis.html"&gt;tutorial&lt;/a&gt; on using _Make&lt;/em&gt; for reproducible data
analysis_.&lt;/p&gt;
&lt;p&gt;I am an aspiring but unskilled (not yet skilled?) computer geek.
You can observe this for yourself by watching me fumble my way through
&lt;a href="https://github.com/bsmith89/dotfiles"&gt;&lt;code&gt;vim&lt;/code&gt; configuration&lt;/a&gt;,
multi-threading/processing in Python, and &lt;code&gt;git&lt;/code&gt; merges.&lt;/p&gt;
&lt;p&gt;Rarely do I actually feel like my products are worth sharing with
the wider world.  The only reason I have a GitHub account is personal
convenience and absolute confidence that no one else will ever look at it
besides me …&lt;/p&gt;</summary><content type="html">&lt;p&gt;(Edit 1): &lt;s&gt;&lt;em&gt;This is the first of two posts about my program
&lt;a href="http://github.com/bsmith89/pymake/"&gt;PyMake&lt;/a&gt;.  I'll post the link to Part II
here when I've written it.&lt;/em&gt;&lt;/s&gt;
&lt;em&gt;While I still agree with some of the many of the views expressed in
this piece, I have changed my thinking on Makefiles.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;(Edit 2): &lt;s&gt;&lt;em&gt;I'll post a new post about the topic when I take the time to write it.&lt;/em&gt;&lt;/s&gt;
&lt;em&gt;I've written a &lt;a href="//bsmith89.github.com/blog/make-analysis.html"&gt;tutorial&lt;/a&gt; on using _Make&lt;/em&gt; for reproducible data
analysis_.&lt;/p&gt;
&lt;p&gt;I am an aspiring but unskilled (not yet skilled?) computer geek.
You can observe this for yourself by watching me fumble my way through
&lt;a href="https://github.com/bsmith89/dotfiles"&gt;&lt;code&gt;vim&lt;/code&gt; configuration&lt;/a&gt;,
multi-threading/processing in Python, and &lt;code&gt;git&lt;/code&gt; merges.&lt;/p&gt;
&lt;p&gt;Rarely do I actually feel like my products are worth sharing with
the wider world.  The only reason I have a GitHub account is personal
convenience and absolute confidence that no one else will ever look at it
besides me.  (Yes, I realize that I am invalidating the previous sentence
with that glaring "Fork me on GitHub" ribbon in the top-right corner of
this page.  I'm putting myself out there!  OKAY?!)&lt;/p&gt;
&lt;p&gt;As an aspiring scientist, too, I've had plenty of opportunities to practice
the relevant skill sets.  A laboratory rotation with
&lt;a href="http://ivory.idyll.org/blog/"&gt;Titus Brown&lt;/a&gt;, and the resulting exposure to his
reproducible research and &lt;a href="http://software-carpentry.org"&gt;Software Carpentry&lt;/a&gt;
evangelizing, has certainly influenced the tools and techniques in my belt.&lt;/p&gt;
&lt;p&gt;I try to use the &lt;code&gt;NumPy&lt;/code&gt;/&lt;code&gt;SciPy&lt;/code&gt;/&lt;code&gt;Pandas&lt;/code&gt;/&lt;code&gt;matplotlib&lt;/code&gt; stack for my
computational and visualization tasks.  I am a relatively competent &lt;code&gt;BASH&lt;/code&gt;-ist
and I work hard to write my scripts so that they'll
make sense to me 5 years from now.  I have even been known to do some of my
data analysis in IPython notebooks.&lt;/p&gt;
&lt;h1&gt;A Pipeline is only sometimes a Makefile&lt;/h1&gt;
&lt;p&gt;Despite (or maybe because of) my obsession with writing simple,
reproducible pipelines, one tool I have never come to terms with is
GNU &lt;code&gt;make&lt;/code&gt;.  While it's not quite mainstream for bioinformaticians and
other computational folk, &lt;code&gt;make&lt;/code&gt;
&lt;a href="http://archive.nodalpoint.org/2007/03/18/a_pipeline_is_a_makefile"&gt;promises&lt;/a&gt;
to tie all those *&lt;code&gt;NIX&lt;/code&gt; style
scripts together seamlessly and with built-in
parallelization, selective re-running, and more, all under a declarative
language syntax.  I say 'promises' because, for me, it never did any of those
things.&lt;/p&gt;
&lt;p&gt;Now, I don't want to suggest that this ubiquitous piece of GNU software
doesn't work well.  I recognize that it does much of what the average
user needs, but for my particular pipeline it just wasn't the right tool.&lt;/p&gt;
&lt;p&gt;My problem was a seemingly simple one.  I had a set of gene models (HMMs)
and a set of FASTQ formatted sequences from an Illumina
sequencer.  The goal was to search every sample for every gene using HMMER3
and to output the results (plus a respectable amount of pre- and
post-processing).  The problem is, &lt;code&gt;make&lt;/code&gt; is designed for
software compilation. Processing &lt;code&gt;foo.c&lt;/code&gt; and &lt;code&gt;bar.h&lt;/code&gt; into &lt;code&gt;foo.o&lt;/code&gt; is easy.
I, however, was asking &lt;code&gt;make&lt;/code&gt; to generate the product of $n$ samples and $m$
models (&lt;strong&gt;complete aside&lt;/strong&gt;: if you're curious about how I got the
$\LaTeX$ formatting, see
&lt;a href="http://www.ceremade.dauphine.fr/~amic/blog/mathjax-and-pelican-en.html"&gt;this&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;While, after a dozen hours of smashing my head against the table, I was able
to get my &lt;code&gt;Makefile&lt;/code&gt; to work, it required some &lt;em&gt;really&lt;/em&gt; ugly tricks like
secondary expansion and gratuitous calls to &lt;code&gt;sed&lt;/code&gt; in my macros (for others
with similar problems see &lt;a href="http://stackoverflow.com/q/3745177/848121"&gt;here&lt;/a&gt;,
and &lt;a href="http://stackoverflow.com/q/2880975/848121"&gt;here&lt;/a&gt;).  Plus, debugging
&lt;code&gt;make&lt;/code&gt; is torture, surely against the Geneva Conventions.&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;wanted&lt;/em&gt; to use &lt;code&gt;make&lt;/code&gt;, I swear I did.  It's open source, well used,
extensively tested, available on all relevant systems, etc.
And I probably could have... but only by keeping the ugly hack or hard-coding
the recipe for each model, and that just didn't jive with my
recently acquired simple/reproducible mentality.  Converts always are
the most zealous, afterall.&lt;/p&gt;
&lt;h1&gt;They say graduate school is a time to explore&lt;/h1&gt;
&lt;p&gt;So what did I do?  No, I didn't immediately start writing a make replacement
with all of the features I wanted like some over-eager graduate student.
Jeeze!  What do you people think of me!? First I checked out the
&lt;a href="http://freecode.com/articles/make-alternatives"&gt;extant alternatives&lt;/a&gt;...
I hated everything.  So &lt;em&gt;then&lt;/em&gt; I started writing a make replacement with all
of the features I wanted.&lt;/p&gt;
&lt;p&gt;The result was one of the first pieces of general purpose software to come
off my laptop which I wouldn't be entirely ashamed to show to an experienced
programmer.  It's rough, don't get me wrong, but it does everything I need
and is actually kinda pretty internally.  Well, at least it was before I
fixed some glaring problems.  Whatever.  The point is I want to share
&lt;a href="https://github.com/bsmith89/pymake"&gt;it&lt;/a&gt; with
the world; what better stage exists for its introduction than this blog, which
absolutely no one reads?&lt;/p&gt;
&lt;p&gt;...Yeah, I'll probably post it to &lt;a href="http://reddit.com/r/python"&gt;/r/python&lt;/a&gt; too.&lt;/p&gt;
&lt;p&gt;Tune in for Part II, in which I explain why &lt;em&gt;you&lt;/em&gt; should use my software.&lt;/p&gt;</content><category term="python"></category><category term="software"></category><category term="development"></category><category term="make"></category><category term="pipelines"></category><category term="bioinformatics"></category></entry><entry><title>Hello World!</title><link href="//bsmith89.github.com/blog/initial-commit.html" rel="alternate"></link><published>2013-05-05T22:00:00-04:00</published><updated>2015-08-14T10:00:00-04:00</updated><author><name>Byron J. Smith</name></author><id>tag:bsmith89.github.com,2013-05-05:/blog/initial-commit.html</id><summary type="html">&lt;p&gt;Hi.&lt;/p&gt;
&lt;p&gt;This is mostly a test post and a chance to get some real content on my
brand-new blog.&lt;/p&gt;
&lt;p&gt;Inspired by
&lt;a href="http://ivory.idyll.org/blog/advice-to-graduate-students.html"&gt;C. Titus Brown&lt;/a&gt;'s
tireless pressure to make more graduate student clones of himself—and the
fact that a pretty damn good domain name was still available—I started this
website/blog over the weekend.&lt;/p&gt;
&lt;p&gt;I hope that it will turn into a place for me to share my
excitement and views on microbiology, microbial ecology, mathematical
ecology, bioinformatics, python, (very) amateur software development,
etc.  But I will be satisfied if it turns out to just be writing practice.
Heaven knows I need that.&lt;/p&gt;
&lt;p&gt;In case you're curious, setup took me about 3 hours (plus some waiting for DNS
updates).  Largely, this is because I'm shamelessly mirroring Titus's well
trafficked blog by using a nifty python application called
&lt;a href="http://getpelican.com"&gt;Pelican&lt;/a&gt;.  And at $15/year for the domain (using
&lt;a href="https://hover.com/JRw4YQne"&gt;Hover&lt;/a&gt;&lt;sup id="fnref-hover-disc"&gt;&lt;a class="footnote-ref" href="#fn-hover-disc"&gt;1 …&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hi.&lt;/p&gt;
&lt;p&gt;This is mostly a test post and a chance to get some real content on my
brand-new blog.&lt;/p&gt;
&lt;p&gt;Inspired by
&lt;a href="http://ivory.idyll.org/blog/advice-to-graduate-students.html"&gt;C. Titus Brown&lt;/a&gt;'s
tireless pressure to make more graduate student clones of himself—and the
fact that a pretty damn good domain name was still available—I started this
website/blog over the weekend.&lt;/p&gt;
&lt;p&gt;I hope that it will turn into a place for me to share my
excitement and views on microbiology, microbial ecology, mathematical
ecology, bioinformatics, python, (very) amateur software development,
etc.  But I will be satisfied if it turns out to just be writing practice.
Heaven knows I need that.&lt;/p&gt;
&lt;p&gt;In case you're curious, setup took me about 3 hours (plus some waiting for DNS
updates).  Largely, this is because I'm shamelessly mirroring Titus's well
trafficked blog by using a nifty python application called
&lt;a href="http://getpelican.com"&gt;Pelican&lt;/a&gt;.  And at $15/year for the domain (using
&lt;a href="https://hover.com/JRw4YQne"&gt;Hover&lt;/a&gt;&lt;sup id="fnref-hover-disc"&gt;&lt;a class="footnote-ref" href="#fn-hover-disc"&gt;1&lt;/a&gt;&lt;/sup&gt; as my registrar) and $35/year for hosting
(tiny, shared server with &lt;a href="http://asmallorange.com/?ref_id=lTryoX47YjmF"&gt;A Small Orange&lt;/a&gt;&lt;sup id="fnref-aso-disc"&gt;&lt;a class="footnote-ref" href="#fn-aso-disc"&gt;2&lt;/a&gt;&lt;/sup&gt;,
I really had no financial excuse to not do this.&lt;/p&gt;
&lt;p&gt;Wish me luck!&lt;/p&gt;
&lt;p&gt;-Byron&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-hover-disc"&gt;
&lt;p&gt;DISCLOSURE: That's a referral link.  I'll get $2 in credit
  each time one of you nerds signs up.&amp;#160;&lt;a class="footnote-backref" href="#fnref-hover-disc" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-aso-disc"&gt;
&lt;p&gt;That, too, is a referral link.
  My handlers told me to also suggest
  that you use the coupon code 'FRIENDME' for 15% off.&amp;#160;&lt;a class="footnote-backref" href="#fnref-aso-disc" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="meta"></category><category term="pelican"></category><category term="website"></category><category term="hosting"></category><category term="blog"></category></entry></feed>