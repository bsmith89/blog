<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Deep Ecology - Byron J. Smith</title><link>http://blog.byronjsmith.com/</link><description>A blog of the new microbiology.</description><lastBuildDate>Wed, 22 Jun 2016 13:30:00 -0400</lastBuildDate><item><title>Take five minutes to simplify your life with Make</title><link>http://blog.byronjsmith.com/makefile-shortcuts.html</link><description>&lt;p&gt;I use &lt;em&gt;GNU Make&lt;/em&gt; to automate my data processing pipelines. I’ve written a &lt;a href="http://blog.byronjsmith.com/make-analysis.html"&gt;tutorial&lt;/a&gt; &lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; for novices on the basics of using &lt;em&gt;Make&lt;/em&gt; for reproducible analysis and I think that everyone who writes more than one script, or runs more than one shell command to process their data can benefit from automating that process. &lt;a href="http://kbroman.org/minimal_make/"&gt;I’m&lt;/a&gt; &lt;a href="https://bost.ocks.org/mike/make/"&gt;not&lt;/a&gt; &lt;a href="http://zmjones.com/make/"&gt;alone&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, the investment required to learn &lt;em&gt;Make&lt;/em&gt; and to convert an entire project can seem daunting to many time-strapped researchers. Even if you aren’t living the dream—rebuilding a paper from raw data with a single invocation of &lt;code&gt;make paper&lt;/code&gt;—I still think you can benefit from adding a simple &lt;code&gt;Makefile&lt;/code&gt; to your project root.&lt;/p&gt;
&lt;p&gt;When done right, scripting the tedious parts of your job &lt;em&gt;can&lt;/em&gt; save you time in the long run&lt;a href="#fn2" class="footnoteRef" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;. But the time savings aren’t the only reason to do it. For me, a bigger …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Byron J. Smith</dc:creator><pubDate>Tue, 14 Jun 2016 12:00:00 -0400</pubDate><guid isPermaLink="false">tag:blog.byronjsmith.com,2016-06-14:/makefile-shortcuts.html</guid><category>make</category><category>pipelines</category><category>bioinformatics</category><category>protips</category><category>git</category><category>venv</category><category>python</category></item><item><title>Software carpentry instructor training</title><link>http://blog.byronjsmith.com/instructor-survival.html</link><description>&lt;p&gt;&lt;em&gt;Edit (2016-05-31): Added a hypothesis for why my results differ somewhat from &lt;a href="http://www.datacarpentry.org/blog/instructor-metrics/"&gt;Erin Becker’s&lt;/a&gt;. Briefly: I removed individuals who taught before they were officially certified.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A couple weeks ago, Greg Wilson &lt;a href="http://lists.software-carpentry.org/pipermail/discuss/2016-May/004471.html"&gt;asked&lt;/a&gt; the &lt;a href="http://software-carpentry.org/"&gt;Software Carpentry&lt;/a&gt; community for &lt;a href="http://software-carpentry.org/blog/2016/05/looking-for-a-model.html"&gt;feedback&lt;/a&gt; on a collection of data about the organization’s instructors, when they were certified, and when they taught. Having dabbled in &lt;a href="https://en.wikipedia.org/wiki/Survival_analysis"&gt;survival analysis&lt;/a&gt;, I was excited to explore the data within that context.&lt;/p&gt;
&lt;p&gt;Survival analysis is focused on time-to-event data, for example time from birth until death, but also time to failure of engineered systems, or in this case, time from instructor certification to first teaching a workshop. The language is somewhat morbid, but helps with talking precisely about models that can easily be applied to a variety of data, only sometimes involving death or failure. The power of modern survival analysis is the ability to include results from subjects who …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Byron J. Smith</dc:creator><pubDate>Mon, 30 May 2016 12:00:00 -0400</pubDate><guid isPermaLink="false">tag:blog.byronjsmith.com,2016-05-30:/instructor-survival.html</guid><category>software-carpentry</category><category>python</category><category>statistics</category></item><item><title>Tutorial: Reproducible bioinformatics pipelines using GNU Make</title><link>http://blog.byronjsmith.com/make-analysis.html</link><description>&lt;p&gt;For most projects with moderate to intense data analysis you should consider using &lt;em&gt;Make&lt;/em&gt;. Some day I’ll write a post telling you why, but for now check out &lt;a href="http://zmjones.com/make/"&gt;this post&lt;/a&gt; by Zachary M. Jones&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;. If you’re already convinced, or just want to see what it’s all about, read on.&lt;/p&gt;
&lt;p&gt;This post is the clone of a tutorial that I wrote for Titus Brown’s week-long &lt;a href="https://dib-training.readthedocs.org/en/pub/2016-02-08-bodega.html"&gt;Bioinformatics Workshop&lt;/a&gt; at UC Davis’s Bodega Marine Laboratory in February, 2016. For now, the live tutorial lives in &lt;a href="https://github.com/bsmith89/make-bml"&gt;a Github repository&lt;/a&gt;, although I eventually want to merge all of the good parts into the Software Carpentry &lt;a href="https://swcarpentry.github.io/make-novice"&gt;Make lesson&lt;/a&gt; (&lt;a href="https://github.com/swcarpentry/make-novice"&gt;repository&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;I’m posting this tutorial because I think it’s a good introduction to the analysis pipeline approach I have been slowly adopting over the last several years. This approach is even more deeply enshrined in a &lt;a href="https://github.com/bsmith89/compbio-template"&gt;project template&lt;/a&gt; that I …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Byron J. Smith</dc:creator><pubDate>Fri, 04 Mar 2016 12:00:00 -0500</pubDate><guid isPermaLink="false">tag:blog.byronjsmith.com,2016-03-04:/make-analysis.html</guid><category>software-carpentry</category><category>teaching</category><category>programming</category><category>make</category><category>pipelines</category><category>bioinformatics</category><category>software</category></item><item><title>Not all carbs are bad</title><link>http://blog.byronjsmith.com/fiber-butyrate-life.html</link><description>&lt;p&gt;&lt;em&gt;This brief post was written as a popular science article for a class on science communication. My own research is currently focused on exactly this topic: describing microbial community dynamics associated with acarbose treatment and the production of butyrate.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A quick internet search search for “low-carb diets” comes back filled with promises to make you sleek, spry, and slim just by cutting out this entire category of foods. The popularity of these diets shouldn’t surprise you. Recent research has implicated overconsumption of sugars, the simplest form of carbohydrates, and starchy foods, which can quickly be broken down into sugars, in the increased risk of heart disease, obesity, even some forms of dementia. Americans have responded quickly, with 50% trying to limit their intake of sugars and carbohydrates according to a &lt;a href="food-survey"&gt;2014 survey&lt;/a&gt;. That same survey found only 74% of respondents believe that a healthy diet can include moderate amounts …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Byron J. Smith</dc:creator><pubDate>Tue, 27 Oct 2015 21:30:00 -0400</pubDate><guid isPermaLink="false">tag:blog.byronjsmith.com,2015-10-27:/fiber-butyrate-life.html</guid><category>longevity</category><category>microbiome</category><category>diet</category><category>popular science</category></item><item><title>First time teaching Python to novices</title><link>http://blog.byronjsmith.com/swc-python-lesson.html</link><description>&lt;p&gt;This July I co-instructed with &lt;a href="https://impactstory.org/JenniferShelton"&gt;Jennifer Shelton&lt;/a&gt; a Software Carpentry &lt;a href="http://i5k-kinbre-script-share.github.io/2015-07-23-stanford/"&gt;workshop&lt;/a&gt; at Stanford University, targeted to researchers with genomic or evolutionary datasets. Jennifer taught the shell (Bash) and version control with Git, while I taught the general programming language Python. I’ve been aware of the &lt;a href="http://software-carpentry.org/"&gt;organization&lt;/a&gt;, which teaches software development and computational methods to scientists, since attending a workshop in 2012. Since then I’ve served as a helper at one workshop (troubleshooting individual learner’s problems and helping catch them up with the rest of the class), and gone through the “accelerated”, two day, instructor training at Michigan State University. After the Stanford workshop, I took part in new-instructor debriefing on August 4th, during which I mentioned that I had to greatly pare down the community-written lesson plan, &lt;a href="http://swcarpentry.github.io/python-novice-inflammation/"&gt;python-novice-inflammation&lt;/a&gt;, to fit into the two half-day session we allotted it.&lt;/p&gt;
&lt;p&gt;Karin and Tiffany, who were running the debriefing, asked …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Byron J. Smith</dc:creator><pubDate>Wed, 12 Aug 2015 01:00:00 -0400</pubDate><guid isPermaLink="false">tag:blog.byronjsmith.com,2015-08-12:/swc-python-lesson.html</guid><category>software-carpentry</category><category>teaching</category><category>programming</category><category>mistakes</category><category>python</category></item><item><title>Do bacterial species exist?</title><link>http://blog.byronjsmith.com/microbial-species.html</link><description>&lt;p&gt;Any of my friends or colleagues who have had the “pleasure” of talking about science with me for more than a few hours know that I am prepared, at the drop of a hat, to rant extensively about several standing debates in biology which I consider merely semantic. For instance:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;: Are viruses alive?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: &lt;em&gt;Who CARES!?&lt;/em&gt; Viruses do what they do. Cellular organisms do something else. What difference does it make if we decide to allow our middle-schoolers to draw little dotted lines around animals, bacteria, &lt;em&gt;and&lt;/em&gt; viruses? And I don’t even want to &lt;em&gt;hear&lt;/em&gt; the word “prion”.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I have a similar level of disdain for people who try to decide on a single definition for “species”. Ultimately I am a pluralist: the definition should be tailored to the scientific question. Paleontologists, you have your morphological species concept, because what &lt;em&gt;else&lt;/em&gt; do stony fossils allow? Are you studying …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Byron J. Smith</dc:creator><pubDate>Tue, 06 Aug 2013 18:30:00 -0400</pubDate><guid isPermaLink="false">tag:blog.byronjsmith.com,2013-08-06:/microbial-species.html</guid><category>microbiology</category><category>species</category><category>semantics</category><category>rant</category></item><item><title>You, too, can host this website</title><link>http://blog.byronjsmith.com/fork-this-blog.html</link><description>&lt;p&gt;Loyal readers of this blog (of which I am sure there are exactly zero) might have noticed that things are looking a little different since yesterday. That’s because I’ve finally developed my own &lt;a href="http://getpelican.com"&gt;Pelican&lt;/a&gt; theme to the point that it’s functional, and not too embaressing to look at.&lt;/p&gt;
&lt;p&gt;It doesn’t appear &lt;em&gt;too&lt;/em&gt; different—it’s certainly still inspired by the &lt;a href="https://github.com/getpelican/pelican-themes/tree/master/notmyidea-cms"&gt;sample theme&lt;/a&gt;—but now I understand 95% of the code, instead of 5%. My goal was to simplify the template files and css to the point that I could customize just about anything with a minimum of work. I also attempted to maintain compatability with all of the configuration options supported by the default theme.&lt;/p&gt;
&lt;p&gt;Not that I know why you would want to, but you can read and copy the &lt;a href="https://github.com/bsmith89/blog"&gt;content and configuration files&lt;/a&gt; on Github. The &lt;a href="https://github.com/bsmith89/blog-theme"&gt;theme source code&lt;/a&gt; is there as well.&lt;/p&gt;
&lt;p&gt;By …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Byron J. Smith</dc:creator><pubDate>Sat, 13 Jul 2013 17:00:00 -0400</pubDate><guid isPermaLink="false">tag:blog.byronjsmith.com,2013-07-13:/fork-this-blog.html</guid><category>open-source</category><category>meta</category><category>pelican</category><category>website</category><category>blog</category></item><item><title>Even pathogens hate a cheater</title><link>http://blog.byronjsmith.com/the-enemy-of-my-enemy.html</link><description>&lt;p&gt;&lt;em&gt;I would like to apologize for the long delay since my last post. The excuse (I keep telling myself) is that, having already written too many computational articles, it was time to prove that I could write about biology too. Unfortunately I’m not nearly as good at reading the literature as I should be. Anyway, it’s done. You can stop complaining now.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;One barrier to engineering bacteria for biofuel production or any other human endeavor is that evolutionary rates are scaled by population sizes and growth rates. For an organism with massive population sizes (trillions of individuals or more) and doubling times on the order of hours, evolution can occur quite quickly. Genetic variants within the population which are capable of growing faster will quickly take over. For an organism which is, for example, wasting a huge fraction of its energy producing your future gasoline, you can bet …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Byron J. Smith</dc:creator><pubDate>Wed, 19 Jun 2013 12:00:00 -0400</pubDate><guid isPermaLink="false">tag:blog.byronjsmith.com,2013-06-19:/the-enemy-of-my-enemy.html</guid><category>microbiology</category><category>cheaters</category><category>evolution</category><category>pathogens</category></item><item><title>Compiling SciPy on RHEL6</title><link>http://blog.byronjsmith.com/scipy-on-rhel.html</link><description>&lt;p&gt;Within the past two years I’ve discovered something interesting about myself (…actually really, &lt;em&gt;really&lt;/em&gt; boring about myself): I can be happily entertained for hours on end setting up my computational environment &lt;em&gt;just&lt;/em&gt; right. I find that it gives me a similar type of satisfaction to cataloguing my music collection. I guess you could call it a hobby.&lt;/p&gt;
&lt;p&gt;Usually this entails installing the usual suspects (&lt;code&gt;NumPy&lt;/code&gt;, &lt;code&gt;Pandas&lt;/code&gt;, &lt;code&gt;IPython&lt;/code&gt;, &lt;code&gt;matplotlib&lt;/code&gt;, etc.) in a python &lt;a href="http://www.virtualenv.org/en/latest/"&gt;virtual environment&lt;/a&gt;. When I’m particularly into it (which is always), I’ll also compile the python distribution itself. I’ve had several opportunities to indulge this pasttime, most recently in setting up my research pipeline on the &lt;a href="http://cac.engin.umich.edu/resources/systems/flux"&gt;Flux&lt;/a&gt; high-performance compute cluster at The University of Michigan.&lt;/p&gt;
&lt;p&gt;Installing &lt;code&gt;NumPy&lt;/code&gt; is usually no trouble at all, but for some reason (if you know, please tell me), &lt;code&gt;SciPy&lt;/code&gt; has &lt;em&gt;always&lt;/em&gt; given me a “BlasNotFoundError” when installing on the Red …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Byron J. Smith</dc:creator><pubDate>Mon, 20 May 2013 12:00:00 -0400</pubDate><guid isPermaLink="false">tag:blog.byronjsmith.com,2013-05-20:/scipy-on-rhel.html</guid><category>python</category><category>hpc</category><category>software</category><category>scipy</category><category>linux</category></item><item><title>PyMake I: Another GNU Make clone</title><link>http://blog.byronjsmith.com/pymake-0.html</link><description>&lt;p&gt;(Edit 1): &lt;del&gt;&lt;em&gt;This is the first of two posts about my program &lt;a href="http://github.com/bsmith89/pymake/"&gt;PyMake&lt;/a&gt;. I’ll post the link to Part II here when I’ve written it.&lt;/em&gt;&lt;/del&gt; &lt;em&gt;While I still agree with some of the many of the views expressed in this piece, I have changed my thinking on Makefiles.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;(Edit 2): &lt;del&gt;&lt;em&gt;I’ll post a new post about the topic when I take the time to write it.&lt;/em&gt;&lt;/del&gt; &lt;em&gt;I’ve written a &lt;a href="http://blog.byronjsmith.com/make-analysis.html"&gt;tutorial&lt;/a&gt; on using &lt;em&gt;Make&lt;/em&gt; for reproducible data analysis&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I am an aspiring but unskilled (not yet skilled?) computer geek. You can observe this for yourself by watching me fumble my way through &lt;a href="https://github.com/bsmith89/dotfiles"&gt;&lt;code&gt;vim&lt;/code&gt; configuration&lt;/a&gt;, multi-threading/processing in Python, and &lt;code&gt;git&lt;/code&gt; merges.&lt;/p&gt;
&lt;p&gt;Rarely do I actually feel like my products are worth sharing with the wider world. The only reason I have a GitHub account is personal convenience and absolute confidence that no one else will ever look …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Byron J. Smith</dc:creator><pubDate>Tue, 07 May 2013 19:00:00 -0400</pubDate><guid isPermaLink="false">tag:blog.byronjsmith.com,2013-05-07:/pymake-0.html</guid><category>python</category><category>software</category><category>development</category><category>make</category><category>pipelines</category><category>bioinformatics</category></item><item><title>Hello World!</title><link>http://blog.byronjsmith.com/initial-commit.html</link><description>&lt;p&gt;Hi.&lt;/p&gt;
&lt;p&gt;This is mostly a test post and a chance to get some real content on my brand-new blog.&lt;/p&gt;
&lt;p&gt;Inspired by &lt;a href="http://ivory.idyll.org/blog/advice-to-graduate-students.html"&gt;C. Titus Brown&lt;/a&gt;’s tireless pressure to make more graduate student clones of himself—and the fact that a pretty damn good domain name was still available—I started this website/blog over the weekend.&lt;/p&gt;
&lt;p&gt;I hope that it will turn into a place for me to share my excitement and views on microbiology, microbial ecology, mathematical ecology, bioinformatics, python, (very) amateur software development, etc. But I will be satisfied if it turns out to just be writing practice. Heaven knows I need that.&lt;/p&gt;
&lt;p&gt;In case you’re curious, setup took me about 3 hours (plus some waiting for DNS updates). Largely, this is because I’m shamelessly mirroring Titus’s well trafficked blog by using a nifty python application called &lt;a href="http://getpelican.com"&gt;Pelican&lt;/a&gt;. And at $15/year for the domain …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Byron J. Smith</dc:creator><pubDate>Sun, 05 May 2013 22:00:00 -0400</pubDate><guid isPermaLink="false">tag:blog.byronjsmith.com,2013-05-05:/initial-commit.html</guid><category>meta</category><category>pelican</category><category>website</category><category>hosting</category><category>blog</category></item></channel></rss>