<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Deep Ecology</title><link href="http://bsmith89.github.io/blog/" rel="alternate"></link><link href="http://bsmith89.github.io/blog/feeds/tag/python.atom.xml" rel="self"></link><id>http://bsmith89.github.io/blog/</id><updated>2015-07-15T08:00:00-04:00</updated><entry><title>Compiling SciPy on RHEL6</title><link href="http://bsmith89.github.io/blog/scipy-on-rhel.html" rel="alternate"></link><updated>2013-05-20T12:00:00-04:00</updated><author><name>Byron J. Smith</name></author><id>tag:bsmith89.github.io,2013-05-20:blog/scipy-on-rhel.html</id><summary type="html">&lt;p&gt;Within the past two years I've discovered something interesting about myself (...actually really, &lt;em&gt;really&lt;/em&gt; boring about myself): I can be happily entertained for hours on end setting up my computational environment &lt;em&gt;just&lt;/em&gt; right. I find that it gives me a similar type of satisfaction to cataloguing my music collection. I guess you could call it a hobby.&lt;/p&gt;
&lt;p&gt;Usually this entails installing the usual suspects (&lt;code&gt;NumPy&lt;/code&gt;, &lt;code&gt;Pandas&lt;/code&gt;, &lt;code&gt;IPython&lt;/code&gt;, &lt;code&gt;matplotlib&lt;/code&gt;, etc.) in a python &lt;a href="http://www.virtualenv.org/en/latest/"&gt;virtual environment&lt;/a&gt;. When I'm particularly into it (which is always), I'll also compile the python distribution itself. I've had several opportunities to indulge this pasttime, most recently in setting up my research pipeline on the &lt;a href="http://cac.engin.umich.edu/resources/systems/flux"&gt;Flux&lt;/a&gt; high-performance compute cluster at The University of Michigan.&lt;/p&gt;
&lt;p&gt;Installing &lt;code&gt;NumPy&lt;/code&gt; is usually no trouble at all, but for some reason (if you know, please tell me), &lt;code&gt;SciPy&lt;/code&gt; has &lt;em&gt;always&lt;/em&gt; given me a &amp;quot;BlasNotFoundError&amp;quot; when installing on the Red Hat Enterprise Linux distros commonly used on academic clusters.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt; pip install scipy
&lt;span class="go"&gt;Downloading/unpacking scipy&lt;/span&gt;
&lt;span class="go"&gt;  Downloading scipy-0.12.0.zip (10.2MB): 100% 10.2MB downloaded&lt;/span&gt;
&lt;span class="go"&gt;...&lt;/span&gt;
&lt;span class="go"&gt;numpy.distutils.system_info.BlasNotFoundError:&lt;/span&gt;
&lt;span class="go"&gt;    Blas (http://www.netlib.org/blas/) libraries not found.&lt;/span&gt;
&lt;span class="go"&gt;    Directories to search for the libraries can be specified in the&lt;/span&gt;
&lt;span class="go"&gt;    numpy/distutils/site.cfg file (section [blas]) or by setting&lt;/span&gt;
&lt;span class="go"&gt;    the BLAS environment variable.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I &lt;em&gt;know&lt;/em&gt; BLAS and LAPACK are installed as shared libraries: at Michigan State University I had to load the respective modules, but at UMich they're right there in &lt;code&gt;/usr/lib64/atlas&lt;/code&gt;. So why &lt;code&gt;pip install SciPy&lt;/code&gt; always gives me that error, I have no clue. I've set the BLAS and LAPACK environmental variables to the relevant shared libraries. I've run &lt;code&gt;python setup.py build --fcompiler=gnu95&lt;/code&gt; directly. But I always got that same error.&lt;/p&gt;
&lt;p&gt;Anyway, I &lt;em&gt;finally&lt;/em&gt; got it to work, so I thought I'd share the steps I took just in case it helps someone else. My solution was found on Stack Overflow (surprise, surprise): The accepted answer to &lt;a href="http://stackoverflow.com/q/7496547/848121"&gt;this&lt;/a&gt; question.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir -p ~/.local/src/
&lt;span class="nb"&gt;cd&lt;/span&gt; ~/.local/src/
wget -O BLAS.tgz http://www.netlib.org/blas/blas.tgz
tar -xzf BLAS.tgz
&lt;span class="nb"&gt;cd &lt;/span&gt;BLAS
gfortran -O3 -std&lt;span class="o"&gt;=&lt;/span&gt;legacy -m64 -fno-second-underscore -fPIC -c *.f
ar r libfblas.a *.o
ranlib libfblas.a
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;BLAS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$PWD&lt;/span&gt;/libfblas.a

&lt;span class="nb"&gt;cd&lt;/span&gt; ~/.local/src/
wget -O LAPACK.tgz http://www.netlib.org/lapack/lapack.tgz
tar -xzf LAPACK.tgz
&lt;span class="c"&gt;# The resulting directory may be named lapack-&amp;lt;version&amp;gt;/&lt;/span&gt;
&lt;span class="c"&gt;# the following assumes that it&amp;#39;s named LAPACK/&lt;/span&gt;
&lt;span class="nb"&gt;cd &lt;/span&gt;LAPACK
cp INSTALL/make.inc.gfortran make.inc
vim make.inc
&lt;span class="c"&gt;# Change OPTS = -O2 to OPTS = -O2 -fPIC&lt;/span&gt;
&lt;span class="c"&gt;# Change NOOPT = -O0 to NOOPT = -O0 -fPIC&lt;/span&gt;
make lapacklib
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;LAPACK&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$PWD&lt;/span&gt;/libflapack.a

&lt;span class="nb"&gt;cd&lt;/span&gt; ~/.local/src/
git clone https://github.com/scipy/scipy.git
&lt;span class="nb"&gt;cd &lt;/span&gt;scipy
python setup.py build --fcompiler gnu95
python setup.py install
&lt;span class="c"&gt;# Assuming you&amp;#39;re already in the virtualenv you want to install to.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I don't know which other systems this will work on, but it does successfully install SciPy for me. On Python 3.3.2, running the unit tests give me several errors and failures (nothing too scary looking), but everything passes on Python 2.7.5!&lt;/p&gt;
&lt;p&gt;Enjoy.&lt;/p&gt;
</summary><category term="python"></category><category term="hpc"></category><category term="software"></category><category term="scipy"></category><category term="linux"></category></entry><entry><title>PyMake I: Another GNU Make Clone</title><link href="http://bsmith89.github.io/blog/pymake-0.html" rel="alternate"></link><updated>2015-07-15T08:00:00-04:00</updated><author><name>Byron J. Smith</name></author><id>tag:bsmith89.github.io,2013-05-07:blog/pymake-0.html</id><summary type="html">&lt;p&gt;&lt;del&gt;&lt;em&gt;This is the first of two posts about my program &lt;a href="http://github.com/bsmith89/pymake/"&gt;PyMake&lt;/a&gt;. I'll post the link to Part II here when I've written it.&lt;/em&gt;&lt;/del&gt; &lt;em&gt;While I still agree with some of the many of the views expressed in this piece, I have changed my thinking on Makefiles. I'll post a new post about the topic when I take the time to write it.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I am an aspiring but unskilled (not yet skilled?) computer geek. You can observe this for yourself by watching me fumble my way through &lt;a href="https://github.com/bsmith89/dotfiles"&gt;&lt;code&gt;vim&lt;/code&gt; configuration&lt;/a&gt;, multi-threading/processing in Python, and &lt;code&gt;git&lt;/code&gt; merges.&lt;/p&gt;
&lt;p&gt;Rarely do I actually feel like my products are worth sharing with the wider world. The only reason I have a GitHub account is personal convenience and absolute confidence that no one else will ever look at it besides me. (Yes, I realize that I am invalidating the previous sentence with that glaring &amp;quot;Fork me on GitHub&amp;quot; ribbon in the top-right corner of this page. I'm putting myself out there! OKAY?!)&lt;/p&gt;
&lt;p&gt;As an aspiring scientist, too, I've had plenty of opportunities to practice the relevant skill sets. A laboratory rotation with &lt;a href="http://ivory.idyll.org/blog/"&gt;Titus Brown&lt;/a&gt;, and the resulting exposure to his reproducible research and &lt;a href="http://software-carpentry.org"&gt;Software Carpentry&lt;/a&gt; evangelizing, has certainly influenced the tools and techniques in my belt.&lt;/p&gt;
&lt;p&gt;I try to use the &lt;code&gt;NumPy&lt;/code&gt;/&lt;code&gt;SciPy&lt;/code&gt;/&lt;code&gt;Pandas&lt;/code&gt;/&lt;code&gt;matplotlib&lt;/code&gt; stack for my computational and visualization tasks. I am a relatively competent &lt;code&gt;BASH&lt;/code&gt;-ist and I work hard to write my scripts so that they'll make sense to me 5 years from now. I have even been known to do some of my data analysis in IPython notebooks.&lt;/p&gt;
&lt;h1 id="a-pipeline-is-only-sometimes-a-makefile"&gt;A Pipeline is only sometimes a Makefile&lt;/h1&gt;
&lt;p&gt;Despite (or maybe because of) my obsession with writing simple, reproducible pipelines, one tool I have never come to terms with is GNU &lt;code&gt;make&lt;/code&gt;. While it's not quite mainstream for bioinformaticians and other computational folk, &lt;code&gt;make&lt;/code&gt; &lt;a href="http://archive.nodalpoint.org/2007/03/18/a_pipeline_is_a_makefile"&gt;promises&lt;/a&gt; to tie all those *&lt;code&gt;NIX&lt;/code&gt; style scripts together seamlessly and with built-in parallelization, selective re-running, and more, all under a declarative language syntax. I say 'promises' because, for me, it never did any of those things.&lt;/p&gt;
&lt;p&gt;Now, I don't want to suggest that this ubiquitous piece of GNU software doesn't work well. I recognize that it does much of what the average user needs, but for my particular pipeline it just wasn't the right tool.&lt;/p&gt;
&lt;p&gt;My problem was a seemingly simple one. I had a set of gene models (HMMs) and a set of FASTQ formatted sequences from an Illumina sequencer. The goal was to search every sample for every gene using HMMER3 and to output the results (plus a respectable amount of pre- and post-processing). The problem is, &lt;code&gt;make&lt;/code&gt; is designed for software compilation. Processing &lt;code&gt;foo.c&lt;/code&gt; and &lt;code&gt;bar.h&lt;/code&gt; into &lt;code&gt;foo.o&lt;/code&gt; is easy. I, however, was asking &lt;code&gt;make&lt;/code&gt; to generate the product of &lt;span class="math inline"&gt;&lt;em&gt;n&lt;/em&gt;&lt;/span&gt; samples and &lt;span class="math inline"&gt;&lt;em&gt;m&lt;/em&gt;&lt;/span&gt; models (&lt;strong&gt;complete aside&lt;/strong&gt;: if you're curious about how I got the &lt;span class="math inline"&gt;$\LaTeX$&lt;/span&gt; formatting, see &lt;a href="http://www.ceremade.dauphine.fr/~amic/blog/mathjax-and-pelican-en.html"&gt;this&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;While, after a dozen hours of smashing my head against the table, I was able to get my &lt;code&gt;Makefile&lt;/code&gt; to work, it required some &lt;em&gt;really&lt;/em&gt; ugly tricks like secondary expansion and gratuitous calls to &lt;code&gt;sed&lt;/code&gt; in my macros (for others with similar problems see &lt;a href="http://stackoverflow.com/q/3745177/848121"&gt;here&lt;/a&gt;, and &lt;a href="http://stackoverflow.com/q/2880975/848121"&gt;here&lt;/a&gt;). Plus, debugging &lt;code&gt;make&lt;/code&gt; is torture, surely against the Geneva Conventions.&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;wanted&lt;/em&gt; to use &lt;code&gt;make&lt;/code&gt;, I swear I did. It's open source, well used, extensively tested, available on all relevant systems, etc. And I probably could have... but only by keeping the ugly hack or hard-coding the recipe for each model, and that just didn't jive with my recently acquired simple/reproducible mentality. Converts always are the most zealous, afterall.&lt;/p&gt;
&lt;h1 id="they-say-graduate-school-is-a-time-to-explore"&gt;They say graduate school is a time to explore&lt;/h1&gt;
&lt;p&gt;So what did I do? No, I didn't immediately start writing a make replacement with all of the features I wanted like some over-eager graduate student. Jeeze! What do you people think of me!? First I checked out the &lt;a href="http://freecode.com/articles/make-alternatives"&gt;extant alternatives&lt;/a&gt;... I hated everything. So &lt;em&gt;then&lt;/em&gt; I started writing a make replacement with all of the features I wanted.&lt;/p&gt;
&lt;p&gt;The result was one of the first pieces of general purpose software to come off my laptop which I wouldn't be entirely ashamed to show to an experienced programmer. It's rough, don't get me wrong, but it does everything I need and is actually kinda pretty internally. Well, at least it was before I fixed some glaring problems. Whatever. The point is I want to share &lt;a href="https://github.com/bsmith89/pymake"&gt;it&lt;/a&gt; with the world; what better stage exists for its introduction than this blog, which absolutely no one reads?&lt;/p&gt;
&lt;p&gt;...Yeah, I'll probably post it to &lt;a href="http://reddit.com/r/python"&gt;/r/python&lt;/a&gt; too.&lt;/p&gt;
&lt;p&gt;Tune in for Part II, in which I explain why &lt;em&gt;you&lt;/em&gt; should use my software.&lt;/p&gt;
</summary><category term="python"></category><category term="software"></category><category term="development"></category><category term="make"></category><category term="pipelines"></category><category term="bioinformatics"></category></entry></feed>