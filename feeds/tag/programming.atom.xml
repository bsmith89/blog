<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Deep Ecology</title><link href="http://bsmith89.github.io/blog/" rel="alternate"></link><link href="http://bsmith89.github.io/blog/feeds/tag/programming.atom.xml" rel="self"></link><id>http://bsmith89.github.io/blog/</id><updated>2016-03-05T10:00:00-05:00</updated><entry><title>Tutorial: Reproducible bioinformatics pipelines using GNU Make</title><link href="http://bsmith89.github.io/blog/make-analysis.html" rel="alternate"></link><updated>2016-03-05T10:00:00-05:00</updated><author><name>Byron J. Smith</name></author><id>tag:bsmith89.github.io,2016-03-04:blog/make-analysis.html</id><summary type="html">&lt;p&gt;For most projects with moderate to intense data analysis you should consider using &lt;em&gt;Make&lt;/em&gt;. Some day I'll write a post telling you why, but for now check out &lt;a href="http://zmjones.com/make/"&gt;this post&lt;/a&gt; by Zachary M. Jones&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;. If you're already convinced, or just want to see what it's all about, read on.&lt;/p&gt;
&lt;p&gt;This post is the clone of a tutorial that I wrote for Titus Brown's week-long &lt;a href="https://dib-training.readthedocs.org/en/pub/2016-02-08-bodega.html"&gt;Bioinformatics Workshop&lt;/a&gt; at UC Davis's Bodega Marine Laboratory in February, 2016. For now, the live tutorial lives in &lt;a href="https://github.com/bsmith89/make-bml"&gt;a Github repository&lt;/a&gt;, although I eventually want to merge all of the good parts into the Software Carpentry &lt;a href="https://swcarpentry.github.io/make-novice"&gt;Make lesson&lt;/a&gt; (&lt;a href="https://github.com/swcarpentry/make-novice"&gt;repository&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;I'm posting this tutorial because I think it's a good introduction to the analysis pipeline approach I have been slowly adopting over the last several years. This approach is even more deeply enshrined in a &lt;a href="https://github.com/bsmith89/compbio-template"&gt;project template&lt;/a&gt; that I have been developing. You can think of this tutorial as a gentle introduction to the motivation for that template.&lt;/p&gt;
&lt;p&gt;The goals of this tutorial are three-fold:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Teach GNU Make basics,&lt;/li&gt;
&lt;li&gt;Demonstrate the use of general best-practices (version control, README's, etc.), and&lt;/li&gt;
&lt;li&gt;Describe my preferred way to organize projects.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While much of the material is original, it was heavily inspired by the &lt;a href="https://swcarpentry.github.io/make-novice"&gt;Software Carpentry Make lesson&lt;/a&gt; which is licensed &lt;a href="https://creativecommons.org/licenses/by/4.0/legalcode"&gt;CC-BY 4.0.&lt;/a&gt;, and the example project is almost identical.&lt;/p&gt;
&lt;p&gt;And it is divided into five sections:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;a href="#setup"&gt;Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#motivation"&gt;Motivation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#makefile-basics"&gt;Makefile basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#make-features"&gt;&lt;em&gt;Make&lt;/em&gt; features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#best-practices-for-make-based-projects"&gt;Best practices for &lt;em&gt;Make&lt;/em&gt;-based projects&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="setup"&gt;Setup&lt;/h1&gt;
&lt;p&gt;(Estimated time: 15 Minutes)&lt;/p&gt;
&lt;p&gt;This tutorial was designed for UNIX systems and has been tested on Amazon EC2 using the Ubuntu Server 14.04 LTS image and a &amp;quot;m3.medium&amp;quot; instance. If you would like to use Windows, Git-Bash (packaged with Git for Windows) is probably your best bet, although it has not been tested on that platform.&lt;/p&gt;
&lt;p&gt;For this lesson we will be using an already prepared set of files.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;curl https://codeload.github.com/bsmith89/make-example/tar.gz/v1.0-snap &lt;span class="se"&gt;\&lt;/span&gt;
    &amp;gt; make-example-1.0-snap.tgz
tar -xzf make-example-1.0-snap.tgz
&lt;span class="nb"&gt;cd &lt;/span&gt;make-example-1.0-snap
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let's take a look at the files we will be working with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get update
sudo apt-get install tree
tree
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;tree&lt;/code&gt; command produces a handy tree-diagram of the directory.&lt;/p&gt;
&lt;div class ="highlight"&gt;&lt;pre&gt;.
├── books
│   ├── abyss.txt
│   ├── isles.txt
│   ├── last.txt
│   ├── LICENSE_TEXTS.md
│   └── sierra.txt
├── LICENSE.md
├── matplotlibrc
├── plotcount.py
├── README.md
└── wordcount.py

1 directory, 10 files&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Be sure that you also have &lt;em&gt;Python 3&lt;/em&gt;, &lt;em&gt;Git&lt;/em&gt;, and &lt;em&gt;GNU Make&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install python3 git make
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Configure git.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git config --global user.name &lt;span class="s2"&gt;&amp;quot;Your Name&amp;quot;&lt;/span&gt;
git config --global user.email you@example.com
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Install matplotlib.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install python3-matplotlib
&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id="motivation"&gt;Motivation&lt;/h1&gt;
&lt;p&gt;(Estimated time: 30 minutes)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The most frequently-occurring word occurs approximately twice as often as the second most frequent word. This is &lt;a href="http://en.wikipedia.org/wiki/Zipf%27s_law"&gt;Zipf's Law&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let's imagine that instead of computational biology we're interested in testing Zipf's law in some of our favorite books. We've compiled our raw data, the books we want to analyze (check out &lt;code&gt;head books/isles.txt&lt;/code&gt;) and have prepared several Python scripts that together make up our analysis pipeline.&lt;/p&gt;
&lt;p&gt;Before we begin, add a README to your project describing what we intend to do.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;nano README.md
&lt;span class="c"&gt;# Describe what you&amp;#39;re going to do. (e.g. &amp;quot;Test Zipf&amp;#39;s Law&amp;quot;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first step is to count the frequency of each word in the book.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./wordcount.py books/isles.txt isles.dat
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(The leading '&lt;code&gt;./&lt;/code&gt;' is required so that Bash knows we're executing a file in the current directory rather than a command in our path.)&lt;/p&gt;
&lt;p&gt;Let's take a quick peek at the result.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;head -5 isles.dat
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;shows us the top 5 lines in the output file:&lt;/p&gt;
&lt;div class ="highlight"&gt;&lt;pre&gt;the	3822	6.7371760973
of	2460	4.33632998414
and	1723	3.03719372466
to	1479	2.60708619778
a	1308	2.30565838181&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each row shows the word itself, the number of occurrences of that word, and the number of occurrences as a percentage of the total number of words in the text file.&lt;/p&gt;
&lt;p&gt;We can do the same thing for a different book:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./wordcount.py books/abyss.txt abyss.dat
head -5 abyss.dat
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, let's visualize the results.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./plotcount.py isles.dat ascii
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;ascii&lt;/code&gt; argument has been added so that we get a text-based bar-plot printed to the screen.&lt;/p&gt;
&lt;p&gt;The script is also able to render a graphical bar-plot using matplotlib and save the figure to a given file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./plotcount.py isles.dat isles.png
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Together these scripts implement a common workflow:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Read a data file.&lt;/li&gt;
&lt;li&gt;Perform an analysis on this data file.&lt;/li&gt;
&lt;li&gt;Write the analysis results to a new file.&lt;/li&gt;
&lt;li&gt;Plot a graph of the analysis results.&lt;/li&gt;
&lt;li&gt;Save the graph as an image, so we can put it in a paper.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="writing-a-master-script"&gt;Writing a &amp;quot;master&amp;quot; script&lt;/h2&gt;
&lt;p&gt;Running this pipeline for one book is pretty easy using the command-line. But once the number of files and the number of steps in the pipeline expands, this can turn into a lot of work. Plus, no one wants to sit and wait for a command to finish, even just for 30 seconds.&lt;/p&gt;
&lt;p&gt;The most common solution to the tedium of data processing is to write a master script that runs the whole pipeline from start to finish.&lt;/p&gt;
&lt;p&gt;We can make a new file, &lt;code&gt;run_pipeline.sh&lt;/code&gt; that contains:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;span class="c"&gt;# USAGE: bash run_pipeline.sh&lt;/span&gt;
&lt;span class="c"&gt;# to produce plots for isles and abyss.&lt;/span&gt;

./wordcount.py isles.txt isles.dat
./wordcount.py abyss.txt abyss.dat

./plotcount.py isles.dat isles.png
./plotcount.py abyss.dat abyss.png

&lt;span class="c"&gt;# Now archive the results in a tarball so we can share them with a colleague.&lt;/span&gt;
rm -rf zipf_results
mkdir zipf_results
mv isles.dat abyss.dat isles.png abyss.png zipf_results/
tar -czf zipf_results.tgz zipf_results
rm -r zipf_results
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This master script solved several problems in computational reproducibility:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;It explicitly documents our pipeline, making communication with colleagues (and our future selves) more efficient.&lt;/li&gt;
&lt;li&gt;It allows us to type a single command, &lt;code&gt;bash run_pipeline.sh&lt;/code&gt;, to reproduce the full analysis.&lt;/li&gt;
&lt;li&gt;It prevents us from &lt;em&gt;repeating&lt;/em&gt; typos or mistakes. You might not get it right the first time, but once you fix something it'll (probably) stay that way.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To continue with the Good Ideas, let's put everything under version control.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git init
git add README.md
git commit -m &lt;span class="s2"&gt;&amp;quot;Starting a new project.&amp;quot;&lt;/span&gt;
git add wordcount.py plotcount.py matplotlibrc
git commit -m &lt;span class="s2"&gt;&amp;quot;Write scripts to test Zipf&amp;#39;s law.&amp;quot;&lt;/span&gt;
git add run_pipeline.sh
git commit -m &lt;span class="s2"&gt;&amp;quot;Write a master script to run the pipeline.&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice that we didn't version control any of the products of our analysis. We'll talk more about this at the end of the tutorial.&lt;/p&gt;
&lt;p&gt;A master script is a good start, but it has a few shortcomings.&lt;/p&gt;
&lt;p&gt;Let's imagine that we adjusted the width of the bars in our plot produced by &lt;code&gt;plotcount.py&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;nano plotcount.py
&lt;span class="c"&gt;# In the definition of plot_word_counts replace:&lt;/span&gt;
&lt;span class="c"&gt;#    width = 1.0&lt;/span&gt;
&lt;span class="c"&gt;# with:&lt;/span&gt;
&lt;span class="c"&gt;#    width = 0.8&lt;/span&gt;
git add plotcount.py
git commit -m &lt;span class="s2"&gt;&amp;quot;Fix the bar width.&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we want to recreate our figures. We &lt;em&gt;could&lt;/em&gt; just &lt;code&gt;bash run_pipeline.sh&lt;/code&gt; again. That would work, but it could also be a big pain if counting words takes more than a few seconds. The word counting routine hasn't changed; we shouldn't need to recreate those files.&lt;/p&gt;
&lt;p&gt;Alternatively, we could manually rerun the plotting for each word-count file and recreate the tarball.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; file in *.dat&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    ./plotcount.py &lt;span class="nv"&gt;$file&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="p"&gt;/.dat/.png&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;

rm -rf zipf_results
mkdir zipf_results
mv isles.dat abyss.dat isles.png abyss.png zipf_results/
tar -czf zipf_results.tgz zipf_results
rm -r zipf_results
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But then we don't get many of the benefits of having a master script in the first place.&lt;/p&gt;
&lt;p&gt;Another popular option is to comment out a subset of the lines in &lt;code&gt;run_pipeline.sh&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;span class="c"&gt;# USAGE: bash run_pipeline.sh&lt;/span&gt;
&lt;span class="c"&gt;# to produce plots for isles and abyss.&lt;/span&gt;

&lt;span class="c"&gt;# These lines are commented out because they don&amp;#39;t need to be rerun.&lt;/span&gt;
&lt;span class="c"&gt;#./wordcount.py isles.txt isles.dat&lt;/span&gt;
&lt;span class="c"&gt;#./wordcount.py abyss.txt abyss.dat&lt;/span&gt;

./plotcount.py isles.dat isles.png
./plotcount.py abyss.dat abyss.png

&lt;span class="c"&gt;# Now archive the results in a tarball so we can share them with a colleague.&lt;/span&gt;
rm -rf zipf_results
mkdir zipf_results
mv isles.dat abyss.dat isles.png abyss.png zipf_results/
tar -czf zipf_results.tgz zipf_results
rm -r zipf_results
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Followed by &lt;code&gt;bash run_pipeline.sh&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But this process, and subsequently undoing it, can be a hassle and source of errors in complicated pipelines.&lt;/p&gt;
&lt;p&gt;What we really want is an executable &lt;em&gt;description&lt;/em&gt; of our pipeline that allows software to do the tricky part for us: figuring out what steps need to be rerun. It would also be nice if this tool encourage a &lt;em&gt;modular&lt;/em&gt; analysis and reusing instead of rewriting parts of our pipeline. As an added benefit, we'd like it all to play nice with the other mainstays of reproducible research: version control, Unix-style tools, and a variety of scripting languages.&lt;/p&gt;
&lt;h1 id="makefile-basics"&gt;Makefile basics&lt;/h1&gt;
&lt;p&gt;(Estimated time: 45 minutes)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Make&lt;/em&gt; is a computer program originally designed to automate the compilation and installation of software. &lt;em&gt;Make&lt;/em&gt; automates the process of building target files through a series of discrete steps. Despite it's original purpose, this design makes it a great fit for bioinformatics pipelines, which often work by transforming data from one form to another (e.g. &lt;em&gt;raw data&lt;/em&gt; → &lt;em&gt;word counts&lt;/em&gt; → &lt;em&gt;???&lt;/em&gt; → &lt;em&gt;profit&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;For this tutorial we will be using an implementation of &lt;em&gt;Make&lt;/em&gt; called &lt;em&gt;GNU Make&lt;/em&gt;, although others exist.&lt;/p&gt;
&lt;h2 id="a-simple-makefile"&gt;A simple Makefile&lt;/h2&gt;
&lt;p&gt;Let's get started writing a description of our analysis for &lt;em&gt;Make&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Open up a file called &lt;code&gt;Makefile&lt;/code&gt; in your editor of choice (e.g. &lt;code&gt;nano Makefile&lt;/code&gt;) and add the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;isles.dat&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;/&lt;span class="n"&gt;isles&lt;/span&gt;.&lt;span class="n"&gt;txt&lt;/span&gt;
	./wordcount.py books/isles.txt isles.dat
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We have now written the simplest, non-trivial Makefile&lt;a href="#fn2" class="footnoteRef" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;. It is pretty reminiscent of one of the lines from our master script. It is a good bet that you can figure out what this Makefile does.&lt;/p&gt;
&lt;p&gt;Be sure to notice a few syntactical items.&lt;/p&gt;
&lt;p&gt;The part before the colon is called the &lt;strong&gt;target&lt;/strong&gt; and the part after is our list of &lt;strong&gt;prerequisites&lt;/strong&gt; (there is just one in this case). This first line is followed by an indented section called the &lt;strong&gt;recipe&lt;/strong&gt;. The whole thing is together called a &lt;strong&gt;rule&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Notice that the indent is &lt;em&gt;not&lt;/em&gt; multiple spaces, but is instead a single tab character. This is the first gotcha in makefiles. If the difference between spaces and a tab character isn't obvious in your editor of choice, try moving your cursor from one side of the tab to the other. It should &lt;em&gt;jump&lt;/em&gt; four or more spaces. If your recipe is not indented with a tab character it is likely to not work.&lt;/p&gt;
&lt;p&gt;Notice that this recipe is exactly the same as the analogous step in our master shell script. This is no coincidence; &lt;em&gt;Make&lt;/em&gt; recipes &lt;em&gt;are&lt;/em&gt; shell scripts. The first line (&lt;em&gt;target&lt;/em&gt;: &lt;em&gt;prerequisites&lt;/em&gt;) explicitly declares two details that were implicit in our pipeline script:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;We are generating a file called &lt;code&gt;isles.dat&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Creating this file requires &lt;code&gt;books/isles.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We'll think about our pipeline as a network of files that are dependent on one another. Right now our Makefile describes a pretty simple &lt;strong&gt;dependency graph&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;books/isles.txt&lt;/code&gt; → &lt;code&gt;isles.dat&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;where the &amp;quot;→&amp;quot; is pointing from requirements to targets.&lt;/p&gt;
&lt;p&gt;Don't forget to commit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git add Makefile
git commit -m &lt;span class="s2"&gt;&amp;quot;Start converting master script into a Makefile.&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="running-make"&gt;Running &lt;em&gt;Make&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Now that we have a (currently incomplete) description of our pipeline, let's use &lt;em&gt;Make&lt;/em&gt; to execute it.&lt;/p&gt;
&lt;p&gt;First, remove the previously generated files.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;rm *.dat *.png
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;make isles.dat
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You should see the following print to the terminal:&lt;/p&gt;
&lt;div class ="highlight"&gt;&lt;pre&gt;./wordcount.py books/isles.txt isles.dat&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default, &lt;em&gt;Make&lt;/em&gt; prints the recipes that it executes&lt;a href="#fn3" class="footnoteRef" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let's see if we got what we expected.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;head -5 isles.dat
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first 5 lines of that file should look exactly like before.&lt;/p&gt;
&lt;h2 id="rerunning-make"&gt;Rerunning &lt;em&gt;Make&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Let's try running &lt;em&gt;Make&lt;/em&gt; the same way again.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;make isles.dat
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This time, instead of executing the same recipe, &lt;em&gt;Make&lt;/em&gt; prints &lt;code&gt;make: Nothing to be done for 'isles.dat'.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;What's happening here?&lt;/p&gt;
&lt;p&gt;When you ask &lt;em&gt;Make&lt;/em&gt; to make &lt;code&gt;isles.dat&lt;/code&gt; it first looks at the modification time of that target. Next it looks at the modification time for the target's prerequisites. If the target is newer than the prerequisites &lt;em&gt;Make&lt;/em&gt; decides that the target is up-to-date and does not need to be remade.&lt;/p&gt;
&lt;p&gt;Much has been said about using modification times as the cue for remaking files. This can be another &lt;em&gt;Make&lt;/em&gt; gotcha, so keep it in mind.&lt;/p&gt;
&lt;p&gt;If you want to induce the original behavior, you just have to change the modification time of &lt;code&gt;books/isles.txt&lt;/code&gt; so that it is newer than &lt;code&gt;isles.dat&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;touch books/isles.txt
make isles.dat
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The original behavior is restored.&lt;/p&gt;
&lt;p&gt;Sometimes you just want &lt;em&gt;Make&lt;/em&gt; to tell you what it thinks about the current state of your files. &lt;code&gt;make --dry-run isles.dat&lt;/code&gt; will print &lt;em&gt;Make&lt;/em&gt;'s execution plan, without actually carrying it out. The flag can be abbreviated as &lt;code&gt;-n&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you don't pass a target as an argument to make (i.e. just run &lt;code&gt;make&lt;/code&gt;) it will assume that you want to build the first target in the Makefile.&lt;/p&gt;
&lt;h2 id="more-recipes"&gt;More recipes&lt;/h2&gt;
&lt;p&gt;Now that &lt;em&gt;Make&lt;/em&gt; knows how to build &lt;code&gt;isles.dat&lt;/code&gt;, we can add a rule for plotting those results.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;isles.png&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;isles&lt;/span&gt;.&lt;span class="n"&gt;dat&lt;/span&gt;
	./plotcount.py isles.dat isles.png
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The dependency graph now looks like:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;books/isles.txt&lt;/code&gt; → &lt;code&gt;isles.dat&lt;/code&gt; → &lt;code&gt;isles.png&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let's add a few more recipes to our Makefile.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;abyss.dat&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;/&lt;span class="n"&gt;abyss&lt;/span&gt;.&lt;span class="n"&gt;txt&lt;/span&gt;
	./wordcount.py books/abyss.txt abyss.dat

&lt;span class="nf"&gt;zipf_results.tgz&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;isles&lt;/span&gt;.&lt;span class="n"&gt;dat&lt;/span&gt; &lt;span class="n"&gt;abyss&lt;/span&gt;.&lt;span class="n"&gt;dat&lt;/span&gt; &lt;span class="n"&gt;isles&lt;/span&gt;.&lt;span class="n"&gt;png&lt;/span&gt; &lt;span class="n"&gt;abyss&lt;/span&gt;.&lt;span class="n"&gt;png&lt;/span&gt;
	rm -rf zipf_results/
	mkdir zipf_results/
	cp isles.dat abyss.dat isles.png abyss.png zipf_results/
	tar -czf zipf_results.tgz zipf_results/
	rm -r zipf_results/
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And commit the changes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git add Makefile
git commit -m &lt;span class="s2"&gt;&amp;quot;Add recipes for abyss counts, isles plotting, and the final archive.&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here the recipe for &lt;code&gt;zipf_results.tgz&lt;/code&gt; involves running a series of shell commands. When building the archive, &lt;em&gt;Make&lt;/em&gt; will run each line successively unless any return an error.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id="question"&gt;Question&lt;/h4&gt;
&lt;p&gt;Without doing it, what happens if you run &lt;code&gt;make isles.png&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;h4 id="challenge"&gt;Challenge&lt;/h4&gt;
&lt;p&gt;What does the dependency graph look like for your Makefile?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;h4 id="try-it"&gt;Try it&lt;/h4&gt;
&lt;p&gt;What happens if you run &lt;code&gt;make zipf_results.tgz&lt;/code&gt; right now?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;h4 id="practice"&gt;Practice&lt;/h4&gt;
&lt;p&gt;Write a recipe for &lt;code&gt;abyss.png&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Once you've written a recipe for &lt;code&gt;abyss.png&lt;/code&gt; you should be able to run &lt;code&gt;make zipf_results.tgz&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let's delete all of our files and try it out.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;rm abyss.* isles.*
make zipf_results.tgz
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You should get the something like the following output (the order may be different) to your terminal:&lt;/p&gt;
&lt;div class ="highlight"&gt;&lt;pre&gt;./wordcount.py books/abyss.txt abyss.dat
./wordcount.py books/isles.txt isles.dat
./plotcount.py abyss.dat abyss.png
./plotcount.py isles.dat isles.png
rm -rf zipf_results/
mkdir zipf_results/
cp isles.dat abyss.dat isles.png abyss.png zipf_results/
tar -czf zipf_results.tgz zipf_results/
rm -r zipf_results/&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since you asked for &lt;code&gt;zipf_results.tgz&lt;/code&gt; &lt;em&gt;Make&lt;/em&gt; looked first for that file. Not finding it, &lt;em&gt;Make&lt;/em&gt; looked for its prerequisites. Since none of those existed it remade the ones it could, &lt;code&gt;abyss.dat&lt;/code&gt; and &lt;code&gt;isles.dat&lt;/code&gt;. Once those were finished it was able to make &lt;code&gt;abyss.png&lt;/code&gt; and &lt;code&gt;isles.png&lt;/code&gt;, before finally building &lt;code&gt;zipf_results.tgz&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You may also have gotten an additional line in your output similar to the following.&lt;/p&gt;
&lt;div class ="highlight"&gt;&lt;pre&gt;rm abyss.dat isles.dat abyss.png isles.png&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because you only asked for &lt;code&gt;zipf_results.tgz&lt;/code&gt;, &lt;em&gt;Make&lt;/em&gt; thinks its doing you a favor by deleting the intermediate files. As computational biologists we know to never trust our analyses until they've been tested and intermediate files are a valuable audit trail. To prevent the default behavior, add the following to your Makefile.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;.SECONDARY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now remove the outputs and rerun your pipeline.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;rm zipf_results.tgz *.dat *.png
make zipf_results.tgz
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;.SECONDARY&lt;/code&gt; is one of a handful of &lt;strong&gt;special targets&lt;/strong&gt; used to control &lt;em&gt;Make&lt;/em&gt;'s behavior.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id="try-it-1"&gt;Try it&lt;/h4&gt;
&lt;p&gt;What happens if you &lt;code&gt;touch abyss.dat&lt;/code&gt; and then &lt;code&gt;make zipf_results.tgz&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git add Makefile
git commit -m &lt;span class="s2"&gt;&amp;quot;Finish translating pipeline script to a Makefile.&amp;quot;&lt;/span&gt;
git status
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice all the files that &lt;em&gt;Git&lt;/em&gt; wants to be tracking? Like before, we're not going to version control any of the intermediate or final products of our pipeline. To reflect this fact add a &lt;code&gt;.gitignore&lt;/code&gt; file:&lt;/p&gt;
&lt;div class ="highlight"&gt;&lt;pre&gt;*.dat
*.png
zipf_results.tgz
LICENSE.md&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git add .gitignore
git commit -m &lt;span class="s2"&gt;&amp;quot;Have git ignore intermediate data files.&amp;quot;&lt;/span&gt;
git status
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="phony-targets"&gt;Phony targets&lt;/h2&gt;
&lt;p&gt;Sometimes its nice to have targets that don't refer to actual files.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;isles&lt;/span&gt;.&lt;span class="n"&gt;png&lt;/span&gt; &lt;span class="n"&gt;abyss&lt;/span&gt;.&lt;span class="n"&gt;png&lt;/span&gt; &lt;span class="n"&gt;zipf_results&lt;/span&gt;.&lt;span class="n"&gt;tgz&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Even though this rule doesn't have a recipe, it does have prerequisites. Now, when you run &lt;code&gt;make all&lt;/code&gt; &lt;em&gt;Make&lt;/em&gt; will do what it needs to to bring all three of those targets up to date.&lt;/p&gt;
&lt;p&gt;It is traditional for &amp;quot;&lt;code&gt;all:&lt;/code&gt;&amp;quot; to be the first recipe in a makefile, since the first recipe is what is built by default when no other target is passed as an argument.&lt;/p&gt;
&lt;p&gt;Another traditional target is &amp;quot;&lt;code&gt;clean&lt;/code&gt;&amp;quot;. Add the following to your Makefile.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
	rm --force *.dat *.png zipf_results.tgz
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Running &lt;code&gt;make clean&lt;/code&gt; will now remove all of the cruft.&lt;/p&gt;
&lt;p&gt;Watch out, though!&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id="try-it-2"&gt;Try it&lt;/h4&gt;
&lt;p&gt;What happens if you create a file named &lt;code&gt;clean&lt;/code&gt; (i.e. &lt;code&gt;touch clean&lt;/code&gt;) and then run &lt;code&gt;make clean&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When you run &lt;code&gt;make clean&lt;/code&gt; you get &lt;code&gt;make: Nothing to be done for 'clean'.&lt;/code&gt;. That's &lt;em&gt;not&lt;/em&gt; because all those files have already been removed. &lt;em&gt;Make&lt;/em&gt; isn't that smart. Instead, make sees that there is already a file named &amp;quot;&lt;code&gt;clean&lt;/code&gt;&amp;quot; and, since this file is newer than all of its prerequisites (there are none), &lt;em&gt;Make&lt;/em&gt; decides there's nothing left to do.&lt;/p&gt;
&lt;p&gt;To avoid this problem add the following to your Makefile.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;clean&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This special target tells &lt;em&gt;Make&lt;/em&gt; to assume that the targets &amp;quot;all&amp;quot;, and &amp;quot;clean&amp;quot; are &lt;em&gt;not&lt;/em&gt; real files; they're &lt;strong&gt;phony&lt;/strong&gt; targets.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git add Makefile
git commit -m &lt;span class="s2"&gt;&amp;quot;Added &amp;#39;all&amp;#39; and &amp;#39;clean&amp;#39; recipes.&amp;quot;&lt;/span&gt;
rm clean
&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id="make-features"&gt;&lt;em&gt;Make&lt;/em&gt; features&lt;/h1&gt;
&lt;p&gt;(Estimated time: 45 minutes)&lt;/p&gt;
&lt;p&gt;Right now our Makefile looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Dummy targets&lt;/span&gt;
&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;isles&lt;/span&gt;.&lt;span class="n"&gt;png&lt;/span&gt; &lt;span class="n"&gt;abyss&lt;/span&gt;.&lt;span class="n"&gt;png&lt;/span&gt; &lt;span class="n"&gt;zipf_results&lt;/span&gt;.&lt;span class="n"&gt;tgz&lt;/span&gt;

&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
	rm --force *.dat *.png zipf_results.tgz

&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;clean&lt;/span&gt;
&lt;span class="nf"&gt;.SECONDARY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

&lt;span class="c"&gt;# Analysis and plotting&lt;/span&gt;
&lt;span class="nf"&gt;isles.dat&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;/&lt;span class="n"&gt;isles&lt;/span&gt;.&lt;span class="n"&gt;txt&lt;/span&gt;
	./wordcount.py books/isles.txt isles.dat

&lt;span class="nf"&gt;isles.png&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;isles&lt;/span&gt;.&lt;span class="n"&gt;dat&lt;/span&gt;
	./plotcount.py isles.dat isles.png

&lt;span class="nf"&gt;abyss.dat&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;/&lt;span class="n"&gt;abyss&lt;/span&gt;.&lt;span class="n"&gt;txt&lt;/span&gt;
	./wordcount.py books/abyss.txt abyss.dat

&lt;span class="nf"&gt;abyss.png&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;abyss&lt;/span&gt;.&lt;span class="n"&gt;png&lt;/span&gt;
	./plotcount.py abyss.dat abyss.png

&lt;span class="c"&gt;# Archive for sharing&lt;/span&gt;
&lt;span class="nf"&gt;zipf_results.tgz&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;isles&lt;/span&gt;.&lt;span class="n"&gt;dat&lt;/span&gt; &lt;span class="n"&gt;abyss&lt;/span&gt;.&lt;span class="n"&gt;dat&lt;/span&gt; &lt;span class="n"&gt;isles&lt;/span&gt;.&lt;span class="n"&gt;png&lt;/span&gt; &lt;span class="n"&gt;abyss&lt;/span&gt;.&lt;span class="n"&gt;png&lt;/span&gt;
	rm -rf zipf_results/
	mkdir zipf_results/
	cp isles.dat abyss.dat isles.png abyss.png zipf_results/
	tar -czf zipf_results.tgz zipf_results/
	rm -r zipf_results/
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Looks good, don't you think? Notice the added comments, starting with the &amp;quot;&lt;code&gt;#&lt;/code&gt;&amp;quot; character just like in Python, R, shell, etc.&lt;/p&gt;
&lt;p&gt;Using these recipes, a simple call to &lt;code&gt;make&lt;/code&gt; builds all the same files that we were originally making either manually or using the master script, but with a few bonus features.&lt;/p&gt;
&lt;p&gt;Now, if we change one of the inputs, we don't have to rebuild everything. Instead, &lt;em&gt;Make&lt;/em&gt; knows to only rebuild the files that, either directly or indirectly, depend on the file that changed. This is called an &lt;strong&gt;incremental build&lt;/strong&gt;. It's no longer our job to track those dependencies. One fewer cognitive burden getting in the way of research progress!&lt;/p&gt;
&lt;p&gt;In addition, a makefile explicitly documents the inputs to and outputs from every step in the analysis. These are like informal &amp;quot;USAGE:&amp;quot; documentation for our scripts.&lt;/p&gt;
&lt;h2 id="parallel-make"&gt;Parallel &lt;em&gt;Make&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;And check this out!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;make clean
make --jobs
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Did you see it? The &lt;code&gt;--jobs&lt;/code&gt; flag (just &amp;quot;&lt;code&gt;-j&lt;/code&gt;&amp;quot; works too) tells &lt;em&gt;Make&lt;/em&gt; to run recipes in &lt;em&gt;parallel&lt;/em&gt;. Our dependency graph clearly shows that &lt;code&gt;abyss.dat&lt;/code&gt; and &lt;code&gt;isles.dat&lt;/code&gt; are mutually independent and can both be built at the same time. Likewise for &lt;code&gt;abyss.png&lt;/code&gt; and &lt;code&gt;isles.png&lt;/code&gt;. If you've got a bunch of independent branches in your analysis, this can greatly speed up your build process.&lt;/p&gt;
&lt;h2 id="d.r.y.-dont-repeat-yourself"&gt;D.R.Y. (Don't Repeat Yourself)&lt;/h2&gt;
&lt;p&gt;In many programming language, the bulk of the language features are there to allow the programmer to describe long-winded computational routines as short, expressive, beautiful code. Features in Python or R like user-defined variables and functions are useful in part because they mean we don't have to write out (or think about) all of the details over and over again. This good habit of writing things out only once is known as the D.R.Y. principle.&lt;/p&gt;
&lt;p&gt;In &lt;em&gt;Make&lt;/em&gt; a number of features are designed to minimize repetitive code. Our current makefile does &lt;em&gt;not&lt;/em&gt; conform to this principle, but &lt;em&gt;Make&lt;/em&gt; is perfectly capable of doing so.&lt;/p&gt;
&lt;h2 id="automatic-variables"&gt;Automatic variables&lt;/h2&gt;
&lt;p&gt;One overly repetitive part of our Makefile: Targets and prerequisites are in both the header &lt;em&gt;and&lt;/em&gt; the recipe of each rule.&lt;/p&gt;
&lt;p&gt;It turns out, that&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;isles.dat&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;/&lt;span class="n"&gt;isles&lt;/span&gt;.&lt;span class="n"&gt;txt&lt;/span&gt;
	./wordcount.py books/isles.txt isles.dat
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;can be rewritten as&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;isles.dat&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;/&lt;span class="n"&gt;isles&lt;/span&gt;.&lt;span class="n"&gt;txt&lt;/span&gt;
	./wordcount.py &lt;span class="nv"&gt;$^&lt;/span&gt; &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here we've replaced the prerequisite &amp;quot;&lt;code&gt;books/isles.txt&lt;/code&gt;&amp;quot; in the recipe with &amp;quot;&lt;code&gt;$^&lt;/code&gt;&amp;quot; and the target &amp;quot;&lt;code&gt;isles.dat&lt;/code&gt;&amp;quot; with &amp;quot;&lt;code&gt;$@&lt;/code&gt;&amp;quot;. Both &amp;quot;&lt;code&gt;$^&lt;/code&gt;&amp;quot; and &amp;quot;&lt;code&gt;$@&lt;/code&gt;&amp;quot; are variables that refer to all of the prerequisites and target of a rule, respectively. In &lt;em&gt;Make&lt;/em&gt;, variables are referenced with a leading dollar sign symbol. While we can also define our own variables, &lt;em&gt;Make&lt;/em&gt; &lt;em&gt;automatically&lt;/em&gt; defines a number of variables, like the ones I've just shown you&lt;a href="#fn4" class="footnoteRef" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Therefore&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;zipf_results.tgz&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;isles&lt;/span&gt;.&lt;span class="n"&gt;dat&lt;/span&gt; &lt;span class="n"&gt;abyss&lt;/span&gt;.&lt;span class="n"&gt;dat&lt;/span&gt; &lt;span class="n"&gt;isles&lt;/span&gt;.&lt;span class="n"&gt;png&lt;/span&gt; &lt;span class="n"&gt;abyss&lt;/span&gt;.&lt;span class="n"&gt;png&lt;/span&gt;
	rm -rf zipf_results/
	mkdir zipf_results/
	cp isles.dat abyss.dat isles.png abyss.png zipf_results/
	tar -czf zipf_results.tgz zipf_results/
	rm -r zipf_results/
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;can now be rewritten as&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;zipf_results.tgz&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;isles&lt;/span&gt;.&lt;span class="n"&gt;dat&lt;/span&gt; &lt;span class="n"&gt;abyss&lt;/span&gt;.&lt;span class="n"&gt;dat&lt;/span&gt; &lt;span class="n"&gt;isles&lt;/span&gt;.&lt;span class="n"&gt;png&lt;/span&gt; &lt;span class="n"&gt;abyss&lt;/span&gt;.&lt;span class="n"&gt;png&lt;/span&gt;
	rm -rf zipf_results/
	mkdir zipf_results/
	cp &lt;span class="nv"&gt;$^&lt;/span&gt; zipf_results/
	tar -czf &lt;span class="nv"&gt;$@&lt;/span&gt; zipf_results/
	rm -r zipf_results/
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That's a little less cluttered, and still perfectly understandable once you know what the variables mean.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id="try-it-3"&gt;Try it&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;make clean
make isles.dat
&lt;/pre&gt;&lt;/div&gt;

&lt;!--Those extra backticks are because of Vim syntax highlighting.--&gt;
&lt;/blockquote&gt;
&lt;p&gt;You should get the same output as last time. Internally, &lt;em&gt;Make&lt;/em&gt; replaced &amp;quot;&lt;code&gt;$@&lt;/code&gt;&amp;quot; with &amp;quot;&lt;code&gt;isles.dat&lt;/code&gt;&amp;quot; and &amp;quot;&lt;code&gt;$^&lt;/code&gt;&amp;quot; with &amp;quot;&lt;code&gt;books/isles.txt&lt;/code&gt;&amp;quot; before running the recipe.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id="practice-1"&gt;Practice&lt;/h4&gt;
&lt;p&gt;Go ahead and rewrite all of the rules in your Makefile to minimize repetition and take advantage of these automatic variables. Don't forget to commit your work.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="pattern-rules"&gt;Pattern rules&lt;/h2&gt;
&lt;p&gt;Another deviation from D.R.Y.: We have nearly identical recipes for &lt;code&gt;abyss.dat&lt;/code&gt; and &lt;code&gt;isles.dat&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It turns out we can replace &lt;em&gt;both&lt;/em&gt; of those rules with just one rule, by telling &lt;em&gt;Make&lt;/em&gt; about the relationships between filename &lt;em&gt;patterns&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A &amp;quot;pattern rule&amp;quot; looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;%.dat&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;/%.&lt;span class="n"&gt;txt&lt;/span&gt;
	countwords.py &lt;span class="nv"&gt;$^&lt;/span&gt; &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here we've replaced the book name with a percent sign, &amp;quot;&lt;code&gt;%&lt;/code&gt;&amp;quot;. The &amp;quot;&lt;code&gt;%&lt;/code&gt;&amp;quot; is called the &lt;strong&gt;stem&lt;/strong&gt; and matches any sequence of characters in the target. (Kind of like a &amp;quot;&lt;code&gt;*&lt;/code&gt;&amp;quot; (glob) in a path name, but they are &lt;em&gt;not&lt;/em&gt; the same.) Whatever it matches is then filled in to the prerequisites wherever there's a &amp;quot;&lt;code&gt;%&lt;/code&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;This rule can be interpreted as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In order to build a file named &lt;code&gt;[something].dat&lt;/code&gt; (the target) find a file named &lt;code&gt;books/[that same something].txt&lt;/code&gt; (the prerequisite) and run &lt;code&gt;countwords.py [the prerequisite] [the target]&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Notice how helpful the automatic variables are here. This recipe will work no matter what stem is being matched!&lt;/p&gt;
&lt;p&gt;We can replace &lt;em&gt;both&lt;/em&gt; of the rules that matched this pattern (&lt;code&gt;abyss.dat&lt;/code&gt; and &lt;code&gt;isles.dat&lt;/code&gt;) with just one rule. Go ahead and do that in your Makefile.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id="try-it-4"&gt;Try it&lt;/h4&gt;
&lt;p&gt;After you've replaced the two rules with one pattern rule, try removing all of the products (&lt;code&gt;make clean&lt;/code&gt;) and rerunning the pipeline.&lt;/p&gt;
&lt;p&gt;Is anything different now that you're using the pattern rule?&lt;/p&gt;
&lt;p&gt;If everything still works, commit your changes to &lt;em&gt;Git&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;h4 id="practice-2"&gt;Practice&lt;/h4&gt;
&lt;p&gt;Replace the recipes for &lt;code&gt;abyss.png&lt;/code&gt; and &lt;code&gt;isles.png&lt;/code&gt; with a single pattern rule.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;h4 id="challenge-1"&gt;Challenge&lt;/h4&gt;
&lt;p&gt;Add &lt;code&gt;books/sierra.txt&lt;/code&gt; to your pipeline.&lt;/p&gt;
&lt;p&gt;(i.e. &lt;code&gt;make all&lt;/code&gt; should plot the word counts and add the plots to &lt;code&gt;zipf_results.tgz&lt;/code&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Commit your changes to &lt;em&gt;Git&lt;/em&gt; before we move on.&lt;/p&gt;
&lt;h2 id="user-defined-variables"&gt;User defined variables&lt;/h2&gt;
&lt;p&gt;Not all variables in a makefile are of the automatic variety. Users can define their own, as well.&lt;/p&gt;
&lt;p&gt;Add this lines at the top of your makefile:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;ARCHIVED&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; isles.dat isles.png &lt;span class="se"&gt;\&lt;/span&gt;
            abyss.dat abyss.png &lt;span class="se"&gt;\&lt;/span&gt;
            sierra.dat sierra.png
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Just like many other languages, in makefiles &amp;quot;&lt;code&gt;\&lt;/code&gt;&amp;quot; is a line-continuation character. Think of this variable definition as a single line without the backslash.&lt;/p&gt;
&lt;p&gt;The variable &lt;code&gt;ARCHIVED&lt;/code&gt; is a list of the files that we want to include in our tarball. Now wherever we write &lt;code&gt;${ARCHIVED}&lt;/code&gt; it will be replaced with that list of files. The dollar sign, &amp;quot;&lt;code&gt;$&lt;/code&gt;&amp;quot;, and curly-braces, &amp;quot;&lt;code&gt;{}&lt;/code&gt;&amp;quot;, are both mandatory when inserting the contents of a variable.&lt;/p&gt;
&lt;p&gt;Notice the backslashes in the variable definition splitting the list over three lines, instead of one very long line. Also notice that we assigned to the variable with &amp;quot;&lt;code&gt;:=&lt;/code&gt;&amp;quot;. This is generally a Good Idea; Assigning with a normal equals sign can result in non-intuitive behavior for reasons that we will not be talking about&lt;a href="#fn5" class="footnoteRef" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt;. Finally, notice that the items in our list are separated by &lt;em&gt;whitespace&lt;/em&gt;, not commas. Prerequisite lists were the same way; this is just how lists of things work in makefiles. If you included commas they would be considered parts of the filenames.&lt;/p&gt;
&lt;p&gt;Using this variable we can replace the prerequisites of &lt;code&gt;zipf_results.tgz&lt;/code&gt;. That rule would now be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;zipf_results.tgz&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; ${&lt;span class="n"&gt;ARCHIVED&lt;/span&gt;}
	rm -rf zipf_results/
	mkdir zipf_results/
	cp &lt;span class="nv"&gt;$^&lt;/span&gt; zipf_results/
	tar -czf &lt;span class="nv"&gt;$@&lt;/span&gt; zipf_results/
	rm -r zipf_results/
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can also use &lt;code&gt;${ARCHIVED}&lt;/code&gt; to simplify our cleanup rule.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
	rm --force &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ARCHIVED&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; zipf_results.tgz
&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;h4 id="try-it-5"&gt;Try it&lt;/h4&gt;
&lt;p&gt;Try running &lt;code&gt;clean&lt;/code&gt; and then &lt;code&gt;all&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Does everything still work?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="best-practices-for-make-based-projects"&gt;Best practices for &lt;em&gt;Make&lt;/em&gt;-based projects&lt;/h1&gt;
&lt;p&gt;(Estimated time: 60 minutes)&lt;/p&gt;
&lt;p&gt;A Makefile can be an important part of a reproducible research pipeline. Have you noticed how simple it is now to add/remove books from our analysis? Just add or remove those files from the definition of &lt;code&gt;ARCHIVED&lt;/code&gt; or the prerequisites for the &lt;code&gt;all&lt;/code&gt; target! With a master script approach, like &lt;code&gt;run_pipeline.sh&lt;/code&gt;, adding an additional book required either more complicated or less transparent changes.&lt;/p&gt;
&lt;h2 id="whats-a-prerequisite"&gt;What's a prerequisite?&lt;/h2&gt;
&lt;p&gt;We've talked a lot about the power of &lt;em&gt;Make&lt;/em&gt; for rebuilding research outputs when input data changes. When doing novel data analysis, however, it's very common for our &lt;em&gt;scripts&lt;/em&gt; to be as or &lt;em&gt;more&lt;/em&gt; dynamic than the data.&lt;/p&gt;
&lt;p&gt;What happens when we edit our scripts instead of changing our data?&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id="try-it-6"&gt;Try it&lt;/h4&gt;
&lt;p&gt;First, run &lt;code&gt;make all&lt;/code&gt; so your analysis is up-to-date.&lt;/p&gt;
&lt;p&gt;Let's change the default number of entries in the rank/frequency plot from 10 to 5.&lt;/p&gt;
&lt;p&gt;(Hint: edit the function definition for &lt;code&gt;plot_word_counts&lt;/code&gt; in &lt;code&gt;plotcounts.py&lt;/code&gt; to read &lt;code&gt;limit=5&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;Now run &lt;code&gt;make all&lt;/code&gt; again. What happened?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As it stands, we have to run &lt;code&gt;make clean&lt;/code&gt; followed by &lt;code&gt;make all&lt;/code&gt; to update our analysis with the new script. We're missing out on the benefits of incremental analysis when our scripts are changing too.&lt;/p&gt;
&lt;p&gt;There must be a better way...and there is! &lt;em&gt;Scripts should be prerequisites too.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Let's edit the pattern rule for &lt;code&gt;%.png&lt;/code&gt; to include &lt;code&gt;plotcounts.py&lt;/code&gt; as a prerequisites.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;%.png&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;plotcounts&lt;/span&gt;.&lt;span class="n"&gt;py&lt;/span&gt; %.&lt;span class="n"&gt;dat&lt;/span&gt;
	./&lt;span class="nv"&gt;$^&lt;/span&gt; &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The header makes sense, but that's a strange looking recipe: just two automatic variables.&lt;/p&gt;
&lt;p&gt;This recipe works because &amp;quot;&lt;code&gt;$^&lt;/code&gt;&amp;quot; is replaced with all of the prerequisites. &lt;em&gt;In order&lt;/em&gt;. When building &lt;code&gt;abyss.png&lt;/code&gt;, for instance, '&lt;code&gt;./$^ $@&lt;/code&gt;' becomes &lt;code&gt;./plotcounts.py abyss.dat&lt;/code&gt;, which is actually exactly what we want.&lt;/p&gt;
&lt;p&gt;(Remember that we need the leading '&lt;code&gt;./&lt;/code&gt;' so that Bash knows we're executing a file in the current directory and not a command in our path.)&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id="try-it-7"&gt;Try it&lt;/h4&gt;
&lt;p&gt;What happens when you run the pipeline after modifying your script again?&lt;/p&gt;
&lt;p&gt;(Changes to your script can be simulated with &lt;code&gt;touch plotcounts.py&lt;/code&gt;.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;h4 id="practice-3"&gt;Practice&lt;/h4&gt;
&lt;p&gt;Update your other rules to include the relevant scripts as prerequisites.&lt;/p&gt;
&lt;p&gt;Commit your changes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="directory-structure"&gt;Directory structure&lt;/h2&gt;
&lt;p&gt;Take a look at all of the clutter in your project directory (run &lt;code&gt;ls&lt;/code&gt; to list all of the files). For such a small project that's a lot of junk! Imagine how hard it would be to find your way around this analysis if you had more than three steps? Let's move some stuff around to make our project easier to navigate.&lt;/p&gt;
&lt;h3 id="store-scripts-in-scripts"&gt;Store scripts in &lt;code&gt;scripts/&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;First we'll stow away the scripts.&lt;/p&gt;
&lt;div class ="highlight"&gt;&lt;pre&gt;mkdir scripts/
mv plotcounts.py wordcount.py scripts/&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We also need to update our Makefile to reflect the change:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;%.dat&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;countwords&lt;/span&gt;.&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;/%.&lt;span class="n"&gt;txt&lt;/span&gt;
	./&lt;span class="nv"&gt;$^&lt;/span&gt; &lt;span class="nv"&gt;$@&lt;/span&gt;

&lt;span class="nf"&gt;%.png&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;plotcounts&lt;/span&gt;.&lt;span class="n"&gt;py&lt;/span&gt; %.&lt;span class="n"&gt;dat&lt;/span&gt;
	./&lt;span class="nv"&gt;$^&lt;/span&gt; &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;becomes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;%.dat&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scripts&lt;/span&gt;/&lt;span class="n"&gt;countwords&lt;/span&gt;.&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;/%.&lt;span class="n"&gt;txt&lt;/span&gt;
	&lt;span class="nv"&gt;$^&lt;/span&gt; &lt;span class="nv"&gt;$@&lt;/span&gt;

&lt;span class="nf"&gt;%.png&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scripts&lt;/span&gt;/&lt;span class="n"&gt;plotcounts&lt;/span&gt;.&lt;span class="n"&gt;py&lt;/span&gt; %.&lt;span class="n"&gt;dat&lt;/span&gt;
	&lt;span class="nv"&gt;$^&lt;/span&gt; &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That's a little more verbose, but it is now explicit that &lt;code&gt;countwords.py&lt;/code&gt; and &lt;code&gt;plotcount.py&lt;/code&gt; are scripts.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Git&lt;/em&gt; should have no problem with the move once you tell it which files to be aware of.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git add countwords.py plotcounts.py
git add scripts/countwords.py scripts/plotcounts.py
git add Makefile
git commit -m &lt;span class="s2"&gt;&amp;quot;Move scripts into a subdirectory.&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Great! From here on, when we add new scripts to our analysis they won't clutter up our project root.&lt;/p&gt;
&lt;h3 id="hide-intermediate-files-in-data"&gt;&amp;quot;Hide&amp;quot; intermediate files in &lt;code&gt;data/&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Speaking of clutter, what are we gonna do about all of these intermediate files!? Put 'em in a subdirectory!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir data/
mv *.tsv data/
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And then fix up your Makefile. Adjust the relevant lines to look like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# ...&lt;/span&gt;

&lt;span class="nv"&gt;ARCHIVED&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; data/isles.dat isles.png &lt;span class="se"&gt;\&lt;/span&gt;
            data/abyss.dat abyss.png &lt;span class="se"&gt;\&lt;/span&gt;
            data/sierra.dat sierra.png

&lt;span class="c"&gt;# ...&lt;/span&gt;

&lt;span class="nf"&gt;data/%.dat&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scripts&lt;/span&gt;/&lt;span class="n"&gt;countwords&lt;/span&gt;.&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;/%.&lt;span class="n"&gt;txt&lt;/span&gt;
	&lt;span class="nv"&gt;$^&lt;/span&gt; &lt;span class="nv"&gt;$@&lt;/span&gt;

&lt;span class="nf"&gt;%.png&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scripts&lt;/span&gt;/&lt;span class="n"&gt;plotcounts&lt;/span&gt;.&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;/%.&lt;span class="n"&gt;dat&lt;/span&gt;

&lt;span class="c"&gt;# ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Thanks to our &lt;code&gt;ARCHIVED&lt;/code&gt; variable, making these changes is pretty simple.&lt;/p&gt;
&lt;p&gt;We have to make one more change if we don't want &lt;em&gt;Git&lt;/em&gt; to bother us about untracked files. Update your &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/p&gt;
&lt;div class ="highlight"&gt;&lt;pre&gt;data/*.dat
*.png
zipf_results.tgz
LICENSE.md&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now commit your changes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git add Makefile
git add .gitignore
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Simple!&lt;/p&gt;
&lt;h3 id="output-finished-products-to-fig"&gt;Output finished products to &lt;code&gt;fig/&lt;/code&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;h4 id="practice-4"&gt;Practice&lt;/h4&gt;
&lt;p&gt;Update your Makefile so that the plots and &lt;code&gt;zipf_results.tgz&lt;/code&gt; are in a directory called &lt;code&gt;fig/&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can call this directory something else if you prefer, but &lt;code&gt;fig/&lt;/code&gt; seems short and descriptive.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id="try-it-8"&gt;Try it&lt;/h4&gt;
&lt;p&gt;Does your pipeline still execute the way you expect?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="file-naming"&gt;File naming&lt;/h2&gt;
&lt;h3 id="use-file-extensions-to-indicate-format"&gt;Use file extensions to indicate format&lt;/h3&gt;
&lt;p&gt;Up to this point, we've been working with three types of data files, each with it's own file extension.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;&lt;code&gt;.txt&lt;/code&gt;&amp;quot; files: the original book in plain-text&lt;/li&gt;
&lt;li&gt;&amp;quot;&lt;code&gt;.dat&lt;/code&gt;&amp;quot; files: word counts and percentages in a plain-text format&lt;/li&gt;
&lt;li&gt;&amp;quot;&lt;code&gt;.png&lt;/code&gt;&amp;quot; files: PNG formatted barplots&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using file extensions like these clearly indicates to anyone not familiar with your project what software to view each file with; you won't get much out of opening a PNG with a text editor. Whenever possible, use a widely used extension to make it easy for others to understand your data.&lt;/p&gt;
&lt;p&gt;File extensions also give us a handle for describing the flow of data in our pipeline. Pattern rules rely on this convention. Our makefile says that the raw, book data feeds into word count data which feeds into barplot data.&lt;/p&gt;
&lt;p&gt;But the current naming scheme has one obvious ambiguity: &amp;quot;&lt;code&gt;.dat&lt;/code&gt;&amp;quot; isn't particularly descriptive. Lots of file formats can be described as &amp;quot;data&amp;quot;, including binary formats that would require specialized software to view. For tab-delimited, tabular data (data in rows and columns), &amp;quot;&lt;code&gt;.tsv&lt;/code&gt;&amp;quot; is a more precise convention.&lt;/p&gt;
&lt;p&gt;Updating our pipeline to use this extension is as simple as find-and-replace &amp;quot;&lt;code&gt;.dat&lt;/code&gt;&amp;quot; to &amp;quot;&lt;code&gt;.tsv&lt;/code&gt;&amp;quot; in our Makefile. If you're tired of &lt;code&gt;mv&lt;/code&gt;-ing your files every time you change your pipeline you can also &lt;code&gt;make clean&lt;/code&gt; followed by &lt;code&gt;make all&lt;/code&gt; to check that everything still works.&lt;/p&gt;
&lt;p&gt;You might want to update your &amp;quot;&lt;code&gt;clean&lt;/code&gt;&amp;quot; recipe to remove all the junk like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
	rm -f data/* fig/*
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Be sure to commit all of your changes.&lt;/p&gt;
&lt;h3 id="infix-processing-hints"&gt;Infix processing hints&lt;/h3&gt;
&lt;p&gt;One of our goals in implementing best practices for our analysis pipeline is to make it easy to change it without rewriting everything. Let's add a preprocessing step to our analysis that puts everything in lowercase before counting words.&lt;/p&gt;
&lt;p&gt;The program &lt;code&gt;tr&lt;/code&gt; (short for &amp;quot;translate&amp;quot;) is a Unix-style filter that swaps one set of characters for another. &lt;code&gt;tr '[:upper:]' '[:lower:]' &amp;lt; [input file] &amp;gt; [output file]&lt;/code&gt; will read the mixedcase input file and write all lowercase to the output file.&lt;/p&gt;
&lt;p&gt;We can add this to our pipeline. We know the recipe is going to look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;tr &amp;#39;[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;:]&amp;#39; &amp;#39;[:&lt;span class="n"&gt;lower&lt;/span&gt;:]&amp;#39; &amp;lt; $^ &amp;gt; $@
&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;h4 id="challenge-2"&gt;Challenge&lt;/h4&gt;
&lt;p&gt;Rewrite your Makefile to update the pipeline with the preprocessing step.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You probably decided to take the pattern &lt;code&gt;books/%.txt&lt;/code&gt; as the prerequisite, but what did you opt to name the target?&lt;/p&gt;
&lt;p&gt;&lt;code&gt;data/%.txt&lt;/code&gt; is an option, but that means we have two files named &lt;code&gt;[bookname].txt&lt;/code&gt;, one in &lt;code&gt;books/&lt;/code&gt; and one in &lt;code&gt;data/&lt;/code&gt;. Probably not the easiest to differentiate.&lt;/p&gt;
&lt;p&gt;A better option is to use a more descriptive filename.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;data/%.lower.txt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;/%.&lt;span class="n"&gt;txt&lt;/span&gt;
	tr &lt;span class="s1"&gt;&amp;#39;[:upper:]&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[:lower:]&amp;#39;&lt;/span&gt; &amp;lt; &lt;span class="nv"&gt;$^&lt;/span&gt; &amp;gt; &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;By including an &lt;strong&gt;infix&lt;/strong&gt; of &lt;code&gt;.lower.&lt;/code&gt; in our filename it's easy to see that one file is a lowercase version of the mixedcase original. Now we can extend our pipeline with a variety of pre- and post-processing steps, give each of them a descriptive infix, and the names will be a self-documenting record of its origins.&lt;/p&gt;
&lt;p&gt;For reasons which may be apparent in a minute, let's also make a dummy preprocessing step which will just copy the books verbatim into our &lt;code&gt;data/&lt;/code&gt; directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;data/%.txt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;/%.&lt;span class="n"&gt;txt&lt;/span&gt;
	cp &lt;span class="nv"&gt;$^&lt;/span&gt; &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And, in the spirit of infixes, we'll rename &lt;code&gt;data/%.tsv&lt;/code&gt; to be more descriptive.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;data/%.counts.tsv&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scripts&lt;/span&gt;/&lt;span class="n"&gt;wordcount&lt;/span&gt;.&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;/%.&lt;span class="n"&gt;txt&lt;/span&gt;
	&lt;span class="nv"&gt;$^&lt;/span&gt; &lt;span class="nv"&gt;$@&lt;/span&gt;

&lt;span class="nf"&gt;fig/%.counts.png&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scripts&lt;/span&gt;/&lt;span class="n"&gt;plotcount&lt;/span&gt;.&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;/%.&lt;span class="n"&gt;counts&lt;/span&gt;.&lt;span class="n"&gt;tsv&lt;/span&gt;
	&lt;span class="nv"&gt;$^&lt;/span&gt; &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Our Makefile now documents explicitly that we require a tab-delimited table of word counts in order to generate the plot, whereas before any &lt;code&gt;.tsv&lt;/code&gt; file would suggest a word-plot was possible.&lt;/p&gt;
&lt;p&gt;Here's the &lt;em&gt;full&lt;/em&gt; Makefile:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;ARCHIVED&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; data/isles.lower.counts.tsv data/abyss.lower.counts.tsv &lt;span class="se"&gt;\&lt;/span&gt;
            data/sierra.lower.counts.tsv fig/isles.lower.counts.png &lt;span class="se"&gt;\&lt;/span&gt;
            fig/abyss.lower.counts.png fig/sierra.lower.counts.png

&lt;span class="c"&gt;# Dummy targets&lt;/span&gt;
&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fig&lt;/span&gt;/&lt;span class="n"&gt;isles&lt;/span&gt;.&lt;span class="n"&gt;lower&lt;/span&gt;.&lt;span class="n"&gt;counts&lt;/span&gt;.&lt;span class="n"&gt;png&lt;/span&gt; &lt;span class="n"&gt;fig&lt;/span&gt;/&lt;span class="n"&gt;abyss&lt;/span&gt;.&lt;span class="n"&gt;lower&lt;/span&gt;.&lt;span class="n"&gt;counts&lt;/span&gt;.&lt;span class="n"&gt;png&lt;/span&gt; \
        &lt;span class="n"&gt;fig&lt;/span&gt;/&lt;span class="n"&gt;sierra&lt;/span&gt;.&lt;span class="n"&gt;lower&lt;/span&gt;.&lt;span class="n"&gt;counts&lt;/span&gt;.&lt;span class="n"&gt;png&lt;/span&gt; &lt;span class="n"&gt;zipf_results&lt;/span&gt;.&lt;span class="n"&gt;tgz&lt;/span&gt;

&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
	rm --force data/* fig/*

&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;clean&lt;/span&gt;
&lt;span class="nf"&gt;.SECONDARY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

&lt;span class="c"&gt;# Analysis and plotting&lt;/span&gt;
&lt;span class="nf"&gt;data/%.txt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;/%.&lt;span class="n"&gt;txt&lt;/span&gt;
	cp &lt;span class="nv"&gt;$^&lt;/span&gt; &lt;span class="nv"&gt;$@&lt;/span&gt;

&lt;span class="nf"&gt;data/%.lower.txt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;/%.&lt;span class="n"&gt;txt&lt;/span&gt;
	tr &lt;span class="s1"&gt;&amp;#39;[:upper:]&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[:lower:]&amp;#39;&lt;/span&gt; &amp;lt; &lt;span class="nv"&gt;$^&lt;/span&gt; &amp;gt; &lt;span class="nv"&gt;$@&lt;/span&gt;

&lt;span class="nf"&gt;data/%.counts.tsv&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scripts&lt;/span&gt;/&lt;span class="n"&gt;wordcount&lt;/span&gt;.&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;/%.&lt;span class="n"&gt;txt&lt;/span&gt;
	&lt;span class="nv"&gt;$^&lt;/span&gt; &lt;span class="nv"&gt;$@&lt;/span&gt;

&lt;span class="nf"&gt;fig/%.counts.png&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scripts&lt;/span&gt;/&lt;span class="n"&gt;plotcount&lt;/span&gt;.&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;/%.&lt;span class="n"&gt;counts&lt;/span&gt;.&lt;span class="n"&gt;tsv&lt;/span&gt;
	&lt;span class="nv"&gt;$^&lt;/span&gt; &lt;span class="nv"&gt;$@&lt;/span&gt;

&lt;span class="c"&gt;# Archive for sharing&lt;/span&gt;
&lt;span class="nf"&gt;zipf_results.tgz&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; ${&lt;span class="n"&gt;ARCHIVED&lt;/span&gt;}
	rm -rf zipf_results/
	mkdir zipf_results/
	cp &lt;span class="nv"&gt;$^&lt;/span&gt; zipf_results/
	tar -czf &lt;span class="nv"&gt;$@&lt;/span&gt; zipf_results/
	rm -r zipf_results/
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Our filenames are certainly more verbose now, but in exchange we get:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;self-documenting filenames&lt;/li&gt;
&lt;li&gt;more flexible development&lt;/li&gt;
&lt;li&gt;and something else, too...&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;make clean
make fig/abyss.lower.counts.png
make fig/abyss.counts.png
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What happened there? We just built two different barplots, one for our analysis &lt;em&gt;with&lt;/em&gt; the preprocessing step and one &lt;em&gt;without&lt;/em&gt;. Both from the same Makefile. By liberally applying pattern rules and infix filenames we get something like a &amp;quot;filename language&amp;quot;. We describe the analyses we want to run and then have &lt;em&gt;Make&lt;/em&gt; figure out the details.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id="practice-5"&gt;Practice&lt;/h4&gt;
&lt;p&gt;Update your drawing of the dependency graph.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="built-in-testing"&gt;Built-in Testing&lt;/h2&gt;
&lt;p&gt;It's a Good Idea to check your analysis against some form of ground truth. The simplest version of this is a well-defined dataset that you can reason about independent of your code. Let's make just such a dataset. Let's write a book!&lt;/p&gt;
&lt;p&gt;Into a file called &lt;code&gt;books/test.txt&lt;/code&gt; add something like this:&lt;/p&gt;
&lt;div class ="highlight"&gt;&lt;pre&gt;My Book
By Me

This is a book that I wrote.

The END
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We don't need software to count all of the words in this book, and we can probably imagine exactly what a barplot of the count would look like. If the actual result doesn't look like we expected, then there's probably something wrong with our analysis. Testing your scripts with this tiny book is computationally cheap, too.&lt;/p&gt;
&lt;p&gt;Let's try it out!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;make fig/test.lower.counts.png
less data/test.lower.counts.tsv
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Does your counts data match what you expected?&lt;/p&gt;
&lt;p&gt;We should run this test for just about every change we make, to our scripts or to our Makefile. We're going to do that a &lt;em&gt;lot&lt;/em&gt; so we'll make it as easy as possible.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fig&lt;/span&gt;/&lt;span class="n"&gt;test&lt;/span&gt;.&lt;span class="n"&gt;lower&lt;/span&gt;.&lt;span class="n"&gt;counts&lt;/span&gt;.&lt;span class="n"&gt;png&lt;/span&gt;

&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="n"&gt;clean&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You could even add the &lt;code&gt;test&lt;/code&gt; phony target as the first thing in your Makefile. That way just calling &lt;code&gt;make&lt;/code&gt; will run your tests.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id="practice-6"&gt;Practice&lt;/h4&gt;
&lt;p&gt;Add a cleanup target called &lt;code&gt;testclean&lt;/code&gt; which is specific for the outputs of your test run.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Commit your changes, including &lt;code&gt;books/test.txt&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git add Makefile
git add -f books/test.txt
git commit -m &lt;span class="s2"&gt;&amp;quot;Add pipeline testing recipe and book.&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="review-version-control"&gt;Review: version control&lt;/h2&gt;
&lt;p&gt;We have been following three guiding principles in our use of version control during this lesson.&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;Use it (always).&lt;/p&gt;
&lt;p&gt;Version control is a Good Idea and should be used for any files which describe your pipeline. This includes notes/documentation/TODOs, scripts, and the Makefiles themselves.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don't version control raw or processed data which can be recreated.&lt;/p&gt;
&lt;p&gt;Raw data stays raw and data cleanup should be part of the pipeline. Because of this, backing up your data is imperative, but version control is not usually the best way to do so. Consider adding a recipe which downloads raw data using &lt;code&gt;wget&lt;/code&gt; or &lt;code&gt;curl&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One exception would be test or example data. These should be version controlled, as they are subject to change as testing is adapted to the evolving pipeline.&lt;/p&gt;
&lt;p&gt;In many cases metadata &lt;em&gt;should&lt;/em&gt; be version controlled, since the format and composition of the metadata is intimately linked with the analysis pipeline itself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Aim to commit &amp;quot;atomic&amp;quot; changes to your pipeline.&lt;/p&gt;
&lt;p&gt;This means you should usually run &lt;code&gt;make test&lt;/code&gt; before committing your changes so that regressions don't need to be fixed in subsequent commits. Co-dependent updates to metadata, documentation, and testing should be included in the same commit. In a perfect world, &lt;code&gt;make all&lt;/code&gt; should work, and documentation should be up to date, regardless of what revision has been checked out. Excessive application of this principle is ill advised.&lt;/p&gt;
&lt;p&gt;A more common problem are behemoth commits which make large numbers of unrelated changes. In general, a single sentence commit message should be able to summarize all of the changes in a commit.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I swear I didn't know about that post when I titled my tutorial. Great minds think alike?&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;While several other filenames will work, it is a Good Idea to always call your Makefile &lt;code&gt;Makefile&lt;/code&gt;.&lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;Notice that we didn't tell &lt;em&gt;Make&lt;/em&gt; to use &lt;code&gt;Makefile&lt;/code&gt;. When you run &lt;code&gt;make&lt;/code&gt;, the program automatically looks in several places for your Makefile.&lt;a href="#fnref3"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;See https://www.gnu.org/software/make/manual/html_node/Automatic-Variables.html].&lt;a href="#fnref4"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;Variables are complicated in &lt;em&gt;Make&lt;/em&gt;. Read the extensive [documentation][man-var] about variable assignment. [man-var]: https://www.gnu.org/software/make/manual/html_node/Using-Variables.html&lt;a href="#fnref5"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</summary><category term="software-carpentry"></category><category term="teaching"></category><category term="programming"></category><category term="make"></category><category term="pipelines"></category><category term="bioinformatics"></category><category term="software"></category></entry><entry><title>First Time Teaching Python to Novices</title><link href="http://bsmith89.github.io/blog/swc-python-lesson.html" rel="alternate"></link><updated>2015-08-14T10:00:00-04:00</updated><author><name>Byron J. Smith</name></author><id>tag:bsmith89.github.io,2015-08-12:blog/swc-python-lesson.html</id><summary type="html">&lt;p&gt;This July I co-instructed with &lt;a href="https://impactstory.org/JenniferShelton"&gt;Jennifer Shelton&lt;/a&gt; a Software Carpentry &lt;a href="http://i5k-kinbre-script-share.github.io/2015-07-23-stanford/"&gt;workshop&lt;/a&gt; at Stanford University, targeted to researchers with genomic or evolutionary datasets. Jennifer taught the shell (Bash) and version control with Git, while I taught the general programming language Python. I've been aware of the &lt;a href="http://software-carpentry.org/"&gt;organization&lt;/a&gt;, which teaches software development and computational methods to scientists, since attending a workshop in 2012. Since then I've served as a helper at one workshop (troubleshooting individual learner's problems and helping catch them up with the rest of the class), and gone through the &amp;quot;accelerated&amp;quot;, two day, instructor training at Michigan State University. After the Stanford workshop, I took part in new-instructor debriefing on August 4th, during which I mentioned that I had to greatly pare down the community-written lesson plan, &lt;a href="http://swcarpentry.github.io/python-novice-inflammation/"&gt;python-novice-inflammation&lt;/a&gt;, to fit into the two half-day session we allotted it.&lt;/p&gt;
&lt;p&gt;Karin and Tiffany, who were running the debriefing, asked me to send a note to the mentorship email list about which parts I removed and which I kept in. I thought I'd also take the opportunity to comment on the material at large: what worked for me and what didn't. What started as an email quickly ballooned into this blog post.&lt;/p&gt;
&lt;p&gt;To be explicit, I was teaching from the state of the repository at the time of the workshop&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;With this as my first workshop&lt;a href="#fn2" class="footnoteRef" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;, I (incorrectly) thought I could teach all of the topics straight through. By the time it became apparent that this wasn't going to work, adapting the first day's material had to be done on the fly. After that experience, and before the following afternoon, I prepared a subset of the remaining material that I thought I could cover. I'm now relying on my (somewhat traumatic) memory of the first session, and that outline I put together for the second day to write this summary.&lt;/p&gt;
&lt;p&gt;My plan going in was to split &lt;a href="http://swcarpentry.github.io/python-novice-inflammation/index.html#topics"&gt;the material&lt;/a&gt; after Topic 6, getting learners up to writing functions on the first day, so that we could discuss debugging and best-practices, and transition from the Jupyter notebook to shell scripts, the next day. Based on my co-instructors recommendation, I did not have learners do all of the challenge questions for each topic, but instead picked just one or two that I thought would be most useful.&lt;/p&gt;
&lt;p&gt;I found myself wishing (especially for Topic 1: &amp;quot;Analyzing Patient Data&amp;quot;) that some of the easier questions were integrated into the lesson itself, instead of all at the bottom. Learners should have had more chances to problem-solve early, instead of listening to me for the entirety of each topic before getting their feet wet.&lt;/p&gt;
&lt;h2 id="motivating-python"&gt;Motivating Python&lt;/h2&gt;
&lt;p&gt;For that &lt;a href="http://swcarpentry.github.io/python-novice-inflammation/01-numpy.html"&gt;first topic&lt;/a&gt; I &lt;em&gt;did&lt;/em&gt; cover everything, but wish I hadn't, since it was mostly focused on array operations and the specifics of working with NumPy (e.g. operations along axes). I appreciated that we were showing the learners powerful library features to motivate the later work, but I didn't feel like it was great for this workshop's &amp;quot;genomics&amp;quot; audience. Maybe these initial motivating sections should be targeted the same way the capstone projects are. It was also too long relative to the other sections, in my opinion.&lt;/p&gt;
&lt;p&gt;It &lt;em&gt;was&lt;/em&gt; very good, however, for introducing some python specifics, especially things that learners coming from other languages like R or Mathematica might not know (e.g. 0-indexing, slices, that variable assignment happens when each line is executed, etc.). It gave learners a chance to be surprised by their misconceptions and ask questions. We should do more of that.&lt;/p&gt;
&lt;p&gt;It would have been helpful for the lesson to have pre-built explanations for 0-indexing and right-exclusive slicing, since these were the hard parts and I'm not happy with the explanations I initially used.&lt;/p&gt;
&lt;p&gt;I found the nature of the made-up data (maximum values smooth and minimum values as a step-function along the first axis) distracting. I also didn't know what they were supposed to represent (beyond inflammation over time), so the &amp;quot;actually doing science&amp;quot; part of the motivation was a bit lost. Is there a reason we use these data?&lt;/p&gt;
&lt;h2 id="python-basics-lists-loops-conditionals-etc."&gt;Python basics: lists, loops, conditionals, etc.&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://swcarpentry.github.io/python-novice-inflammation/02-loop.html"&gt;Topics 2&lt;/a&gt; and &lt;a href="http://swcarpentry.github.io/python-novice-inflammation/03-lists.html"&gt;3&lt;/a&gt;, &amp;quot;Repeating Actions with Loops&amp;quot; and &amp;quot;Storing Multiple Values in Lists&amp;quot; respectively, were good and short. I didn't feel like I had to cut anything out. However, for-loop syntax was not explicitly covered early in the lesson plan. It wasn't until I realized I had gotten ahead of myself that we talked about loop variables, iterables&lt;a href="#fn3" class="footnoteRef" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;, and the indented code-block.&lt;/p&gt;
&lt;p&gt;I also thought the segue from Topic 1 to 2 was a bit weak. This was a theme throughout, mixing the inflammation data with much simpler stuff (e.g. looping over short strings and lists). I realize we want to keep the motivation going, but, as a first-time instructor, I found it to be distracting, and didn't know which I should be emphasizing to the learners.&lt;/p&gt;
&lt;p&gt;I also picked the wrong challenge question from Topic 1 (reverse &lt;code&gt;'Newton'&lt;/code&gt; using a loop), since we hadn't covered &lt;code&gt;range&lt;/code&gt;, &lt;code&gt;append&lt;/code&gt;ing to lists, &lt;code&gt;''.join&lt;/code&gt;, etc. What novice audience is that question appropriate for? Maybe the solution is simple and I'm just confused...&lt;/p&gt;
&lt;p&gt;The material for &lt;a href="http://swcarpentry.github.io/python-novice-inflammation/04-files.html"&gt;topic 4&lt;/a&gt;, &amp;quot;Analyzing Data from Multiple Files&amp;quot; worked well overall. The only mistake I remember was copy-pasting the big chunk of code from the lesson (looping over files and drawing sets of plots) instead of typing it out. I figured since most of the code was library calls, learners wouldn't get anything out of me taking the time to type all of it. That may have been true, but it meant the learners weren't executing the code at the same time as me, which interrupted the flow of the lesson.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://swcarpentry.github.io/python-novice-inflammation/05-cond.html"&gt;Topic 5&lt;/a&gt;, &amp;quot;Making Choice&amp;quot; (if-statements), was where things got hairy. I panicked a bit and went mostly off the lesson plan. It did not go well. When I tried to find something in the lesson to get me back on track, I wished there was more explicit discussion of syntax and booleans. I was able to review the topic the next day, which I think got any lost learners mostly caught up.&lt;/p&gt;
&lt;p&gt;As you can imagine, at this point we were nearing the end of the first day. I did manage to show the learners the syntax for defining and using functions, but I covered &lt;a href="http://swcarpentry.github.io/python-novice-inflammation/06-func.html"&gt;topic 6&lt;/a&gt;, &amp;quot;Creating Functions&amp;quot;, in its entirety at the start of the next session.&lt;/p&gt;
&lt;h2 id="learning-my-lesson"&gt;Learning my lesson&lt;/h2&gt;
&lt;p&gt;After the harrowing experience with conditionals on the first day, I took the time to write out a personalized lesson outline for the next day with learning objectives, steps in explaining difficult concepts, and pre-picked understanding/challenge questions. The exercise of writing an outline of learning objectives before the class was very helpful, and something I intend to repeat before future workshops.&lt;/p&gt;
&lt;p&gt;If I remember correctly&lt;a href="#fn4" class="footnoteRef" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;, the second day I started once again with functions, and largely based the lesson on the material in &lt;a href="http://swcarpentry.github.io/python-novice-inflammation/06-func.html"&gt;the topic&lt;/a&gt;. The temperature conversion formulas were an effective motivator for this lesson. I wonder if simple examples, like this one, can replace the more complex (and, admittedly, more impressive) inflammation tutorial to demonstrate the value of Python for scientists. I also integrated material from the &lt;a href="http://swcarpentry.github.io/python-novice-inflammation/07-errors.html"&gt;topic on errors and exceptions&lt;/a&gt;: tracebacks, syntax errors, etc. In this combined topic I did not use the &lt;code&gt;import errors_01&lt;/code&gt; example. It was unclear to me why the lesson plan, as written, uses a black-box script like &lt;code&gt;errors_01.py&lt;/code&gt;, and not something more explicit, like an index or attribute error, to dissect the traceback. I think the explicit approach worked well for the learners in this workshop. Since we were covering functions anyway, it wasn't hard to get a multi-level traceback. Syntax errors also combined nicely with learning function definition syntax.&lt;/p&gt;
&lt;figure&gt;
&lt;img src="http://bsmith89.github.io/blog/static/images/swc-stanford-byron.jpg" alt="The author dissecting an attribute error." /&gt;&lt;figcaption&gt;The author dissecting an attribute error.&lt;a href="#fn5" class="footnoteRef" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Somewhere in the process of talking about functions we got sidetracked with &lt;code&gt;open()&lt;/code&gt;. I was surprised to see that the lesson plans have only limited discussion of file objects, only really dealing with them in the section on &lt;code&gt;IOErrors&lt;/code&gt;. I think learners appreciated a chance to see how the array data they had used the day before were saved as a CSV, and how they could access the data directly. It also gave us a chance to show that other objects besides lists and strings can serve as iterators in for-loops.&lt;/p&gt;
&lt;p&gt;I liked how the topic 6 &lt;a href="http://swcarpentry.github.io/python-novice-inflammation/06-func.html#defining-defaults"&gt;lesson plan&lt;/a&gt; used the library function &lt;code&gt;numpy.loadtxt()&lt;/code&gt; to talk about default arguments and the &lt;code&gt;help()&lt;/code&gt; built-in. I jumped back and forth between examining that function and implementing the same things (keywords, documentation) in a &lt;code&gt;center()&lt;/code&gt; function we were building. The realized lesson was very similar to the repository's lesson plan, but a little more integrated with errors and exceptions.&lt;/p&gt;
&lt;p&gt;I had the learners implement &lt;code&gt;rescale()&lt;/code&gt; as a challenge question. We then worked together as a class to add lower and upper bounds. This was a much more difficult task than I expected (even just deriving the correct formula), and served nicely to demonstrate defensive programming and debugging. While we touched on many of the concepts in &lt;a href="http://swcarpentry.github.io/python-novice-inflammation/08-defensive.html"&gt;topics 8&lt;/a&gt; and &lt;a href="http://swcarpentry.github.io/python-novice-inflammation/09-debugging.html"&gt;9&lt;/a&gt;, these ideas, were spread throughout, and I did not walk through either as an atomic lesson.&lt;/p&gt;
&lt;p&gt;My ultimate goal on the second day was to write a program to calculate the mean inflammation of each subject in the example files and then transform the program into a command-line script that would operate as a UNIX-style filter. I remember Greg Wilson teaching Python scripting (along with Bash and SQL) that way during my first workshop (as a &lt;em&gt;learner&lt;/em&gt;!) at MSU in May 2012&lt;a href="#fn6" class="footnoteRef" id="fnref6"&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt;. This &lt;a href="http://swcarpentry.github.io/python-novice-inflammation/10-cmdline.html"&gt;last topic&lt;/a&gt; seemed like a worthwhile mini-capstone, since it would reintroduce ideas from the Bash lesson the day before, and we could version-control our work with git. While we managed to run our code as a script (rather than a cell in the Jupyter notebook), the transition was a little rough around the edges, and we didn't have time to add &lt;code&gt;sys.argv&lt;/code&gt; or &lt;code&gt;sys.stdin&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="take-aways"&gt;Take-aways&lt;/h2&gt;
&lt;p&gt;The second day of Python was much smoother than the first, and, while we did not get to all of the material, I was satisfied with what we did cover. It's quite remarkable that learners can go all the way from indexing into lists to defensive programming and unit tests in just a few hours. I'm not convinced that we got them far enough to jump right into using Python for their own work, but I hope it was a good kick-start towards that goal. I'm amazed some novice workshops only allocate a half-day session to the programming language (be it Python, R, or Matlab), although a quick survey of &lt;a href="http://software-carpentry.org/workshops/index.html#future"&gt;upcoming workshops&lt;/a&gt; suggests that almost &lt;em&gt;all&lt;/em&gt; of them do in fact use two sessions. Is this the recommended approach (and if so where is it documented) or have many instructors all independently come to the same conclusion?&lt;/p&gt;
&lt;p&gt;Even so, there's still more material in python-novice-inflammation than can be covered in two sessions. I'm under the impression that the repository is sort of &lt;em&gt;meant&lt;/em&gt; to be like that: way too big, so that instructors can pick and choose the parts that are most salient for their audience. This seems like a good idea, but it was not sufficiently communicated to me as a first-time instructor, and, while many of the difficulties I had could have been solved with more comprehensive preparation, having a &amp;quot;default&amp;quot; subset would have been helpful.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;&lt;a href="https://github.com/swcarpentry/python-novice-inflammation/tree/76e3ea24406e4b8d684c9b45f3c5fd33e23ac71a"&gt;&lt;code&gt;76e3ea24406e4b8d684c9b45f3c5fd33e23ac71a&lt;/code&gt;&lt;/a&gt;: still the HEAD as of this writing.&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;and being insufficiently prepared&lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;Actually, we talked about getting values from lists and how strings are like lists, rather than about iterables in general.&lt;a href="#fnref3"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;Despite the fact that I have those notes, I actually don't remember the details of that day's lesson as well. I wonder if there's some weird metamemory thing going on e.g. &lt;a href="http://www.sciencemag.org/content/333/6043/776.abstract"&gt;this&lt;/a&gt; (unfortunately paywalled).&lt;a href="#fnref4"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;Photo credit: Amy Hodge (&lt;a href="https://creativecommons.org/licenses/by/2.0/"&gt;CC-BY&lt;/a&gt;)&lt;a href="#fnref5"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn6"&gt;&lt;p&gt;The site for this historic event can still be found &lt;a href="https://web.archive.org/web/20120514195748/http://software-carpentry.org/boot-camps/michigan-state-university-may-2012/"&gt;here&lt;/a&gt;.&lt;a href="#fnref6"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</summary><category term="software-carpentry"></category><category term="teaching"></category><category term="programming"></category><category term="mistakes"></category><category term="python"></category></entry></feed>